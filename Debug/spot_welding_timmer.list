
spot_welding_timmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003508  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f78  08003f78  00013f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08003f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002b8  2000006c  08003fe8  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000324  08003fe8  00020324  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00078516  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004aa4  00000000  00000000  000985aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002f640  00000000  00000000  0009d04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000027c0  00000000  00000000  000cc690  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002d18  00000000  00000000  000cee50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d9a7  00000000  00000000  000d1b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000138b0  00000000  00000000  000df50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000f2dbf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009284  00000000  00000000  000f2e3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035b0 	.word	0x080035b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080035b0 	.word	0x080035b0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fe0c 	bl	8000e54 <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f870 	bl	8000328 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f830 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 fceb 	bl	8001c44 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	200001d0 	.word	0x200001d0

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	200001d0 	.word	0x200001d0

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000314:	231f      	movs	r3, #31
 8000316:	4018      	ands	r0, r3
 8000318:	3b1e      	subs	r3, #30
 800031a:	4083      	lsls	r3, r0
 800031c:	4a01      	ldr	r2, [pc, #4]	; (8000324 <HAL_NVIC_EnableIRQ+0x10>)
 800031e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000320:	4770      	bx	lr
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	e000e100 	.word	0xe000e100

08000328 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000328:	4a09      	ldr	r2, [pc, #36]	; (8000350 <HAL_SYSTICK_Config+0x28>)
 800032a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800032c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800032e:	4293      	cmp	r3, r2
 8000330:	d80d      	bhi.n	800034e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000332:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000338:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	6a03      	ldr	r3, [r0, #32]
 800033c:	0609      	lsls	r1, r1, #24
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	0a1b      	lsrs	r3, r3, #8
 8000342:	430b      	orrs	r3, r1
 8000344:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000346:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000348:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800034e:	4770      	bx	lr
 8000350:	00ffffff 	.word	0x00ffffff
 8000354:	e000e010 	.word	0xe000e010
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035e:	680b      	ldr	r3, [r1, #0]
{ 
 8000360:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000362:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000364:	2300      	movs	r3, #0
{ 
 8000366:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000368:	9a02      	ldr	r2, [sp, #8]
 800036a:	40da      	lsrs	r2, r3
 800036c:	d101      	bne.n	8000372 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800036e:	b007      	add	sp, #28
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000372:	2201      	movs	r2, #1
 8000374:	409a      	lsls	r2, r3
 8000376:	9203      	str	r2, [sp, #12]
 8000378:	9903      	ldr	r1, [sp, #12]
 800037a:	9a02      	ldr	r2, [sp, #8]
 800037c:	400a      	ands	r2, r1
 800037e:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000380:	d100      	bne.n	8000384 <HAL_GPIO_Init+0x28>
 8000382:	e08c      	b.n	800049e <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000384:	9a01      	ldr	r2, [sp, #4]
 8000386:	2110      	movs	r1, #16
 8000388:	6852      	ldr	r2, [r2, #4]
 800038a:	0016      	movs	r6, r2
 800038c:	438e      	bics	r6, r1
 800038e:	2e02      	cmp	r6, #2
 8000390:	d10e      	bne.n	80003b0 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000392:	2507      	movs	r5, #7
 8000394:	401d      	ands	r5, r3
 8000396:	00ad      	lsls	r5, r5, #2
 8000398:	3901      	subs	r1, #1
 800039a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800039c:	08dc      	lsrs	r4, r3, #3
 800039e:	00a4      	lsls	r4, r4, #2
 80003a0:	1904      	adds	r4, r0, r4
 80003a2:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003a4:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003a6:	9901      	ldr	r1, [sp, #4]
 80003a8:	6909      	ldr	r1, [r1, #16]
 80003aa:	40a9      	lsls	r1, r5
 80003ac:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003ae:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003b0:	2403      	movs	r4, #3
 80003b2:	005f      	lsls	r7, r3, #1
 80003b4:	40bc      	lsls	r4, r7
 80003b6:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003b8:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ba:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003bc:	4025      	ands	r5, r4
 80003be:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c0:	2503      	movs	r5, #3
 80003c2:	4015      	ands	r5, r2
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	4661      	mov	r1, ip
 80003c8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003ca:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003cc:	2e01      	cmp	r6, #1
 80003ce:	d80f      	bhi.n	80003f0 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003d2:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d4:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003d6:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d8:	40bd      	lsls	r5, r7
 80003da:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003dc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003de:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003e0:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e2:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003e4:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e6:	2101      	movs	r1, #1
 80003e8:	400d      	ands	r5, r1
 80003ea:	409d      	lsls	r5, r3
 80003ec:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003ee:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003f0:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f2:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003f4:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f6:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003f8:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003fa:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003fc:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003fe:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000400:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000402:	420a      	tst	r2, r1
 8000404:	d04b      	beq.n	800049e <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	2101      	movs	r1, #1
 8000408:	4c26      	ldr	r4, [pc, #152]	; (80004a4 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000410:	430d      	orrs	r5, r1
 8000412:	61a5      	str	r5, [r4, #24]
 8000414:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000416:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000418:	400c      	ands	r4, r1
 800041a:	9405      	str	r4, [sp, #20]
 800041c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041e:	240f      	movs	r4, #15
 8000420:	4921      	ldr	r1, [pc, #132]	; (80004a8 <HAL_GPIO_Init+0x14c>)
 8000422:	00ad      	lsls	r5, r5, #2
 8000424:	00b6      	lsls	r6, r6, #2
 8000426:	186d      	adds	r5, r5, r1
 8000428:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800042c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000430:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000432:	2400      	movs	r4, #0
 8000434:	4288      	cmp	r0, r1
 8000436:	d00c      	beq.n	8000452 <HAL_GPIO_Init+0xf6>
 8000438:	491c      	ldr	r1, [pc, #112]	; (80004ac <HAL_GPIO_Init+0x150>)
 800043a:	3401      	adds	r4, #1
 800043c:	4288      	cmp	r0, r1
 800043e:	d008      	beq.n	8000452 <HAL_GPIO_Init+0xf6>
 8000440:	491b      	ldr	r1, [pc, #108]	; (80004b0 <HAL_GPIO_Init+0x154>)
 8000442:	3401      	adds	r4, #1
 8000444:	4288      	cmp	r0, r1
 8000446:	d004      	beq.n	8000452 <HAL_GPIO_Init+0xf6>
 8000448:	491a      	ldr	r1, [pc, #104]	; (80004b4 <HAL_GPIO_Init+0x158>)
 800044a:	3403      	adds	r4, #3
 800044c:	4288      	cmp	r0, r1
 800044e:	d100      	bne.n	8000452 <HAL_GPIO_Init+0xf6>
 8000450:	3c02      	subs	r4, #2
 8000452:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000454:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000456:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000458:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800045a:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 800045c:	4c16      	ldr	r4, [pc, #88]	; (80004b8 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800045e:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000460:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000462:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000464:	03d1      	lsls	r1, r2, #15
 8000466:	d401      	bmi.n	800046c <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000468:	003e      	movs	r6, r7
 800046a:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 800046c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800046e:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000470:	9e00      	ldr	r6, [sp, #0]
 8000472:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000474:	0391      	lsls	r1, r2, #14
 8000476:	d401      	bmi.n	800047c <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000478:	003e      	movs	r6, r7
 800047a:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 800047c:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800047e:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000480:	9e00      	ldr	r6, [sp, #0]
 8000482:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000484:	02d1      	lsls	r1, r2, #11
 8000486:	d401      	bmi.n	800048c <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000488:	003e      	movs	r6, r7
 800048a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800048c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800048e:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000490:	9f00      	ldr	r7, [sp, #0]
 8000492:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000494:	0292      	lsls	r2, r2, #10
 8000496:	d401      	bmi.n	800049c <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000498:	402e      	ands	r6, r5
 800049a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800049c:	60e7      	str	r7, [r4, #12]
    position++;
 800049e:	3301      	adds	r3, #1
 80004a0:	e762      	b.n	8000368 <HAL_GPIO_Init+0xc>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000
 80004ac:	48000400 	.word	0x48000400
 80004b0:	48000800 	.word	0x48000800
 80004b4:	48000c00 	.word	0x48000c00
 80004b8:	40010400 	.word	0x40010400

080004bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004bc:	6900      	ldr	r0, [r0, #16]
 80004be:	4008      	ands	r0, r1
 80004c0:	1e41      	subs	r1, r0, #1
 80004c2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80004c4:	b2c0      	uxtb	r0, r0
  }
 80004c6:	4770      	bx	lr

080004c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	d001      	beq.n	80004d0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004cc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004ce:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004d0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004d2:	e7fc      	b.n	80004ce <HAL_GPIO_WritePin+0x6>

080004d4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80004d4:	6803      	ldr	r3, [r0, #0]
 80004d6:	699a      	ldr	r2, [r3, #24]
 80004d8:	0792      	lsls	r2, r2, #30
 80004da:	d501      	bpl.n	80004e0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80004e0:	2201      	movs	r2, #1
 80004e2:	6999      	ldr	r1, [r3, #24]
 80004e4:	4211      	tst	r1, r2
 80004e6:	d102      	bne.n	80004ee <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80004e8:	6999      	ldr	r1, [r3, #24]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	619a      	str	r2, [r3, #24]
  }
}
 80004ee:	4770      	bx	lr

080004f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80004f0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80004f2:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 80004f6:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80004f8:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80004fa:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80004fc:	9d03      	ldr	r5, [sp, #12]
 80004fe:	0d89      	lsrs	r1, r1, #22
 8000500:	432b      	orrs	r3, r5
 8000502:	4319      	orrs	r1, r3
 8000504:	0412      	lsls	r2, r2, #16
 8000506:	430a      	orrs	r2, r1
 8000508:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800050a:	6062      	str	r2, [r4, #4]
}
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	fc009800 	.word	0xfc009800

08000514 <I2C_WaitOnFlagUntilTimeout>:
{
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	0004      	movs	r4, r0
 8000518:	000e      	movs	r6, r1
 800051a:	0017      	movs	r7, r2
 800051c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800051e:	6822      	ldr	r2, [r4, #0]
 8000520:	6993      	ldr	r3, [r2, #24]
 8000522:	4033      	ands	r3, r6
 8000524:	1b9b      	subs	r3, r3, r6
 8000526:	4259      	negs	r1, r3
 8000528:	414b      	adcs	r3, r1
 800052a:	42bb      	cmp	r3, r7
 800052c:	d001      	beq.n	8000532 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800052e:	2000      	movs	r0, #0
 8000530:	e00e      	b.n	8000550 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8000532:	1c6b      	adds	r3, r5, #1
 8000534:	d0f4      	beq.n	8000520 <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000536:	2d00      	cmp	r5, #0
 8000538:	d10b      	bne.n	8000552 <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 800053a:	0023      	movs	r3, r4
 800053c:	2220      	movs	r2, #32
 800053e:	3341      	adds	r3, #65	; 0x41
 8000540:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000542:	0022      	movs	r2, r4
 8000544:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000546:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000548:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800054a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800054c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800054e:	7023      	strb	r3, [r4, #0]
}
 8000550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000552:	f7ff fe99 	bl	8000288 <HAL_GetTick>
 8000556:	9b06      	ldr	r3, [sp, #24]
 8000558:	1ac0      	subs	r0, r0, r3
 800055a:	4285      	cmp	r5, r0
 800055c:	d2df      	bcs.n	800051e <I2C_WaitOnFlagUntilTimeout+0xa>
 800055e:	e7ec      	b.n	800053a <I2C_WaitOnFlagUntilTimeout+0x26>

08000560 <I2C_IsAcknowledgeFailed>:
{
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000562:	6803      	ldr	r3, [r0, #0]
{
 8000564:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000566:	6998      	ldr	r0, [r3, #24]
 8000568:	2310      	movs	r3, #16
{
 800056a:	000e      	movs	r6, r1
 800056c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800056e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000570:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000572:	2800      	cmp	r0, #0
 8000574:	d115      	bne.n	80005a2 <I2C_IsAcknowledgeFailed+0x42>
}
 8000576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	d013      	beq.n	80005a4 <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800057c:	2e00      	cmp	r6, #0
 800057e:	d10b      	bne.n	8000598 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 8000580:	0023      	movs	r3, r4
 8000582:	2220      	movs	r2, #32
 8000584:	3341      	adds	r3, #65	; 0x41
 8000586:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000588:	0022      	movs	r2, r4
 800058a:	2300      	movs	r3, #0
 800058c:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800058e:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000590:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 8000592:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 8000594:	7023      	strb	r3, [r4, #0]
 8000596:	e7ee      	b.n	8000576 <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000598:	f7ff fe76 	bl	8000288 <HAL_GetTick>
 800059c:	1bc0      	subs	r0, r0, r7
 800059e:	4286      	cmp	r6, r0
 80005a0:	d3ee      	bcc.n	8000580 <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	422a      	tst	r2, r5
 80005a8:	d0e6      	beq.n	8000578 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005aa:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80005ac:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005ae:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005b0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80005b2:	f7ff ff8f 	bl	80004d4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80005b6:	6822      	ldr	r2, [r4, #0]
 80005b8:	4908      	ldr	r1, [pc, #32]	; (80005dc <I2C_IsAcknowledgeFailed+0x7c>)
 80005ba:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 80005bc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80005be:	400b      	ands	r3, r1
 80005c0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80005c2:	2304      	movs	r3, #4
 80005c4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80005c6:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005c8:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80005ca:	3341      	adds	r3, #65	; 0x41
 80005cc:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80005d2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005d4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80005d6:	7023      	strb	r3, [r4, #0]
 80005d8:	e7cd      	b.n	8000576 <I2C_IsAcknowledgeFailed+0x16>
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	fe00e800 	.word	0xfe00e800

080005e0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	0004      	movs	r4, r0
 80005e4:	000d      	movs	r5, r1
 80005e6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80005e8:	2702      	movs	r7, #2
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	423b      	tst	r3, r7
 80005f0:	d001      	beq.n	80005f6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80005f2:	2000      	movs	r0, #0
 80005f4:	e018      	b.n	8000628 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80005f6:	0032      	movs	r2, r6
 80005f8:	0029      	movs	r1, r5
 80005fa:	0020      	movs	r0, r4
 80005fc:	f7ff ffb0 	bl	8000560 <I2C_IsAcknowledgeFailed>
 8000600:	2800      	cmp	r0, #0
 8000602:	d118      	bne.n	8000636 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8000604:	1c6b      	adds	r3, r5, #1
 8000606:	d0f0      	beq.n	80005ea <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000608:	2d00      	cmp	r5, #0
 800060a:	d10e      	bne.n	800062a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800060c:	2220      	movs	r2, #32
 800060e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000610:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000612:	4313      	orrs	r3, r2
 8000614:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000616:	0023      	movs	r3, r4
 8000618:	3341      	adds	r3, #65	; 0x41
 800061a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800061c:	0022      	movs	r2, r4
 800061e:	2300      	movs	r3, #0
 8000620:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000622:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000624:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000626:	7023      	strb	r3, [r4, #0]
}
 8000628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800062a:	f7ff fe2d 	bl	8000288 <HAL_GetTick>
 800062e:	1b80      	subs	r0, r0, r6
 8000630:	4285      	cmp	r5, r0
 8000632:	d2da      	bcs.n	80005ea <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000634:	e7ea      	b.n	800060c <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8000636:	2001      	movs	r0, #1
 8000638:	e7f6      	b.n	8000628 <I2C_WaitOnTXISFlagUntilTimeout+0x48>

0800063a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800063a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063c:	0004      	movs	r4, r0
 800063e:	000d      	movs	r5, r1
 8000640:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000642:	2720      	movs	r7, #32
 8000644:	6823      	ldr	r3, [r4, #0]
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	423b      	tst	r3, r7
 800064a:	d001      	beq.n	8000650 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800064c:	2000      	movs	r0, #0
 800064e:	e016      	b.n	800067e <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000650:	0032      	movs	r2, r6
 8000652:	0029      	movs	r1, r5
 8000654:	0020      	movs	r0, r4
 8000656:	f7ff ff83 	bl	8000560 <I2C_IsAcknowledgeFailed>
 800065a:	2800      	cmp	r0, #0
 800065c:	d116      	bne.n	800068c <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800065e:	2d00      	cmp	r5, #0
 8000660:	d10e      	bne.n	8000680 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000662:	2220      	movs	r2, #32
 8000664:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000666:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000668:	4313      	orrs	r3, r2
 800066a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800066c:	0023      	movs	r3, r4
 800066e:	3341      	adds	r3, #65	; 0x41
 8000670:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000672:	0022      	movs	r2, r4
 8000674:	2300      	movs	r3, #0
 8000676:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000678:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800067a:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800067c:	7023      	strb	r3, [r4, #0]
}
 800067e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000680:	f7ff fe02 	bl	8000288 <HAL_GetTick>
 8000684:	1b80      	subs	r0, r0, r6
 8000686:	4285      	cmp	r5, r0
 8000688:	d2dc      	bcs.n	8000644 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800068a:	e7ea      	b.n	8000662 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800068c:	2001      	movs	r0, #1
 800068e:	e7f6      	b.n	800067e <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08000690 <HAL_I2C_Init>:
{
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000694:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000696:	2c00      	cmp	r4, #0
 8000698:	d03f      	beq.n	800071a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800069a:	0025      	movs	r5, r4
 800069c:	3541      	adds	r5, #65	; 0x41
 800069e:	782b      	ldrb	r3, [r5, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d105      	bne.n	80006b2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80006a6:	0022      	movs	r2, r4
 80006a8:	3240      	adds	r2, #64	; 0x40
 80006aa:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80006ac:	0020      	movs	r0, r4
 80006ae:	f001 fae1 	bl	8001c74 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006b2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006b4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006b6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80006b8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80006ba:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	68a6      	ldr	r6, [r4, #8]
 80006c0:	438a      	bics	r2, r1
 80006c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80006c4:	6861      	ldr	r1, [r4, #4]
 80006c6:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <HAL_I2C_Init+0xa0>)
 80006c8:	400a      	ands	r2, r1
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80006cc:	6899      	ldr	r1, [r3, #8]
 80006ce:	4a19      	ldr	r2, [pc, #100]	; (8000734 <HAL_I2C_Init+0xa4>)
 80006d0:	4011      	ands	r1, r2
 80006d2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80006d4:	2801      	cmp	r0, #1
 80006d6:	d121      	bne.n	800071c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0209      	lsls	r1, r1, #8
 80006dc:	4331      	orrs	r1, r6
 80006de:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80006e0:	6858      	ldr	r0, [r3, #4]
 80006e2:	4915      	ldr	r1, [pc, #84]	; (8000738 <HAL_I2C_Init+0xa8>)
 80006e4:	4301      	orrs	r1, r0
 80006e6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80006e8:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006ea:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80006ec:	400a      	ands	r2, r1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80006f0:	6961      	ldr	r1, [r4, #20]
 80006f2:	6922      	ldr	r2, [r4, #16]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	69a1      	ldr	r1, [r4, #24]
 80006f8:	0209      	lsls	r1, r1, #8
 80006fa:	430a      	orrs	r2, r1
 80006fc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006fe:	6a21      	ldr	r1, [r4, #32]
 8000700:	69e2      	ldr	r2, [r4, #28]
 8000702:	430a      	orrs	r2, r1
 8000704:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000706:	2201      	movs	r2, #1
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800070e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000710:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000712:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000714:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000716:	3442      	adds	r4, #66	; 0x42
 8000718:	7020      	strb	r0, [r4, #0]
}
 800071a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800071c:	2184      	movs	r1, #132	; 0x84
 800071e:	0209      	lsls	r1, r1, #8
 8000720:	4331      	orrs	r1, r6
 8000722:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000724:	2802      	cmp	r0, #2
 8000726:	d1db      	bne.n	80006e0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0109      	lsls	r1, r1, #4
 800072c:	6059      	str	r1, [r3, #4]
 800072e:	e7d7      	b.n	80006e0 <HAL_I2C_Init+0x50>
 8000730:	f0ffffff 	.word	0xf0ffffff
 8000734:	ffff7fff 	.word	0xffff7fff
 8000738:	02008000 	.word	0x02008000

0800073c <HAL_I2C_Master_Transmit>:
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800073e:	0005      	movs	r5, r0
{
 8000740:	b087      	sub	sp, #28
 8000742:	9103      	str	r1, [sp, #12]
 8000744:	9204      	str	r2, [sp, #16]
 8000746:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000748:	3541      	adds	r5, #65	; 0x41
 800074a:	782b      	ldrb	r3, [r5, #0]
{
 800074c:	0004      	movs	r4, r0
    return HAL_BUSY;
 800074e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000750:	2b20      	cmp	r3, #32
 8000752:	d157      	bne.n	8000804 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 8000754:	0023      	movs	r3, r4
 8000756:	3340      	adds	r3, #64	; 0x40
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	2a01      	cmp	r2, #1
 800075c:	d052      	beq.n	8000804 <HAL_I2C_Master_Transmit+0xc8>
 800075e:	2601      	movs	r6, #1
 8000760:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000762:	f7ff fd91 	bl	8000288 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000766:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000768:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800076a:	9000      	str	r0, [sp, #0]
 800076c:	2319      	movs	r3, #25
 800076e:	0032      	movs	r2, r6
 8000770:	0209      	lsls	r1, r1, #8
 8000772:	0020      	movs	r0, r4
 8000774:	f7ff fece 	bl	8000514 <I2C_WaitOnFlagUntilTimeout>
 8000778:	2800      	cmp	r0, #0
 800077a:	d142      	bne.n	8000802 <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800077c:	2321      	movs	r3, #33	; 0x21
 800077e:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000780:	3b11      	subs	r3, #17
 8000782:	19ad      	adds	r5, r5, r6
 8000784:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000786:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000788:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800078a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800078c:	466b      	mov	r3, sp
 800078e:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000790:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000792:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000794:	2380      	movs	r3, #128	; 0x80
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000796:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000798:	019b      	lsls	r3, r3, #6
 800079a:	2aff      	cmp	r2, #255	; 0xff
 800079c:	d921      	bls.n	80007e2 <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	045b      	lsls	r3, r3, #17
 80007a8:	9903      	ldr	r1, [sp, #12]
 80007aa:	0020      	movs	r0, r4
 80007ac:	f7ff fea0 	bl	80004f0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80007b0:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 80007b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007b4:	003a      	movs	r2, r7
 80007b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80007b8:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d119      	bne.n	80007f2 <HAL_I2C_Master_Transmit+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007be:	f7ff ff3c 	bl	800063a <I2C_WaitOnSTOPFlagUntilTimeout>
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d119      	bne.n	80007fa <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007c6:	2120      	movs	r1, #32
 80007c8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80007ca:	4e27      	ldr	r6, [pc, #156]	; (8000868 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007cc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	4032      	ands	r2, r6
 80007d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80007d4:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80007d6:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80007d8:	3341      	adds	r3, #65	; 0x41
 80007da:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80007dc:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80007de:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80007e0:	e010      	b.n	8000804 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 80007e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80007e4:	b292      	uxth	r2, r2
 80007e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	049b      	lsls	r3, r3, #18
 80007f0:	e7da      	b.n	80007a8 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007f2:	f7ff fef5 	bl	80005e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d006      	beq.n	8000808 <HAL_I2C_Master_Transmit+0xcc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80007fc:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d000      	beq.n	8000804 <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 8000802:	2003      	movs	r0, #3
}
 8000804:	b007      	add	sp, #28
 8000806:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800080a:	6822      	ldr	r2, [r4, #0]
 800080c:	1c59      	adds	r1, r3, #1
 800080e:	6261      	str	r1, [r4, #36]	; 0x24
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000814:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000816:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000818:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800081a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800081c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800081e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000820:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000822:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000824:	2a00      	cmp	r2, #0
 8000826:	d1c4      	bne.n	80007b2 <HAL_I2C_Master_Transmit+0x76>
 8000828:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0c1      	beq.n	80007b2 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800082e:	9700      	str	r7, [sp, #0]
 8000830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	0020      	movs	r0, r4
 8000836:	f7ff fe6d 	bl	8000514 <I2C_WaitOnFlagUntilTimeout>
 800083a:	2800      	cmp	r0, #0
 800083c:	d1e1      	bne.n	8000802 <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800083e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000840:	2bff      	cmp	r3, #255	; 0xff
 8000842:	d909      	bls.n	8000858 <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000848:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800084a:	045b      	lsls	r3, r3, #17
 800084c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800084e:	9903      	ldr	r1, [sp, #12]
 8000850:	0020      	movs	r0, r4
 8000852:	f7ff fe4d 	bl	80004f0 <I2C_TransferConfig>
 8000856:	e7ac      	b.n	80007b2 <HAL_I2C_Master_Transmit+0x76>
 8000858:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800085a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800085c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800085e:	b292      	uxth	r2, r2
 8000860:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	9000      	str	r0, [sp, #0]
 8000866:	e7f2      	b.n	800084e <HAL_I2C_Master_Transmit+0x112>
 8000868:	fe00e800 	.word	0xfe00e800

0800086c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800086e:	0004      	movs	r4, r0
 8000870:	3441      	adds	r4, #65	; 0x41
 8000872:	7822      	ldrb	r2, [r4, #0]
{
 8000874:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000876:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000878:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800087a:	2a20      	cmp	r2, #32
 800087c:	d118      	bne.n	80008b0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800087e:	001d      	movs	r5, r3
 8000880:	3540      	adds	r5, #64	; 0x40
 8000882:	782e      	ldrb	r6, [r5, #0]
 8000884:	2e01      	cmp	r6, #1
 8000886:	d013      	beq.n	80008b0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000888:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800088a:	3022      	adds	r0, #34	; 0x22
 800088c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800088e:	681e      	ldr	r6, [r3, #0]
 8000890:	3823      	subs	r0, #35	; 0x23
 8000892:	4386      	bics	r6, r0
 8000894:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000896:	681e      	ldr	r6, [r3, #0]
 8000898:	4f06      	ldr	r7, [pc, #24]	; (80008b4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800089a:	403e      	ands	r6, r7
 800089c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800089e:	681e      	ldr	r6, [r3, #0]
 80008a0:	4331      	orrs	r1, r6
 80008a2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	4308      	orrs	r0, r1
 80008a8:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80008aa:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80008ac:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80008ae:	7028      	strb	r0, [r5, #0]
  }
}
 80008b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	ffffefff 	.word	0xffffefff

080008b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80008b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008ba:	0005      	movs	r5, r0
 80008bc:	3541      	adds	r5, #65	; 0x41
 80008be:	782a      	ldrb	r2, [r5, #0]
{
 80008c0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008c2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80008c4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008c6:	2a20      	cmp	r2, #32
 80008c8:	d117      	bne.n	80008fa <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80008ca:	001c      	movs	r4, r3
 80008cc:	3440      	adds	r4, #64	; 0x40
 80008ce:	7826      	ldrb	r6, [r4, #0]
 80008d0:	2e01      	cmp	r6, #1
 80008d2:	d012      	beq.n	80008fa <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80008d4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80008d6:	3022      	adds	r0, #34	; 0x22
 80008d8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80008da:	681e      	ldr	r6, [r3, #0]
 80008dc:	3823      	subs	r0, #35	; 0x23
 80008de:	4386      	bics	r6, r0
 80008e0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80008e2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80008e4:	4f05      	ldr	r7, [pc, #20]	; (80008fc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80008e6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80008e8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80008ea:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80008ec:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80008ee:	6819      	ldr	r1, [r3, #0]
 80008f0:	4308      	orrs	r0, r1
 80008f2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80008f4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80008f6:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80008f8:	7020      	strb	r0, [r4, #0]
  }
}
 80008fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fc:	fffff0ff 	.word	0xfffff0ff

08000900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000902:	6803      	ldr	r3, [r0, #0]
{
 8000904:	b085      	sub	sp, #20
 8000906:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000908:	07db      	lsls	r3, r3, #31
 800090a:	d42f      	bmi.n	800096c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	079b      	lsls	r3, r3, #30
 8000910:	d500      	bpl.n	8000914 <HAL_RCC_OscConfig+0x14>
 8000912:	e081      	b.n	8000a18 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	071b      	lsls	r3, r3, #28
 8000918:	d500      	bpl.n	800091c <HAL_RCC_OscConfig+0x1c>
 800091a:	e0bc      	b.n	8000a96 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	075b      	lsls	r3, r3, #29
 8000920:	d500      	bpl.n	8000924 <HAL_RCC_OscConfig+0x24>
 8000922:	e0df      	b.n	8000ae4 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	06db      	lsls	r3, r3, #27
 8000928:	d51a      	bpl.n	8000960 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800092a:	696a      	ldr	r2, [r5, #20]
 800092c:	4cb5      	ldr	r4, [pc, #724]	; (8000c04 <HAL_RCC_OscConfig+0x304>)
 800092e:	2304      	movs	r3, #4
 8000930:	2a01      	cmp	r2, #1
 8000932:	d000      	beq.n	8000936 <HAL_RCC_OscConfig+0x36>
 8000934:	e14b      	b.n	8000bce <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000936:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000938:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800093a:	430b      	orrs	r3, r1
 800093c:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800093e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000940:	431a      	orrs	r2, r3
 8000942:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000944:	f7ff fca0 	bl	8000288 <HAL_GetTick>
 8000948:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800094a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800094c:	4233      	tst	r3, r6
 800094e:	d100      	bne.n	8000952 <HAL_RCC_OscConfig+0x52>
 8000950:	e136      	b.n	8000bc0 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000952:	21f8      	movs	r1, #248	; 0xf8
 8000954:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000956:	69ab      	ldr	r3, [r5, #24]
 8000958:	438a      	bics	r2, r1
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	4313      	orrs	r3, r2
 800095e:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000960:	6a29      	ldr	r1, [r5, #32]
 8000962:	2900      	cmp	r1, #0
 8000964:	d000      	beq.n	8000968 <HAL_RCC_OscConfig+0x68>
 8000966:	e159      	b.n	8000c1c <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000968:	2000      	movs	r0, #0
 800096a:	e013      	b.n	8000994 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800096c:	210c      	movs	r1, #12
 800096e:	4ca5      	ldr	r4, [pc, #660]	; (8000c04 <HAL_RCC_OscConfig+0x304>)
 8000970:	6862      	ldr	r2, [r4, #4]
 8000972:	400a      	ands	r2, r1
 8000974:	2a04      	cmp	r2, #4
 8000976:	d006      	beq.n	8000986 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000978:	6863      	ldr	r3, [r4, #4]
 800097a:	400b      	ands	r3, r1
 800097c:	2b08      	cmp	r3, #8
 800097e:	d10b      	bne.n	8000998 <HAL_RCC_OscConfig+0x98>
 8000980:	6863      	ldr	r3, [r4, #4]
 8000982:	03db      	lsls	r3, r3, #15
 8000984:	d508      	bpl.n	8000998 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	039b      	lsls	r3, r3, #14
 800098a:	d5bf      	bpl.n	800090c <HAL_RCC_OscConfig+0xc>
 800098c:	686b      	ldr	r3, [r5, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1bc      	bne.n	800090c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000992:	2001      	movs	r0, #1
}
 8000994:	b005      	add	sp, #20
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000998:	686b      	ldr	r3, [r5, #4]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d113      	bne.n	80009c6 <HAL_RCC_OscConfig+0xc6>
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	6822      	ldr	r2, [r4, #0]
 80009a2:	025b      	lsls	r3, r3, #9
 80009a4:	4313      	orrs	r3, r2
 80009a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009a8:	f7ff fc6e 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ac:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b0:	02b6      	lsls	r6, r6, #10
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	4233      	tst	r3, r6
 80009b6:	d1a9      	bne.n	800090c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b8:	f7ff fc66 	bl	8000288 <HAL_GetTick>
 80009bc:	1bc0      	subs	r0, r0, r7
 80009be:	2864      	cmp	r0, #100	; 0x64
 80009c0:	d9f7      	bls.n	80009b2 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80009c2:	2003      	movs	r0, #3
 80009c4:	e7e6      	b.n	8000994 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d116      	bne.n	80009f8 <HAL_RCC_OscConfig+0xf8>
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	4a8e      	ldr	r2, [pc, #568]	; (8000c08 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ce:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d0:	4013      	ands	r3, r2
 80009d2:	6023      	str	r3, [r4, #0]
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	4a8d      	ldr	r2, [pc, #564]	; (8000c0c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009da:	4013      	ands	r3, r2
 80009dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009de:	f7ff fc53 	bl	8000288 <HAL_GetTick>
 80009e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e4:	6823      	ldr	r3, [r4, #0]
 80009e6:	4233      	tst	r3, r6
 80009e8:	d100      	bne.n	80009ec <HAL_RCC_OscConfig+0xec>
 80009ea:	e78f      	b.n	800090c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009ec:	f7ff fc4c 	bl	8000288 <HAL_GetTick>
 80009f0:	1bc0      	subs	r0, r0, r7
 80009f2:	2864      	cmp	r0, #100	; 0x64
 80009f4:	d9f6      	bls.n	80009e4 <HAL_RCC_OscConfig+0xe4>
 80009f6:	e7e4      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f8:	2b05      	cmp	r3, #5
 80009fa:	d105      	bne.n	8000a08 <HAL_RCC_OscConfig+0x108>
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	6822      	ldr	r2, [r4, #0]
 8000a00:	02db      	lsls	r3, r3, #11
 8000a02:	4313      	orrs	r3, r2
 8000a04:	6023      	str	r3, [r4, #0]
 8000a06:	e7ca      	b.n	800099e <HAL_RCC_OscConfig+0x9e>
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	4a7f      	ldr	r2, [pc, #508]	; (8000c08 <HAL_RCC_OscConfig+0x308>)
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	6023      	str	r3, [r4, #0]
 8000a10:	6823      	ldr	r3, [r4, #0]
 8000a12:	4a7e      	ldr	r2, [pc, #504]	; (8000c0c <HAL_RCC_OscConfig+0x30c>)
 8000a14:	4013      	ands	r3, r2
 8000a16:	e7c6      	b.n	80009a6 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a18:	220c      	movs	r2, #12
 8000a1a:	4c7a      	ldr	r4, [pc, #488]	; (8000c04 <HAL_RCC_OscConfig+0x304>)
 8000a1c:	6863      	ldr	r3, [r4, #4]
 8000a1e:	4213      	tst	r3, r2
 8000a20:	d006      	beq.n	8000a30 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a22:	6863      	ldr	r3, [r4, #4]
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b08      	cmp	r3, #8
 8000a28:	d110      	bne.n	8000a4c <HAL_RCC_OscConfig+0x14c>
 8000a2a:	6863      	ldr	r3, [r4, #4]
 8000a2c:	03db      	lsls	r3, r3, #15
 8000a2e:	d40d      	bmi.n	8000a4c <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	079b      	lsls	r3, r3, #30
 8000a34:	d502      	bpl.n	8000a3c <HAL_RCC_OscConfig+0x13c>
 8000a36:	68eb      	ldr	r3, [r5, #12]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d1aa      	bne.n	8000992 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a3c:	21f8      	movs	r1, #248	; 0xf8
 8000a3e:	6822      	ldr	r2, [r4, #0]
 8000a40:	692b      	ldr	r3, [r5, #16]
 8000a42:	438a      	bics	r2, r1
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	e763      	b.n	8000914 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a4c:	68ea      	ldr	r2, [r5, #12]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d00f      	beq.n	8000a74 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000a54:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a56:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a5c:	f7ff fc14 	bl	8000288 <HAL_GetTick>
 8000a60:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	4233      	tst	r3, r6
 8000a66:	d1e9      	bne.n	8000a3c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a68:	f7ff fc0e 	bl	8000288 <HAL_GetTick>
 8000a6c:	1bc0      	subs	r0, r0, r7
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f7      	bls.n	8000a62 <HAL_RCC_OscConfig+0x162>
 8000a72:	e7a6      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000a74:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a76:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000a78:	439a      	bics	r2, r3
 8000a7a:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000a7c:	f7ff fc04 	bl	8000288 <HAL_GetTick>
 8000a80:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	4233      	tst	r3, r6
 8000a86:	d100      	bne.n	8000a8a <HAL_RCC_OscConfig+0x18a>
 8000a88:	e744      	b.n	8000914 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a8a:	f7ff fbfd 	bl	8000288 <HAL_GetTick>
 8000a8e:	1bc0      	subs	r0, r0, r7
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d9f6      	bls.n	8000a82 <HAL_RCC_OscConfig+0x182>
 8000a94:	e795      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a96:	69ea      	ldr	r2, [r5, #28]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	4c5a      	ldr	r4, [pc, #360]	; (8000c04 <HAL_RCC_OscConfig+0x304>)
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d010      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000aa0:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fbee 	bl	8000288 <HAL_GetTick>
 8000aac:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ab0:	4233      	tst	r3, r6
 8000ab2:	d000      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x1b6>
 8000ab4:	e732      	b.n	800091c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab6:	f7ff fbe7 	bl	8000288 <HAL_GetTick>
 8000aba:	1bc0      	subs	r0, r0, r7
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d9f6      	bls.n	8000aae <HAL_RCC_OscConfig+0x1ae>
 8000ac0:	e77f      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000ac2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ac4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000ac6:	439a      	bics	r2, r3
 8000ac8:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000aca:	f7ff fbdd 	bl	8000288 <HAL_GetTick>
 8000ace:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ad2:	4233      	tst	r3, r6
 8000ad4:	d100      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x1d8>
 8000ad6:	e721      	b.n	800091c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ad8:	f7ff fbd6 	bl	8000288 <HAL_GetTick>
 8000adc:	1bc0      	subs	r0, r0, r7
 8000ade:	2802      	cmp	r0, #2
 8000ae0:	d9f6      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x1d0>
 8000ae2:	e76e      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ae4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ae6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ae8:	4c46      	ldr	r4, [pc, #280]	; (8000c04 <HAL_RCC_OscConfig+0x304>)
 8000aea:	0552      	lsls	r2, r2, #21
 8000aec:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000aee:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000af0:	4213      	tst	r3, r2
 8000af2:	d108      	bne.n	8000b06 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000af4:	69e3      	ldr	r3, [r4, #28]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61e3      	str	r3, [r4, #28]
 8000afa:	69e3      	ldr	r3, [r4, #28]
 8000afc:	4013      	ands	r3, r2
 8000afe:	9303      	str	r3, [sp, #12]
 8000b00:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000b02:	2301      	movs	r3, #1
 8000b04:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b06:	2780      	movs	r7, #128	; 0x80
 8000b08:	4e41      	ldr	r6, [pc, #260]	; (8000c10 <HAL_RCC_OscConfig+0x310>)
 8000b0a:	007f      	lsls	r7, r7, #1
 8000b0c:	6833      	ldr	r3, [r6, #0]
 8000b0e:	423b      	tst	r3, r7
 8000b10:	d006      	beq.n	8000b20 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b12:	68ab      	ldr	r3, [r5, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d113      	bne.n	8000b40 <HAL_RCC_OscConfig+0x240>
 8000b18:	6a22      	ldr	r2, [r4, #32]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	6223      	str	r3, [r4, #32]
 8000b1e:	e030      	b.n	8000b82 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b20:	6833      	ldr	r3, [r6, #0]
 8000b22:	433b      	orrs	r3, r7
 8000b24:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b26:	f7ff fbaf 	bl	8000288 <HAL_GetTick>
 8000b2a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b2c:	6833      	ldr	r3, [r6, #0]
 8000b2e:	423b      	tst	r3, r7
 8000b30:	d1ef      	bne.n	8000b12 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b32:	f7ff fba9 	bl	8000288 <HAL_GetTick>
 8000b36:	9b01      	ldr	r3, [sp, #4]
 8000b38:	1ac0      	subs	r0, r0, r3
 8000b3a:	2864      	cmp	r0, #100	; 0x64
 8000b3c:	d9f6      	bls.n	8000b2c <HAL_RCC_OscConfig+0x22c>
 8000b3e:	e740      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
 8000b40:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d114      	bne.n	8000b70 <HAL_RCC_OscConfig+0x270>
 8000b46:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b48:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b4a:	4393      	bics	r3, r2
 8000b4c:	6223      	str	r3, [r4, #32]
 8000b4e:	6a23      	ldr	r3, [r4, #32]
 8000b50:	3203      	adds	r2, #3
 8000b52:	4393      	bics	r3, r2
 8000b54:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b56:	f7ff fb97 	bl	8000288 <HAL_GetTick>
 8000b5a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b5c:	6a23      	ldr	r3, [r4, #32]
 8000b5e:	423b      	tst	r3, r7
 8000b60:	d025      	beq.n	8000bae <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b62:	f7ff fb91 	bl	8000288 <HAL_GetTick>
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <HAL_RCC_OscConfig+0x314>)
 8000b68:	1b80      	subs	r0, r0, r6
 8000b6a:	4298      	cmp	r0, r3
 8000b6c:	d9f6      	bls.n	8000b5c <HAL_RCC_OscConfig+0x25c>
 8000b6e:	e728      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d10b      	bne.n	8000b8c <HAL_RCC_OscConfig+0x28c>
 8000b74:	6a21      	ldr	r1, [r4, #32]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6223      	str	r3, [r4, #32]
 8000b7c:	6a23      	ldr	r3, [r4, #32]
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000b82:	f7ff fb81 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b86:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000b88:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b8a:	e00d      	b.n	8000ba8 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b8c:	6a23      	ldr	r3, [r4, #32]
 8000b8e:	4393      	bics	r3, r2
 8000b90:	2204      	movs	r2, #4
 8000b92:	6223      	str	r3, [r4, #32]
 8000b94:	6a23      	ldr	r3, [r4, #32]
 8000b96:	4393      	bics	r3, r2
 8000b98:	e7c0      	b.n	8000b1c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b9a:	f7ff fb75 	bl	8000288 <HAL_GetTick>
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_RCC_OscConfig+0x314>)
 8000ba0:	1b80      	subs	r0, r0, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d900      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x2a8>
 8000ba6:	e70c      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba8:	6a23      	ldr	r3, [r4, #32]
 8000baa:	423b      	tst	r3, r7
 8000bac:	d0f5      	beq.n	8000b9a <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000bae:	9b00      	ldr	r3, [sp, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d000      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x2b6>
 8000bb4:	e6b6      	b.n	8000924 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bb6:	69e3      	ldr	r3, [r4, #28]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_RCC_OscConfig+0x318>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	61e3      	str	r3, [r4, #28]
 8000bbe:	e6b1      	b.n	8000924 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bc0:	f7ff fb62 	bl	8000288 <HAL_GetTick>
 8000bc4:	1bc0      	subs	r0, r0, r7
 8000bc6:	2802      	cmp	r0, #2
 8000bc8:	d800      	bhi.n	8000bcc <HAL_RCC_OscConfig+0x2cc>
 8000bca:	e6be      	b.n	800094a <HAL_RCC_OscConfig+0x4a>
 8000bcc:	e6f9      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000bce:	3205      	adds	r2, #5
 8000bd0:	d103      	bne.n	8000bda <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000bd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000bd4:	439a      	bics	r2, r3
 8000bd6:	6362      	str	r2, [r4, #52]	; 0x34
 8000bd8:	e6bb      	b.n	8000952 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bda:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bdc:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bde:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000be0:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000be2:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000be6:	4393      	bics	r3, r2
 8000be8:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000bea:	f7ff fb4d 	bl	8000288 <HAL_GetTick>
 8000bee:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bf2:	4233      	tst	r3, r6
 8000bf4:	d100      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x2f8>
 8000bf6:	e6b3      	b.n	8000960 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bf8:	f7ff fb46 	bl	8000288 <HAL_GetTick>
 8000bfc:	1bc0      	subs	r0, r0, r7
 8000bfe:	2802      	cmp	r0, #2
 8000c00:	d9f6      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x2f0>
 8000c02:	e6de      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
 8000c04:	40021000 	.word	0x40021000
 8000c08:	fffeffff 	.word	0xfffeffff
 8000c0c:	fffbffff 	.word	0xfffbffff
 8000c10:	40007000 	.word	0x40007000
 8000c14:	00001388 	.word	0x00001388
 8000c18:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	4c26      	ldr	r4, [pc, #152]	; (8000cb8 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000c20:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c22:	6863      	ldr	r3, [r4, #4]
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d100      	bne.n	8000c2c <HAL_RCC_OscConfig+0x32c>
 8000c2a:	e6b3      	b.n	8000994 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <HAL_RCC_OscConfig+0x3bc>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c34:	2902      	cmp	r1, #2
 8000c36:	d12f      	bne.n	8000c98 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000c38:	f7ff fb26 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c3e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c40:	04b6      	lsls	r6, r6, #18
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	4233      	tst	r3, r6
 8000c46:	d121      	bne.n	8000c8c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c48:	220f      	movs	r2, #15
 8000c4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c4c:	4393      	bics	r3, r2
 8000c4e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000c50:	4313      	orrs	r3, r2
 8000c52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c54:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c56:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c58:	6862      	ldr	r2, [r4, #4]
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	4918      	ldr	r1, [pc, #96]	; (8000cc0 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c5e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c60:	400a      	ands	r2, r1
 8000c62:	4313      	orrs	r3, r2
 8000c64:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	6822      	ldr	r2, [r4, #0]
 8000c6a:	045b      	lsls	r3, r3, #17
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c70:	f7ff fb0a 	bl	8000288 <HAL_GetTick>
 8000c74:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c76:	04ad      	lsls	r5, r5, #18
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	422b      	tst	r3, r5
 8000c7c:	d000      	beq.n	8000c80 <HAL_RCC_OscConfig+0x380>
 8000c7e:	e673      	b.n	8000968 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c80:	f7ff fb02 	bl	8000288 <HAL_GetTick>
 8000c84:	1b80      	subs	r0, r0, r6
 8000c86:	2802      	cmp	r0, #2
 8000c88:	d9f6      	bls.n	8000c78 <HAL_RCC_OscConfig+0x378>
 8000c8a:	e69a      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c8c:	f7ff fafc 	bl	8000288 <HAL_GetTick>
 8000c90:	1bc0      	subs	r0, r0, r7
 8000c92:	2802      	cmp	r0, #2
 8000c94:	d9d5      	bls.n	8000c42 <HAL_RCC_OscConfig+0x342>
 8000c96:	e694      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000c98:	f7ff faf6 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c9e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca0:	04ad      	lsls	r5, r5, #18
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	422b      	tst	r3, r5
 8000ca6:	d100      	bne.n	8000caa <HAL_RCC_OscConfig+0x3aa>
 8000ca8:	e65e      	b.n	8000968 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000caa:	f7ff faed 	bl	8000288 <HAL_GetTick>
 8000cae:	1b80      	subs	r0, r0, r6
 8000cb0:	2802      	cmp	r0, #2
 8000cb2:	d9f6      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x3a2>
 8000cb4:	e685      	b.n	80009c2 <HAL_RCC_OscConfig+0xc2>
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	feffffff 	.word	0xfeffffff
 8000cc0:	ffc2ffff 	.word	0xffc2ffff

08000cc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cc4:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000cc6:	4c14      	ldr	r4, [pc, #80]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000cc8:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000cca:	2210      	movs	r2, #16
 8000ccc:	0021      	movs	r1, r4
 8000cce:	4668      	mov	r0, sp
 8000cd0:	f002 f844 	bl	8002d5c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000cd4:	0021      	movs	r1, r4
 8000cd6:	ad04      	add	r5, sp, #16
 8000cd8:	2210      	movs	r2, #16
 8000cda:	3110      	adds	r1, #16
 8000cdc:	0028      	movs	r0, r5
 8000cde:	f002 f83d 	bl	8002d5c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ce2:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000ce4:	4e0d      	ldr	r6, [pc, #52]	; (8000d1c <HAL_RCC_GetSysClockFreq+0x58>)
 8000ce6:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ce8:	401a      	ands	r2, r3
 8000cea:	2a08      	cmp	r2, #8
 8000cec:	d111      	bne.n	8000d12 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000cee:	200f      	movs	r0, #15
 8000cf0:	466a      	mov	r2, sp
 8000cf2:	0c99      	lsrs	r1, r3, #18
 8000cf4:	4001      	ands	r1, r0
 8000cf6:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000cf8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000cfa:	4002      	ands	r2, r0
 8000cfc:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	d505      	bpl.n	8000d0e <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000d04:	f7ff fa0a 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000d08:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d0a:	b008      	add	sp, #32
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_RCC_GetSysClockFreq+0x60>)
 8000d10:	e7fa      	b.n	8000d08 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000d14:	e7f9      	b.n	8000d0a <HAL_RCC_GetSysClockFreq+0x46>
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	080035c8 	.word	0x080035c8
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	007a1200 	.word	0x007a1200
 8000d24:	003d0900 	.word	0x003d0900

08000d28 <HAL_RCC_ClockConfig>:
{
 8000d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4c43      	ldr	r4, [pc, #268]	; (8000e3c <HAL_RCC_ClockConfig+0x114>)
{
 8000d2e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d30:	6823      	ldr	r3, [r4, #0]
{
 8000d32:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d34:	4013      	ands	r3, r2
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d31c      	bcc.n	8000d74 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d3a:	6832      	ldr	r2, [r6, #0]
 8000d3c:	0793      	lsls	r3, r2, #30
 8000d3e:	d423      	bmi.n	8000d88 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d40:	07d3      	lsls	r3, r2, #31
 8000d42:	d429      	bmi.n	8000d98 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d44:	2301      	movs	r3, #1
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	401a      	ands	r2, r3
 8000d4a:	4297      	cmp	r7, r2
 8000d4c:	d367      	bcc.n	8000e1e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d4e:	6833      	ldr	r3, [r6, #0]
 8000d50:	4c3b      	ldr	r4, [pc, #236]	; (8000e40 <HAL_RCC_ClockConfig+0x118>)
 8000d52:	075b      	lsls	r3, r3, #29
 8000d54:	d46a      	bmi.n	8000e2c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d56:	f7ff ffb5 	bl	8000cc4 <HAL_RCC_GetSysClockFreq>
 8000d5a:	6863      	ldr	r3, [r4, #4]
 8000d5c:	4a39      	ldr	r2, [pc, #228]	; (8000e44 <HAL_RCC_ClockConfig+0x11c>)
 8000d5e:	061b      	lsls	r3, r3, #24
 8000d60:	0f1b      	lsrs	r3, r3, #28
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <HAL_RCC_ClockConfig+0x120>)
 8000d68:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fa62 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000d70:	2000      	movs	r0, #0
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	4393      	bics	r3, r2
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d0da      	beq.n	8000d3a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d84:	2001      	movs	r0, #1
}
 8000d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d88:	20f0      	movs	r0, #240	; 0xf0
 8000d8a:	492d      	ldr	r1, [pc, #180]	; (8000e40 <HAL_RCC_ClockConfig+0x118>)
 8000d8c:	684b      	ldr	r3, [r1, #4]
 8000d8e:	4383      	bics	r3, r0
 8000d90:	68b0      	ldr	r0, [r6, #8]
 8000d92:	4303      	orrs	r3, r0
 8000d94:	604b      	str	r3, [r1, #4]
 8000d96:	e7d3      	b.n	8000d40 <HAL_RCC_ClockConfig+0x18>
 8000d98:	4d29      	ldr	r5, [pc, #164]	; (8000e40 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9e:	2a01      	cmp	r2, #1
 8000da0:	d11a      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	039b      	lsls	r3, r3, #14
 8000da4:	d5ee      	bpl.n	8000d84 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da6:	2103      	movs	r1, #3
 8000da8:	686b      	ldr	r3, [r5, #4]
 8000daa:	438b      	bics	r3, r1
 8000dac:	4313      	orrs	r3, r2
 8000dae:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000db0:	f7ff fa6a 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000db6:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d115      	bne.n	8000de8 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	686b      	ldr	r3, [r5, #4]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d0be      	beq.n	8000d44 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc6:	f7ff fa5f 	bl	8000288 <HAL_GetTick>
 8000dca:	9b01      	ldr	r3, [sp, #4]
 8000dcc:	1ac0      	subs	r0, r0, r3
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_RCC_ClockConfig+0x124>)
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	d9f3      	bls.n	8000dbc <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	e7d6      	b.n	8000d86 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd8:	2a02      	cmp	r2, #2
 8000dda:	d102      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	d4e2      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x7e>
 8000de0:	e7d0      	b.n	8000d84 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de2:	079b      	lsls	r3, r3, #30
 8000de4:	d4df      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x7e>
 8000de6:	e7cd      	b.n	8000d84 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d012      	beq.n	8000e12 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dec:	220c      	movs	r2, #12
 8000dee:	686b      	ldr	r3, [r5, #4]
 8000df0:	4213      	tst	r3, r2
 8000df2:	d0a7      	beq.n	8000d44 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000df4:	f7ff fa48 	bl	8000288 <HAL_GetTick>
 8000df8:	9b01      	ldr	r3, [sp, #4]
 8000dfa:	1ac0      	subs	r0, r0, r3
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_RCC_ClockConfig+0x124>)
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d9f4      	bls.n	8000dec <HAL_RCC_ClockConfig+0xc4>
 8000e02:	e7e7      	b.n	8000dd4 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e04:	f7ff fa40 	bl	8000288 <HAL_GetTick>
 8000e08:	9b01      	ldr	r3, [sp, #4]
 8000e0a:	1ac0      	subs	r0, r0, r3
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_RCC_ClockConfig+0x124>)
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d8e0      	bhi.n	8000dd4 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e12:	220c      	movs	r2, #12
 8000e14:	686b      	ldr	r3, [r5, #4]
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d1f3      	bne.n	8000e04 <HAL_RCC_ClockConfig+0xdc>
 8000e1c:	e792      	b.n	8000d44 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e1e:	6822      	ldr	r2, [r4, #0]
 8000e20:	439a      	bics	r2, r3
 8000e22:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e24:	6822      	ldr	r2, [r4, #0]
 8000e26:	421a      	tst	r2, r3
 8000e28:	d1ac      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x5c>
 8000e2a:	e790      	b.n	8000d4e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_RCC_ClockConfig+0x128>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	68f2      	ldr	r2, [r6, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	6063      	str	r3, [r4, #4]
 8000e38:	e78d      	b.n	8000d56 <HAL_RCC_ClockConfig+0x2e>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40022000 	.word	0x40022000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	08003602 	.word	0x08003602
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	00001388 	.word	0x00001388
 8000e50:	fffff8ff 	.word	0xfffff8ff

08000e54 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000e54:	4b01      	ldr	r3, [pc, #4]	; (8000e5c <HAL_RCC_GetHCLKFreq+0x8>)
 8000e56:	6818      	ldr	r0, [r3, #0]
}
 8000e58:	4770      	bx	lr
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	055b      	lsls	r3, r3, #21
 8000e68:	0f5b      	lsrs	r3, r3, #29
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e6e:	6810      	ldr	r0, [r2, #0]
 8000e70:	40d8      	lsrs	r0, r3
}    
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	08003612 	.word	0x08003612
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e80:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e82:	6803      	ldr	r3, [r0, #0]
{
 8000e84:	b085      	sub	sp, #20
 8000e86:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e88:	03db      	lsls	r3, r3, #15
 8000e8a:	d528      	bpl.n	8000ede <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e8e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e90:	4c37      	ldr	r4, [pc, #220]	; (8000f70 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000e96:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e98:	4213      	tst	r3, r2
 8000e9a:	d108      	bne.n	8000eae <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e9c:	69e3      	ldr	r3, [r4, #28]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61e3      	str	r3, [r4, #28]
 8000ea2:	69e3      	ldr	r3, [r4, #28]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	9303      	str	r3, [sp, #12]
 8000ea8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eae:	2780      	movs	r7, #128	; 0x80
 8000eb0:	4e30      	ldr	r6, [pc, #192]	; (8000f74 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000eb2:	007f      	lsls	r7, r7, #1
 8000eb4:	6833      	ldr	r3, [r6, #0]
 8000eb6:	423b      	tst	r3, r7
 8000eb8:	d026      	beq.n	8000f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000eba:	22c0      	movs	r2, #192	; 0xc0
 8000ebc:	6a23      	ldr	r3, [r4, #32]
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	4e2d      	ldr	r6, [pc, #180]	; (8000f78 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ec4:	d132      	bne.n	8000f2c <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ec6:	6a23      	ldr	r3, [r4, #32]
 8000ec8:	401e      	ands	r6, r3
 8000eca:	686b      	ldr	r3, [r5, #4]
 8000ecc:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ece:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ed0:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d103      	bne.n	8000ede <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed6:	69e3      	ldr	r3, [r4, #28]
 8000ed8:	4a28      	ldr	r2, [pc, #160]	; (8000f7c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000ede:	682a      	ldr	r2, [r5, #0]
 8000ee0:	07d3      	lsls	r3, r2, #31
 8000ee2:	d506      	bpl.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	4922      	ldr	r1, [pc, #136]	; (8000f70 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ee8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000eea:	4383      	bics	r3, r0
 8000eec:	68a8      	ldr	r0, [r5, #8]
 8000eee:	4303      	orrs	r3, r0
 8000ef0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000ef2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000ef4:	0693      	lsls	r3, r2, #26
 8000ef6:	d517      	bpl.n	8000f28 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000efc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000efe:	438b      	bics	r3, r1
 8000f00:	68e9      	ldr	r1, [r5, #12]
 8000f02:	430b      	orrs	r3, r1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	e00f      	b.n	8000f28 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f08:	6833      	ldr	r3, [r6, #0]
 8000f0a:	433b      	orrs	r3, r7
 8000f0c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f0e:	f7ff f9bb 	bl	8000288 <HAL_GetTick>
 8000f12:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	6833      	ldr	r3, [r6, #0]
 8000f16:	423b      	tst	r3, r7
 8000f18:	d1cf      	bne.n	8000eba <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1a:	f7ff f9b5 	bl	8000288 <HAL_GetTick>
 8000f1e:	9b01      	ldr	r3, [sp, #4]
 8000f20:	1ac0      	subs	r0, r0, r3
 8000f22:	2864      	cmp	r0, #100	; 0x64
 8000f24:	d9f6      	bls.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000f26:	2003      	movs	r0, #3
}
 8000f28:	b005      	add	sp, #20
 8000f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f2c:	6869      	ldr	r1, [r5, #4]
 8000f2e:	400a      	ands	r2, r1
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d0c8      	beq.n	8000ec6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f34:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f36:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f38:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f3a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f3c:	025b      	lsls	r3, r3, #9
 8000f3e:	4303      	orrs	r3, r0
 8000f40:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f42:	6a23      	ldr	r3, [r4, #32]
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f46:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f48:	4003      	ands	r3, r0
 8000f4a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000f4c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f4e:	07d3      	lsls	r3, r2, #31
 8000f50:	d5b9      	bpl.n	8000ec6 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000f52:	f7ff f999 	bl	8000288 <HAL_GetTick>
 8000f56:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	6a23      	ldr	r3, [r4, #32]
 8000f5c:	4213      	tst	r3, r2
 8000f5e:	d1b2      	bne.n	8000ec6 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f60:	f7ff f992 	bl	8000288 <HAL_GetTick>
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000f66:	1bc0      	subs	r0, r0, r7
 8000f68:	4298      	cmp	r0, r3
 8000f6a:	d9f5      	bls.n	8000f58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000f6c:	e7db      	b.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40007000 	.word	0x40007000
 8000f78:	fffffcff 	.word	0xfffffcff
 8000f7c:	efffffff 	.word	0xefffffff
 8000f80:	fffeffff 	.word	0xfffeffff
 8000f84:	00001388 	.word	0x00001388

08000f88 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	6803      	ldr	r3, [r0, #0]
 8000f8c:	68d9      	ldr	r1, [r3, #12]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000f8e:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f90:	4311      	orrs	r1, r2
 8000f92:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000f94:	6819      	ldr	r1, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
}
 8000f9a:	4770      	bx	lr

08000f9c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000f9c:	6803      	ldr	r3, [r0, #0]
 8000f9e:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8000fa0:	2900      	cmp	r1, #0
 8000fa2:	d015      	beq.n	8000fd0 <HAL_TIM_Encoder_Start_IT+0x34>
 8000fa4:	2904      	cmp	r1, #4
 8000fa6:	d01e      	beq.n	8000fe6 <HAL_TIM_Encoder_Start_IT+0x4a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000fa8:	6a19      	ldr	r1, [r3, #32]
 8000faa:	4391      	bics	r1, r2
 8000fac:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000fae:	6a19      	ldr	r1, [r3, #32]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	6a19      	ldr	r1, [r3, #32]
 8000fb8:	4391      	bics	r1, r2
 8000fba:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000fbc:	6a19      	ldr	r1, [r3, #32]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	621a      	str	r2, [r3, #32]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	68d9      	ldr	r1, [r3, #12]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8000fca:	68d9      	ldr	r1, [r3, #12]
 8000fcc:	2204      	movs	r2, #4
 8000fce:	e007      	b.n	8000fe0 <HAL_TIM_Encoder_Start_IT+0x44>
  TIMx->CCER &= ~tmp;
 8000fd0:	6a19      	ldr	r1, [r3, #32]
 8000fd2:	4391      	bics	r1, r2
 8000fd4:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000fd6:	6a19      	ldr	r1, [r3, #32]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	621a      	str	r2, [r3, #32]
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8000fdc:	2202      	movs	r2, #2
 8000fde:	68d9      	ldr	r1, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	60da      	str	r2, [r3, #12]
     break;
 8000fe4:	e009      	b.n	8000ffa <HAL_TIM_Encoder_Start_IT+0x5e>
  TIMx->CCER &= ~tmp;
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	6a18      	ldr	r0, [r3, #32]
 8000fea:	4390      	bics	r0, r2
 8000fec:	6218      	str	r0, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000fee:	6a18      	ldr	r0, [r3, #32]
 8000ff0:	4302      	orrs	r2, r0
 8000ff2:	621a      	str	r2, [r3, #32]
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	6819      	ldr	r1, [r3, #0]
}
 8000ffe:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]
}
 8001004:	4770      	bx	lr

08001006 <HAL_TIM_PeriodElapsedCallback>:
 8001006:	4770      	bx	lr

08001008 <HAL_TIM_OC_DelayElapsedCallback>:
 8001008:	4770      	bx	lr

0800100a <HAL_TIM_IC_CaptureCallback>:
 800100a:	4770      	bx	lr

0800100c <HAL_TIM_PWM_PulseFinishedCallback>:
 800100c:	4770      	bx	lr

0800100e <HAL_TIM_TriggerCallback>:
 800100e:	4770      	bx	lr

08001010 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001010:	2202      	movs	r2, #2
 8001012:	6803      	ldr	r3, [r0, #0]
{
 8001014:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001016:	6919      	ldr	r1, [r3, #16]
{
 8001018:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800101a:	4211      	tst	r1, r2
 800101c:	d00e      	beq.n	800103c <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800101e:	68d9      	ldr	r1, [r3, #12]
 8001020:	4211      	tst	r1, r2
 8001022:	d00b      	beq.n	800103c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001024:	3a05      	subs	r2, #5
 8001026:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001028:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800102a:	3204      	adds	r2, #4
 800102c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800102e:	079b      	lsls	r3, r3, #30
 8001030:	d100      	bne.n	8001034 <HAL_TIM_IRQHandler+0x24>
 8001032:	e079      	b.n	8001128 <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8001034:	f7ff ffe9 	bl	800100a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001038:	2300      	movs	r3, #0
 800103a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800103c:	2204      	movs	r2, #4
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	6919      	ldr	r1, [r3, #16]
 8001042:	4211      	tst	r1, r2
 8001044:	d010      	beq.n	8001068 <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001046:	68d9      	ldr	r1, [r3, #12]
 8001048:	4211      	tst	r1, r2
 800104a:	d00d      	beq.n	8001068 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800104c:	3a09      	subs	r2, #9
 800104e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001050:	3207      	adds	r2, #7
 8001052:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	23c0      	movs	r3, #192	; 0xc0
 8001058:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800105a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800105c:	421a      	tst	r2, r3
 800105e:	d069      	beq.n	8001134 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8001060:	f7ff ffd3 	bl	800100a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001064:	2300      	movs	r3, #0
 8001066:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001068:	2208      	movs	r2, #8
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	6919      	ldr	r1, [r3, #16]
 800106e:	4211      	tst	r1, r2
 8001070:	d00e      	beq.n	8001090 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001072:	68d9      	ldr	r1, [r3, #12]
 8001074:	4211      	tst	r1, r2
 8001076:	d00b      	beq.n	8001090 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001078:	3a11      	subs	r2, #17
 800107a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800107c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800107e:	320d      	adds	r2, #13
 8001080:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001082:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001084:	079b      	lsls	r3, r3, #30
 8001086:	d05b      	beq.n	8001140 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8001088:	f7ff ffbf 	bl	800100a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800108c:	2300      	movs	r3, #0
 800108e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001090:	2210      	movs	r2, #16
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	6919      	ldr	r1, [r3, #16]
 8001096:	4211      	tst	r1, r2
 8001098:	d010      	beq.n	80010bc <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800109a:	68d9      	ldr	r1, [r3, #12]
 800109c:	4211      	tst	r1, r2
 800109e:	d00d      	beq.n	80010bc <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010a0:	3a21      	subs	r2, #33	; 0x21
 80010a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010a4:	3219      	adds	r2, #25
 80010a6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	23c0      	movs	r3, #192	; 0xc0
 80010ac:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80010ae:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010b0:	421a      	tst	r2, r3
 80010b2:	d04b      	beq.n	800114c <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80010b4:	f7ff ffa9 	bl	800100a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010b8:	2300      	movs	r3, #0
 80010ba:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80010bc:	2201      	movs	r2, #1
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	6919      	ldr	r1, [r3, #16]
 80010c2:	4211      	tst	r1, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80010c6:	68d9      	ldr	r1, [r3, #12]
 80010c8:	4211      	tst	r1, r2
 80010ca:	d004      	beq.n	80010d6 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010cc:	3a03      	subs	r2, #3
 80010ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80010d0:	0020      	movs	r0, r4
 80010d2:	f7ff ff98 	bl	8001006 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	6919      	ldr	r1, [r3, #16]
 80010dc:	4211      	tst	r1, r2
 80010de:	d008      	beq.n	80010f2 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80010e0:	68d9      	ldr	r1, [r3, #12]
 80010e2:	4211      	tst	r1, r2
 80010e4:	d005      	beq.n	80010f2 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010e6:	3a02      	subs	r2, #2
 80010e8:	3aff      	subs	r2, #255	; 0xff
 80010ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80010ec:	0020      	movs	r0, r4
 80010ee:	f000 f979 	bl	80013e4 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010f2:	2240      	movs	r2, #64	; 0x40
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	6919      	ldr	r1, [r3, #16]
 80010f8:	4211      	tst	r1, r2
 80010fa:	d007      	beq.n	800110c <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80010fc:	68d9      	ldr	r1, [r3, #12]
 80010fe:	4211      	tst	r1, r2
 8001100:	d004      	beq.n	800110c <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001102:	3a81      	subs	r2, #129	; 0x81
 8001104:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001106:	0020      	movs	r0, r4
 8001108:	f7ff ff81 	bl	800100e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800110c:	2220      	movs	r2, #32
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	6919      	ldr	r1, [r3, #16]
 8001112:	4211      	tst	r1, r2
 8001114:	d007      	beq.n	8001126 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001116:	68d9      	ldr	r1, [r3, #12]
 8001118:	4211      	tst	r1, r2
 800111a:	d004      	beq.n	8001126 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800111c:	3a41      	subs	r2, #65	; 0x41
 800111e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001120:	0020      	movs	r0, r4
 8001122:	f000 f95e 	bl	80013e2 <HAL_TIMEx_CommutationCallback>
}
 8001126:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001128:	f7ff ff6e 	bl	8001008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800112c:	0020      	movs	r0, r4
 800112e:	f7ff ff6d 	bl	800100c <HAL_TIM_PWM_PulseFinishedCallback>
 8001132:	e781      	b.n	8001038 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001134:	f7ff ff68 	bl	8001008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001138:	0020      	movs	r0, r4
 800113a:	f7ff ff67 	bl	800100c <HAL_TIM_PWM_PulseFinishedCallback>
 800113e:	e791      	b.n	8001064 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001140:	f7ff ff62 	bl	8001008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001144:	0020      	movs	r0, r4
 8001146:	f7ff ff61 	bl	800100c <HAL_TIM_PWM_PulseFinishedCallback>
 800114a:	e79f      	b.n	800108c <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800114c:	f7ff ff5c 	bl	8001008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001150:	0020      	movs	r0, r4
 8001152:	f7ff ff5b 	bl	800100c <HAL_TIM_PWM_PulseFinishedCallback>
 8001156:	e7af      	b.n	80010b8 <HAL_TIM_IRQHandler+0xa8>

08001158 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <TIM_Base_SetConfig+0x68>)
{
 800115a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800115c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800115e:	4290      	cmp	r0, r2
 8001160:	d002      	beq.n	8001168 <TIM_Base_SetConfig+0x10>
 8001162:	4c18      	ldr	r4, [pc, #96]	; (80011c4 <TIM_Base_SetConfig+0x6c>)
 8001164:	42a0      	cmp	r0, r4
 8001166:	d108      	bne.n	800117a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001168:	2470      	movs	r4, #112	; 0x70
 800116a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800116c:	684c      	ldr	r4, [r1, #4]
 800116e:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001170:	4290      	cmp	r0, r2
 8001172:	d00b      	beq.n	800118c <TIM_Base_SetConfig+0x34>
 8001174:	4c13      	ldr	r4, [pc, #76]	; (80011c4 <TIM_Base_SetConfig+0x6c>)
 8001176:	42a0      	cmp	r0, r4
 8001178:	d008      	beq.n	800118c <TIM_Base_SetConfig+0x34>
 800117a:	4c13      	ldr	r4, [pc, #76]	; (80011c8 <TIM_Base_SetConfig+0x70>)
 800117c:	42a0      	cmp	r0, r4
 800117e:	d005      	beq.n	800118c <TIM_Base_SetConfig+0x34>
 8001180:	4c12      	ldr	r4, [pc, #72]	; (80011cc <TIM_Base_SetConfig+0x74>)
 8001182:	42a0      	cmp	r0, r4
 8001184:	d002      	beq.n	800118c <TIM_Base_SetConfig+0x34>
 8001186:	4c12      	ldr	r4, [pc, #72]	; (80011d0 <TIM_Base_SetConfig+0x78>)
 8001188:	42a0      	cmp	r0, r4
 800118a:	d103      	bne.n	8001194 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800118c:	4c11      	ldr	r4, [pc, #68]	; (80011d4 <TIM_Base_SetConfig+0x7c>)
 800118e:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001190:	68cc      	ldr	r4, [r1, #12]
 8001192:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001194:	2480      	movs	r4, #128	; 0x80
 8001196:	43a3      	bics	r3, r4
 8001198:	694c      	ldr	r4, [r1, #20]
 800119a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800119c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800119e:	688b      	ldr	r3, [r1, #8]
 80011a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80011a2:	680b      	ldr	r3, [r1, #0]
 80011a4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011a6:	4290      	cmp	r0, r2
 80011a8:	d005      	beq.n	80011b6 <TIM_Base_SetConfig+0x5e>
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <TIM_Base_SetConfig+0x74>)
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d002      	beq.n	80011b6 <TIM_Base_SetConfig+0x5e>
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <TIM_Base_SetConfig+0x78>)
 80011b2:	4298      	cmp	r0, r3
 80011b4:	d101      	bne.n	80011ba <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 80011b6:	690b      	ldr	r3, [r1, #16]
 80011b8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80011ba:	2301      	movs	r3, #1
 80011bc:	6143      	str	r3, [r0, #20]
}
 80011be:	bd10      	pop	{r4, pc}
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40000400 	.word	0x40000400
 80011c8:	40002000 	.word	0x40002000
 80011cc:	40014400 	.word	0x40014400
 80011d0:	40014800 	.word	0x40014800
 80011d4:	fffffcff 	.word	0xfffffcff

080011d8 <HAL_TIM_Base_Init>:
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	0004      	movs	r4, r0
    return HAL_ERROR;
 80011dc:	2001      	movs	r0, #1
  if(htim == NULL)
 80011de:	2c00      	cmp	r4, #0
 80011e0:	d014      	beq.n	800120c <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80011e2:	0025      	movs	r5, r4
 80011e4:	353d      	adds	r5, #61	; 0x3d
 80011e6:	782b      	ldrb	r3, [r5, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80011ee:	0022      	movs	r2, r4
 80011f0:	323c      	adds	r2, #60	; 0x3c
 80011f2:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80011f4:	0020      	movs	r0, r4
 80011f6:	f000 fd73 	bl	8001ce0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80011fa:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011fc:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80011fe:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001200:	1d21      	adds	r1, r4, #4
 8001202:	f7ff ffa9 	bl	8001158 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001206:	2301      	movs	r3, #1
  return HAL_OK;
 8001208:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800120a:	702b      	strb	r3, [r5, #0]
}
 800120c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001210 <HAL_TIM_Encoder_Init>:
{
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	0006      	movs	r6, r0
 8001214:	000c      	movs	r4, r1
    return HAL_ERROR;
 8001216:	2001      	movs	r0, #1
  if(htim == NULL)
 8001218:	2e00      	cmp	r6, #0
 800121a:	d03d      	beq.n	8001298 <HAL_TIM_Encoder_Init+0x88>
  if(htim->State == HAL_TIM_STATE_RESET)
 800121c:	0035      	movs	r5, r6
 800121e:	353d      	adds	r5, #61	; 0x3d
 8001220:	782b      	ldrb	r3, [r5, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d105      	bne.n	8001234 <HAL_TIM_Encoder_Init+0x24>
    htim->Lock = HAL_UNLOCKED;
 8001228:	0032      	movs	r2, r6
 800122a:	323c      	adds	r2, #60	; 0x3c
 800122c:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Encoder_MspInit(htim);
 800122e:	0030      	movs	r0, r6
 8001230:	f000 fd72 	bl	8001d18 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001234:	0031      	movs	r1, r6
  htim->State= HAL_TIM_STATE_BUSY;
 8001236:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001238:	2207      	movs	r2, #7
 800123a:	c901      	ldmia	r1!, {r0}
  htim->State= HAL_TIM_STATE_BUSY;
 800123c:	702b      	strb	r3, [r5, #0]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800123e:	6883      	ldr	r3, [r0, #8]
 8001240:	4393      	bics	r3, r2
 8001242:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001244:	f7ff ff88 	bl	8001158 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001248:	6832      	ldr	r2, [r6, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800124a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800124c:	6891      	ldr	r1, [r2, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800124e:	6996      	ldr	r6, [r2, #24]
  tmpsmcr |= sConfig->EncoderMode;
 8001250:	4319      	orrs	r1, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_TIM_Encoder_Init+0x8c>)
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001254:	68a7      	ldr	r7, [r4, #8]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001256:	401e      	ands	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001258:	69a3      	ldr	r3, [r4, #24]
  tmpccer = htim->Instance->CCER;
 800125a:	6a10      	ldr	r0, [r2, #32]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	433b      	orrs	r3, r7
 8001260:	4333      	orrs	r3, r6
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001262:	4e0f      	ldr	r6, [pc, #60]	; (80012a0 <HAL_TIM_Encoder_Init+0x90>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001264:	6927      	ldr	r7, [r4, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001266:	401e      	ands	r6, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001268:	69e3      	ldr	r3, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800126a:	013f      	lsls	r7, r7, #4
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800126c:	021b      	lsls	r3, r3, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800126e:	433b      	orrs	r3, r7
 8001270:	68e7      	ldr	r7, [r4, #12]
 8001272:	433b      	orrs	r3, r7
 8001274:	6a27      	ldr	r7, [r4, #32]
 8001276:	033f      	lsls	r7, r7, #12
 8001278:	433b      	orrs	r3, r7
 800127a:	4333      	orrs	r3, r6
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800127c:	26aa      	movs	r6, #170	; 0xaa
 800127e:	43b0      	bics	r0, r6
 8001280:	0006      	movs	r6, r0
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001282:	6960      	ldr	r0, [r4, #20]
 8001284:	6864      	ldr	r4, [r4, #4]
 8001286:	0100      	lsls	r0, r0, #4
 8001288:	4320      	orrs	r0, r4
  htim->Instance->SMCR = tmpsmcr;
 800128a:	6091      	str	r1, [r2, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800128c:	4330      	orrs	r0, r6
  htim->Instance->CCMR1 = tmpccmr1;
 800128e:	6193      	str	r3, [r2, #24]
  htim->State= HAL_TIM_STATE_READY;
 8001290:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001292:	6210      	str	r0, [r2, #32]
  return HAL_OK;
 8001294:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001296:	702b      	strb	r3, [r5, #0]
}
 8001298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	fffffcfc 	.word	0xfffffcfc
 80012a0:	ffff0303 	.word	0xffff0303

080012a4 <TIM_ETR_SetConfig>:
{
 80012a4:	b530      	push	{r4, r5, lr}
  tmpsmcr = TIMx->SMCR;
 80012a6:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012a8:	4d03      	ldr	r5, [pc, #12]	; (80012b8 <TIM_ETR_SetConfig+0x14>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012aa:	430a      	orrs	r2, r1
 80012ac:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012ae:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012b0:	4313      	orrs	r3, r2
 80012b2:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80012b4:	6083      	str	r3, [r0, #8]
}
 80012b6:	bd30      	pop	{r4, r5, pc}
 80012b8:	ffff00ff 	.word	0xffff00ff

080012bc <TIM_SlaveTimer_SetConfig>:
  tmpsmcr &= ~TIM_SMCR_TS;
 80012bc:	2270      	movs	r2, #112	; 0x70
{
 80012be:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr &= ~TIM_SMCR_SMS;
 80012c0:	2407      	movs	r4, #7
  tmpsmcr = htim->Instance->SMCR;
 80012c2:	6800      	ldr	r0, [r0, #0]
 80012c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012c6:	4393      	bics	r3, r2
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80012c8:	684a      	ldr	r2, [r1, #4]
 80012ca:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80012cc:	43a3      	bics	r3, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80012ce:	680c      	ldr	r4, [r1, #0]
 80012d0:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 80012d2:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80012d4:	2a50      	cmp	r2, #80	; 0x50
 80012d6:	d01c      	beq.n	8001312 <TIM_SlaveTimer_SetConfig+0x56>
 80012d8:	d802      	bhi.n	80012e0 <TIM_SlaveTimer_SetConfig+0x24>
 80012da:	2a40      	cmp	r2, #64	; 0x40
 80012dc:	d00a      	beq.n	80012f4 <TIM_SlaveTimer_SetConfig+0x38>
}
 80012de:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80012e0:	2a60      	cmp	r2, #96	; 0x60
 80012e2:	d028      	beq.n	8001336 <TIM_SlaveTimer_SetConfig+0x7a>
 80012e4:	2a70      	cmp	r2, #112	; 0x70
 80012e6:	d1fa      	bne.n	80012de <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 80012e8:	690b      	ldr	r3, [r1, #16]
 80012ea:	688a      	ldr	r2, [r1, #8]
 80012ec:	68c9      	ldr	r1, [r1, #12]
 80012ee:	f7ff ffd9 	bl	80012a4 <TIM_ETR_SetConfig>
    break;
 80012f2:	e7f4      	b.n	80012de <TIM_SlaveTimer_SetConfig+0x22>
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80012f4:	2201      	movs	r2, #1
      tmpccer = htim->Instance->CCER;
 80012f6:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80012f8:	6a03      	ldr	r3, [r0, #32]
 80012fa:	4393      	bics	r3, r2
 80012fc:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80012fe:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001300:	32ef      	adds	r2, #239	; 0xef
 8001302:	4393      	bics	r3, r2
 8001304:	001a      	movs	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001306:	690b      	ldr	r3, [r1, #16]
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 800130c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 800130e:	6204      	str	r4, [r0, #32]
    break;
 8001310:	e7e5      	b.n	80012de <TIM_SlaveTimer_SetConfig+0x22>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001312:	2501      	movs	r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001314:	688a      	ldr	r2, [r1, #8]
 8001316:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 8001318:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800131a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800131c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800131e:	43ac      	bics	r4, r5
 8001320:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001322:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001324:	35ef      	adds	r5, #239	; 0xef
 8001326:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001328:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800132a:	240a      	movs	r4, #10
 800132c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800132e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001330:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001332:	6202      	str	r2, [r0, #32]
 8001334:	e7d3      	b.n	80012de <TIM_SlaveTimer_SetConfig+0x22>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001336:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001338:	688b      	ldr	r3, [r1, #8]
 800133a:	690a      	ldr	r2, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800133c:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800133e:	4d07      	ldr	r5, [pc, #28]	; (800135c <TIM_SlaveTimer_SetConfig+0xa0>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001340:	43a1      	bics	r1, r4
 8001342:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001344:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001346:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001348:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800134a:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800134c:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800134e:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001350:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001352:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001354:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8001356:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001358:	6203      	str	r3, [r0, #32]
}
 800135a:	e7c0      	b.n	80012de <TIM_SlaveTimer_SetConfig+0x22>
 800135c:	ffff0fff 	.word	0xffff0fff

08001360 <HAL_TIM_SlaveConfigSynchronization>:
{
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001362:	0005      	movs	r5, r0
 8001364:	353c      	adds	r5, #60	; 0x3c
 8001366:	782b      	ldrb	r3, [r5, #0]
{
 8001368:	0004      	movs	r4, r0
 800136a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800136c:	2b01      	cmp	r3, #1
 800136e:	d013      	beq.n	8001398 <HAL_TIM_SlaveConfigSynchronization+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8001370:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001372:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001374:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8001376:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001378:	7030      	strb	r0, [r6, #0]
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800137a:	0020      	movs	r0, r4
 800137c:	f7ff ff9e 	bl	80012bc <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001380:	2140      	movs	r1, #64	; 0x40
  __HAL_UNLOCK(htim);
 8001382:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	438a      	bics	r2, r1
 800138a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	4903      	ldr	r1, [pc, #12]	; (800139c <HAL_TIM_SlaveConfigSynchronization+0x3c>)
 8001390:	400a      	ands	r2, r1
 8001392:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001394:	7037      	strb	r7, [r6, #0]
  __HAL_UNLOCK(htim);
 8001396:	7028      	strb	r0, [r5, #0]
    }
 8001398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	ffffbfff 	.word	0xffffbfff

080013a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80013a0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80013a2:	0004      	movs	r4, r0
 80013a4:	343c      	adds	r4, #60	; 0x3c
 80013a6:	7822      	ldrb	r2, [r4, #0]
{
 80013a8:	0003      	movs	r3, r0
 80013aa:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80013ac:	2a01      	cmp	r2, #1
 80013ae:	d017      	beq.n	80013e0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80013b0:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013b2:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80013b4:	353d      	adds	r5, #61	; 0x3d
 80013b6:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	306e      	adds	r0, #110	; 0x6e
 80013bc:	4382      	bics	r2, r0
 80013be:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013c4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013c6:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80013c8:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013ca:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	4382      	bics	r2, r0
 80013d0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013d2:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80013d4:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013d6:	430a      	orrs	r2, r1
 80013d8:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80013da:	2301      	movs	r3, #1
 80013dc:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80013de:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80013e0:	bd30      	pop	{r4, r5, pc}

080013e2 <HAL_TIMEx_CommutationCallback>:
 80013e2:	4770      	bx	lr

080013e4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013e4:	4770      	bx	lr
	...

080013e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013ec:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013ee:	69c2      	ldr	r2, [r0, #28]
 80013f0:	6883      	ldr	r3, [r0, #8]
 80013f2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013f4:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013f6:	4303      	orrs	r3, r0
 80013f8:	6960      	ldr	r0, [r4, #20]
 80013fa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013fc:	4835      	ldr	r0, [pc, #212]	; (80014d4 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013fe:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001400:	4001      	ands	r1, r0
 8001402:	430b      	orrs	r3, r1
 8001404:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001406:	686b      	ldr	r3, [r5, #4]
 8001408:	4933      	ldr	r1, [pc, #204]	; (80014d8 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800140a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800140c:	400b      	ands	r3, r1
 800140e:	68e1      	ldr	r1, [r4, #12]
 8001410:	430b      	orrs	r3, r1
 8001412:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001414:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001416:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001418:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800141a:	4830      	ldr	r0, [pc, #192]	; (80014dc <UART_SetConfig+0xf4>)
 800141c:	4001      	ands	r1, r0
 800141e:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001420:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001422:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <UART_SetConfig+0xf8>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	400b      	ands	r3, r1
 800142a:	492e      	ldr	r1, [pc, #184]	; (80014e4 <UART_SetConfig+0xfc>)
 800142c:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	429a      	cmp	r2, r3
 8001434:	d12c      	bne.n	8001490 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001436:	2808      	cmp	r0, #8
 8001438:	d827      	bhi.n	800148a <UART_SetConfig+0xa2>
 800143a:	f7fe fe65 	bl	8000108 <__gnu_thumb1_case_uqi>
 800143e:	2605      	.short	0x2605
 8001440:	261e260b 	.word	0x261e260b
 8001444:	2626      	.short	0x2626
 8001446:	21          	.byte	0x21
 8001447:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001448:	f7ff fd0a 	bl	8000e60 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800144c:	6863      	ldr	r3, [r4, #4]
 800144e:	0040      	lsls	r0, r0, #1
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	e002      	b.n	800145a <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001454:	6863      	ldr	r3, [r4, #4]
 8001456:	0858      	lsrs	r0, r3, #1
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800145a:	18c0      	adds	r0, r0, r3
 800145c:	6861      	ldr	r1, [r4, #4]
 800145e:	f7fe fe5d 	bl	800011c <__udivsi3>
 8001462:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001464:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001466:	220f      	movs	r2, #15
 8001468:	0019      	movs	r1, r3
 800146a:	4391      	bics	r1, r2
 800146c:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800146e:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001470:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001472:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001474:	4313      	orrs	r3, r2
 8001476:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8001478:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800147a:	f7ff fc23 	bl	8000cc4 <HAL_RCC_GetSysClockFreq>
 800147e:	e7e5      	b.n	800144c <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001480:	6863      	ldr	r3, [r4, #4]
 8001482:	0858      	lsrs	r0, r3, #1
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	e7e7      	b.n	800145a <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 800148a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800148c:	2300      	movs	r3, #0
 800148e:	e7ea      	b.n	8001466 <UART_SetConfig+0x7e>
    switch (clocksource)
 8001490:	2808      	cmp	r0, #8
 8001492:	d81d      	bhi.n	80014d0 <UART_SetConfig+0xe8>
 8001494:	f7fe fe38 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001498:	1c0a1c05 	.word	0x1c0a1c05
 800149c:	1c1c1c14 	.word	0x1c1c1c14
 80014a0:	17          	.byte	0x17
 80014a1:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014a2:	f7ff fcdd 	bl	8000e60 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014a6:	6861      	ldr	r1, [r4, #4]
 80014a8:	084b      	lsrs	r3, r1, #1
 80014aa:	e002      	b.n	80014b2 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014ac:	6861      	ldr	r1, [r4, #4]
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <UART_SetConfig+0x104>)
 80014b0:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014b2:	18c0      	adds	r0, r0, r3
 80014b4:	f7fe fe32 	bl	800011c <__udivsi3>
 80014b8:	b280      	uxth	r0, r0
 80014ba:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80014bc:	2000      	movs	r0, #0
        break;
 80014be:	e7db      	b.n	8001478 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014c0:	f7ff fc00 	bl	8000cc4 <HAL_RCC_GetSysClockFreq>
 80014c4:	e7ef      	b.n	80014a6 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	6861      	ldr	r1, [r4, #4]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	0848      	lsrs	r0, r1, #1
 80014ce:	e7f0      	b.n	80014b2 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
 80014d2:	e7d1      	b.n	8001478 <UART_SetConfig+0x90>
 80014d4:	ffff69f3 	.word	0xffff69f3
 80014d8:	ffffcfff 	.word	0xffffcfff
 80014dc:	fffff4ff 	.word	0xfffff4ff
 80014e0:	40021000 	.word	0x40021000
 80014e4:	080035e8 	.word	0x080035e8
 80014e8:	00f42400 	.word	0x00f42400
 80014ec:	007a1200 	.word	0x007a1200

080014f0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80014f2:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014f4:	07da      	lsls	r2, r3, #31
 80014f6:	d506      	bpl.n	8001506 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80014f8:	6801      	ldr	r1, [r0, #0]
 80014fa:	4c28      	ldr	r4, [pc, #160]	; (800159c <UART_AdvFeatureConfig+0xac>)
 80014fc:	684a      	ldr	r2, [r1, #4]
 80014fe:	4022      	ands	r2, r4
 8001500:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001502:	4322      	orrs	r2, r4
 8001504:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001506:	079a      	lsls	r2, r3, #30
 8001508:	d506      	bpl.n	8001518 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800150a:	6801      	ldr	r1, [r0, #0]
 800150c:	4c24      	ldr	r4, [pc, #144]	; (80015a0 <UART_AdvFeatureConfig+0xb0>)
 800150e:	684a      	ldr	r2, [r1, #4]
 8001510:	4022      	ands	r2, r4
 8001512:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001514:	4322      	orrs	r2, r4
 8001516:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001518:	075a      	lsls	r2, r3, #29
 800151a:	d506      	bpl.n	800152a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800151c:	6801      	ldr	r1, [r0, #0]
 800151e:	4c21      	ldr	r4, [pc, #132]	; (80015a4 <UART_AdvFeatureConfig+0xb4>)
 8001520:	684a      	ldr	r2, [r1, #4]
 8001522:	4022      	ands	r2, r4
 8001524:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001526:	4322      	orrs	r2, r4
 8001528:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800152a:	071a      	lsls	r2, r3, #28
 800152c:	d506      	bpl.n	800153c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800152e:	6801      	ldr	r1, [r0, #0]
 8001530:	4c1d      	ldr	r4, [pc, #116]	; (80015a8 <UART_AdvFeatureConfig+0xb8>)
 8001532:	684a      	ldr	r2, [r1, #4]
 8001534:	4022      	ands	r2, r4
 8001536:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001538:	4322      	orrs	r2, r4
 800153a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800153c:	06da      	lsls	r2, r3, #27
 800153e:	d506      	bpl.n	800154e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001540:	6801      	ldr	r1, [r0, #0]
 8001542:	4c1a      	ldr	r4, [pc, #104]	; (80015ac <UART_AdvFeatureConfig+0xbc>)
 8001544:	688a      	ldr	r2, [r1, #8]
 8001546:	4022      	ands	r2, r4
 8001548:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800154a:	4322      	orrs	r2, r4
 800154c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800154e:	069a      	lsls	r2, r3, #26
 8001550:	d506      	bpl.n	8001560 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001552:	6801      	ldr	r1, [r0, #0]
 8001554:	4c16      	ldr	r4, [pc, #88]	; (80015b0 <UART_AdvFeatureConfig+0xc0>)
 8001556:	688a      	ldr	r2, [r1, #8]
 8001558:	4022      	ands	r2, r4
 800155a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800155c:	4322      	orrs	r2, r4
 800155e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001560:	065a      	lsls	r2, r3, #25
 8001562:	d510      	bpl.n	8001586 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001564:	6801      	ldr	r1, [r0, #0]
 8001566:	4d13      	ldr	r5, [pc, #76]	; (80015b4 <UART_AdvFeatureConfig+0xc4>)
 8001568:	684a      	ldr	r2, [r1, #4]
 800156a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800156c:	402a      	ands	r2, r5
 800156e:	4322      	orrs	r2, r4
 8001570:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	0352      	lsls	r2, r2, #13
 8001576:	4294      	cmp	r4, r2
 8001578:	d105      	bne.n	8001586 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800157a:	684a      	ldr	r2, [r1, #4]
 800157c:	4c0e      	ldr	r4, [pc, #56]	; (80015b8 <UART_AdvFeatureConfig+0xc8>)
 800157e:	4022      	ands	r2, r4
 8001580:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001582:	4322      	orrs	r2, r4
 8001584:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001586:	061b      	lsls	r3, r3, #24
 8001588:	d506      	bpl.n	8001598 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800158a:	6802      	ldr	r2, [r0, #0]
 800158c:	490b      	ldr	r1, [pc, #44]	; (80015bc <UART_AdvFeatureConfig+0xcc>)
 800158e:	6853      	ldr	r3, [r2, #4]
 8001590:	400b      	ands	r3, r1
 8001592:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001594:	430b      	orrs	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
  }
}
 8001598:	bd30      	pop	{r4, r5, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	fffdffff 	.word	0xfffdffff
 80015a0:	fffeffff 	.word	0xfffeffff
 80015a4:	fffbffff 	.word	0xfffbffff
 80015a8:	ffff7fff 	.word	0xffff7fff
 80015ac:	ffffefff 	.word	0xffffefff
 80015b0:	ffffdfff 	.word	0xffffdfff
 80015b4:	ffefffff 	.word	0xffefffff
 80015b8:	ff9fffff 	.word	0xff9fffff
 80015bc:	fff7ffff 	.word	0xfff7ffff

080015c0 <HAL_UART_Init>:
{
 80015c0:	b570      	push	{r4, r5, r6, lr}
 80015c2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80015c4:	d101      	bne.n	80015ca <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80015c6:	2001      	movs	r0, #1
}
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80015ca:	0005      	movs	r5, r0
 80015cc:	3569      	adds	r5, #105	; 0x69
 80015ce:	782b      	ldrb	r3, [r5, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80015d6:	0002      	movs	r2, r0
 80015d8:	3268      	adds	r2, #104	; 0x68
 80015da:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80015dc:	f000 fbd4 	bl	8001d88 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80015e0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80015e2:	2101      	movs	r1, #1
 80015e4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015e6:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80015e8:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015ea:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80015ec:	438b      	bics	r3, r1
 80015ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015f0:	f7ff fefa 	bl	80013e8 <UART_SetConfig>
 80015f4:	2801      	cmp	r0, #1
 80015f6:	d0e6      	beq.n	80015c6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80015fe:	0020      	movs	r0, r4
 8001600:	f7ff ff76 	bl	80014f0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	490b      	ldr	r1, [pc, #44]	; (8001634 <HAL_UART_Init+0x74>)
 8001608:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800160a:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800160c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800160e:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001610:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	438a      	bics	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001618:	2201      	movs	r2, #1
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001620:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8001622:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001624:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001626:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001628:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800162a:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800162c:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800162e:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001630:	e7ca      	b.n	80015c8 <HAL_UART_Init+0x8>
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	fffff7ff 	.word	0xfffff7ff

08001638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163a:	0004      	movs	r4, r0
 800163c:	000e      	movs	r6, r1
 800163e:	0015      	movs	r5, r2
 8001640:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	69d3      	ldr	r3, [r2, #28]
 8001646:	4033      	ands	r3, r6
 8001648:	1b9b      	subs	r3, r3, r6
 800164a:	4259      	negs	r1, r3
 800164c:	414b      	adcs	r3, r1
 800164e:	42ab      	cmp	r3, r5
 8001650:	d001      	beq.n	8001656 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	e018      	b.n	8001688 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001656:	9b06      	ldr	r3, [sp, #24]
 8001658:	3301      	adds	r3, #1
 800165a:	d0f3      	beq.n	8001644 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800165c:	9b06      	ldr	r3, [sp, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d113      	bne.n	800168a <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001666:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001668:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800166a:	400a      	ands	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	31a3      	adds	r1, #163	; 0xa3
 8001672:	31ff      	adds	r1, #255	; 0xff
 8001674:	438a      	bics	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001678:	0022      	movs	r2, r4
 800167a:	2320      	movs	r3, #32
 800167c:	3269      	adds	r2, #105	; 0x69
 800167e:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001680:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001682:	2300      	movs	r3, #0
 8001684:	3468      	adds	r4, #104	; 0x68
 8001686:	7023      	strb	r3, [r4, #0]
}
 8001688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800168a:	f7fe fdfd 	bl	8000288 <HAL_GetTick>
 800168e:	9b06      	ldr	r3, [sp, #24]
 8001690:	1bc0      	subs	r0, r0, r7
 8001692:	4283      	cmp	r3, r0
 8001694:	d2d5      	bcs.n	8001642 <UART_WaitOnFlagUntilTimeout+0xa>
 8001696:	e7e4      	b.n	8001662 <UART_WaitOnFlagUntilTimeout+0x2a>
 8001698:	fffffe5f 	.word	0xfffffe5f

0800169c <HAL_UART_Transmit>:
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800169e:	0007      	movs	r7, r0
{
 80016a0:	b085      	sub	sp, #20
 80016a2:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 80016a4:	3769      	adds	r7, #105	; 0x69
 80016a6:	783b      	ldrb	r3, [r7, #0]
{
 80016a8:	0004      	movs	r4, r0
 80016aa:	000d      	movs	r5, r1
 80016ac:	0016      	movs	r6, r2
    return HAL_BUSY;
 80016ae:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d146      	bne.n	8001742 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 80016b4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80016b6:	2900      	cmp	r1, #0
 80016b8:	d043      	beq.n	8001742 <HAL_UART_Transmit+0xa6>
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d041      	beq.n	8001742 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	68a2      	ldr	r2, [r4, #8]
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d104      	bne.n	80016d2 <HAL_UART_Transmit+0x36>
 80016c8:	6923      	ldr	r3, [r4, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80016ce:	4201      	tst	r1, r0
 80016d0:	d137      	bne.n	8001742 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80016d2:	0023      	movs	r3, r4
 80016d4:	3368      	adds	r3, #104	; 0x68
 80016d6:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80016d8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80016da:	2a01      	cmp	r2, #1
 80016dc:	d031      	beq.n	8001742 <HAL_UART_Transmit+0xa6>
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016e6:	3321      	adds	r3, #33	; 0x21
 80016e8:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80016ea:	f7fe fdcd 	bl	8000288 <HAL_GetTick>
    huart->TxXferSize = Size;
 80016ee:	0023      	movs	r3, r4
 80016f0:	3350      	adds	r3, #80	; 0x50
 80016f2:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80016f4:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016f6:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 80016f8:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016fa:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 80016fc:	0021      	movs	r1, r4
 80016fe:	3152      	adds	r1, #82	; 0x52
 8001700:	880a      	ldrh	r2, [r1, #0]
 8001702:	b292      	uxth	r2, r2
 8001704:	2a00      	cmp	r2, #0
 8001706:	d10d      	bne.n	8001724 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001708:	9b03      	ldr	r3, [sp, #12]
 800170a:	2140      	movs	r1, #64	; 0x40
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	0020      	movs	r0, r4
 8001710:	9b02      	ldr	r3, [sp, #8]
 8001712:	f7ff ff91 	bl	8001638 <UART_WaitOnFlagUntilTimeout>
 8001716:	2800      	cmp	r0, #0
 8001718:	d112      	bne.n	8001740 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 800171a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800171c:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800171e:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8001720:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001722:	e00e      	b.n	8001742 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001724:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001726:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001728:	3b01      	subs	r3, #1
 800172a:	b29b      	uxth	r3, r3
 800172c:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800172e:	9b03      	ldr	r3, [sp, #12]
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	0020      	movs	r0, r4
 8001736:	9b02      	ldr	r3, [sp, #8]
 8001738:	f7ff ff7e 	bl	8001638 <UART_WaitOnFlagUntilTimeout>
 800173c:	2800      	cmp	r0, #0
 800173e:	d002      	beq.n	8001746 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8001740:	2003      	movs	r0, #3
}
 8001742:	b005      	add	sp, #20
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001746:	68a3      	ldr	r3, [r4, #8]
 8001748:	6822      	ldr	r2, [r4, #0]
 800174a:	42b3      	cmp	r3, r6
 800174c:	d108      	bne.n	8001760 <HAL_UART_Transmit+0xc4>
 800174e:	6923      	ldr	r3, [r4, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001754:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8001756:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	0ddb      	lsrs	r3, r3, #23
 800175c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 800175e:	e7cd      	b.n	80016fc <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001760:	782b      	ldrb	r3, [r5, #0]
 8001762:	3501      	adds	r5, #1
 8001764:	8513      	strh	r3, [r2, #40]	; 0x28
 8001766:	e7c9      	b.n	80016fc <HAL_UART_Transmit+0x60>

08001768 <test_screen_function>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int8_t test_screen_function(uint16_t reg_addr) {
 8001768:	b510      	push	{r4, lr}
//	  char string[] = "test";
//		HAL_UART_Transmit(&huart1, string, 4, 50);
//		HAL_UART_Transmit(&huart1, &reg_addr, 1, 50);
//	  	HAL_UART_Transmit(&huart1, " ", 1, 50);

		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 800176a:	4c09      	ldr	r4, [pc, #36]	; (8001790 <test_screen_function+0x28>)
 800176c:	4909      	ldr	r1, [pc, #36]	; (8001794 <test_screen_function+0x2c>)
 800176e:	0020      	movs	r0, r4
 8001770:	f000 feee 	bl	8002550 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 1, 20, "Time ");
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <test_screen_function+0x30>)
 8001776:	2214      	movs	r2, #20
 8001778:	2101      	movs	r1, #1
 800177a:	0020      	movs	r0, r4
 800177c:	f000 fea8 	bl	80024d0 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 120, 20, "s");
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <test_screen_function+0x34>)
 8001782:	2214      	movs	r2, #20
 8001784:	2178      	movs	r1, #120	; 0x78
 8001786:	0020      	movs	r0, r4
 8001788:	f000 fea2 	bl	80024d0 <u8g2_DrawStr>

	  	return 0;
};
 800178c:	2000      	movs	r0, #0
 800178e:	bd10      	pop	{r4, pc}
 8001790:	200000b4 	.word	0x200000b4
 8001794:	0800361a 	.word	0x0800361a
 8001798:	080035fa 	.word	0x080035fa
 800179c:	08003600 	.word	0x08003600

080017a0 <render_time_value>:

int8_t render_time_value(uint16_t value) {
		uint16_t thouthands = value/1000;
		uint16_t leftover = value%1000;
 80017a0:	21fa      	movs	r1, #250	; 0xfa
int8_t render_time_value(uint16_t value) {
 80017a2:	b530      	push	{r4, r5, lr}
		uint16_t leftover = value%1000;
 80017a4:	0089      	lsls	r1, r1, #2
int8_t render_time_value(uint16_t value) {
 80017a6:	b085      	sub	sp, #20
 80017a8:	0005      	movs	r5, r0
		uint16_t leftover = value%1000;
 80017aa:	f7fe fd3d 	bl	8000228 <__aeabi_uidivmod>


		char str[10];
		sprintf (str, "%d.%03d", thouthands, leftover);
 80017ae:	b28c      	uxth	r4, r1
		uint16_t thouthands = value/1000;
 80017b0:	21fa      	movs	r1, #250	; 0xfa
 80017b2:	0028      	movs	r0, r5
 80017b4:	0089      	lsls	r1, r1, #2
 80017b6:	f7fe fcb1 	bl	800011c <__udivsi3>
		sprintf (str, "%d.%03d", thouthands, leftover);
 80017ba:	0023      	movs	r3, r4
 80017bc:	b282      	uxth	r2, r0
 80017be:	4909      	ldr	r1, [pc, #36]	; (80017e4 <render_time_value+0x44>)
 80017c0:	a801      	add	r0, sp, #4
 80017c2:	f001 fadd 	bl	8002d80 <siprintf>
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 80017c6:	4c08      	ldr	r4, [pc, #32]	; (80017e8 <render_time_value+0x48>)
 80017c8:	4908      	ldr	r1, [pc, #32]	; (80017ec <render_time_value+0x4c>)
 80017ca:	0020      	movs	r0, r4
 80017cc:	f000 fec0 	bl	8002550 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 55, 20, str);
 80017d0:	ab01      	add	r3, sp, #4
 80017d2:	2214      	movs	r2, #20
 80017d4:	2137      	movs	r1, #55	; 0x37
 80017d6:	0020      	movs	r0, r4
 80017d8:	f000 fe7a 	bl	80024d0 <u8g2_DrawStr>

	  	return 0;
};
 80017dc:	2000      	movs	r0, #0
 80017de:	b005      	add	sp, #20
 80017e0:	bd30      	pop	{r4, r5, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	080035f2 	.word	0x080035f2
 80017e8:	200000b4 	.word	0x200000b4
 80017ec:	0800361a 	.word	0x0800361a

080017f0 <u8x8_stm32_gpio_and_delay>:

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
    U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
    U8X8_UNUSED void *arg_ptr)
{
 80017f0:	b510      	push	{r4, lr}
  switch (msg)
 80017f2:	2928      	cmp	r1, #40	; 0x28
 80017f4:	d003      	beq.n	80017fe <u8x8_stm32_gpio_and_delay+0xe>
 80017f6:	2929      	cmp	r1, #41	; 0x29
 80017f8:	d005      	beq.n	8001806 <u8x8_stm32_gpio_and_delay+0x16>
  case U8X8_MSG_GPIO_RESET:
//    HAL_GPIO_WritePin(DISPLAY_RESET_GPIO_Port, DISPLAY_RESET_Pin, arg_int);
    break;
  }
  return 1;
}
 80017fa:	2001      	movs	r0, #1
 80017fc:	bd10      	pop	{r4, pc}
    HAL_Delay(1);
 80017fe:	2001      	movs	r0, #1
    HAL_Delay(arg_int);
 8001800:	f7fe fd48 	bl	8000294 <HAL_Delay>
    break;
 8001804:	e7f9      	b.n	80017fa <u8x8_stm32_gpio_and_delay+0xa>
    HAL_Delay(arg_int);
 8001806:	0010      	movs	r0, r2
 8001808:	e7fa      	b.n	8001800 <u8x8_stm32_gpio_and_delay+0x10>
	...

0800180c <u8x8_byte_sw_i2c_my>:

uint8_t u8x8_byte_sw_i2c_my(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800180c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 800180e:	3914      	subs	r1, #20
{
 8001810:	0004      	movs	r4, r0
  switch(msg)
 8001812:	0008      	movs	r0, r1
 8001814:	290c      	cmp	r1, #12
 8001816:	d82c      	bhi.n	8001872 <u8x8_byte_sw_i2c_my+0x66>
 8001818:	f7fe fc76 	bl	8000108 <__gnu_thumb1_case_uqi>
 800181c:	072b2b13 	.word	0x072b2b13
 8001820:	2b2b201c 	.word	0x2b2b201c
 8001824:	2b2b2b2b 	.word	0x2b2b2b2b
 8001828:	13          	.byte	0x13
 8001829:	00          	.byte	0x00
 800182a:	2400      	movs	r4, #0
 800182c:	2601      	movs	r6, #1
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <u8x8_byte_sw_i2c_my+0x6c>)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	buffer[buf_idx++] = *data;
 8001830:	4d12      	ldr	r5, [pc, #72]	; (800187c <u8x8_byte_sw_i2c_my+0x70>)
 8001832:	7801      	ldrb	r1, [r0, #0]
 8001834:	1852      	adds	r2, r2, r1
 8001836:	b2d2      	uxtb	r2, r2
      while( arg_int > 0 )
 8001838:	4291      	cmp	r1, r2
 800183a:	d104      	bne.n	8001846 <u8x8_byte_sw_i2c_my+0x3a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d000      	beq.n	8001842 <u8x8_byte_sw_i2c_my+0x36>
 8001840:	7001      	strb	r1, [r0, #0]
				50);
      break;
    default:
      return 0;
  }
  return 1;
 8001842:	2001      	movs	r0, #1
}
 8001844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	buffer[buf_idx++] = *data;
 8001846:	781c      	ldrb	r4, [r3, #0]
 8001848:	1c4f      	adds	r7, r1, #1
 800184a:	546c      	strb	r4, [r5, r1]
	data++;
 800184c:	3301      	adds	r3, #1
 800184e:	0034      	movs	r4, r6
	buffer[buf_idx++] = *data;
 8001850:	b2f9      	uxtb	r1, r7
 8001852:	e7f1      	b.n	8001838 <u8x8_byte_sw_i2c_my+0x2c>
      buf_idx = 0;
 8001854:	2200      	movs	r2, #0
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <u8x8_byte_sw_i2c_my+0x6c>)
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e7f2      	b.n	8001842 <u8x8_byte_sw_i2c_my+0x36>
    	HAL_I2C_Master_Transmit(&hi2c1,
 800185c:	2232      	movs	r2, #50	; 0x32
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <u8x8_byte_sw_i2c_my+0x6c>)
    			u8x8_GetI2CAddress(u8x8),
 8001860:	3405      	adds	r4, #5
    	HAL_I2C_Master_Transmit(&hi2c1,
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	7fe1      	ldrb	r1, [r4, #31]
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <u8x8_byte_sw_i2c_my+0x74>)
 8001868:	9200      	str	r2, [sp, #0]
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <u8x8_byte_sw_i2c_my+0x70>)
 800186c:	f7fe ff66 	bl	800073c <HAL_I2C_Master_Transmit>
 8001870:	e7e7      	b.n	8001842 <u8x8_byte_sw_i2c_my+0x36>
      return 0;
 8001872:	2000      	movs	r0, #0
 8001874:	e7e6      	b.n	8001844 <u8x8_byte_sw_i2c_my+0x38>
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	20000088 	.word	0x20000088
 800187c:	20000089 	.word	0x20000089
 8001880:	200001e4 	.word	0x200001e4

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001886:	2410      	movs	r4, #16
{
 8001888:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	2230      	movs	r2, #48	; 0x30
 800188c:	2100      	movs	r1, #0
 800188e:	a808      	add	r0, sp, #32
 8001890:	f001 fa6d 	bl	8002d6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	0022      	movs	r2, r4
 8001896:	2100      	movs	r1, #0
 8001898:	4668      	mov	r0, sp
 800189a:	f001 fa68 	bl	8002d6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189e:	0022      	movs	r2, r4
 80018a0:	2100      	movs	r1, #0
 80018a2:	a804      	add	r0, sp, #16
 80018a4:	f001 fa63 	bl	8002d6e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a8:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018aa:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ac:	9308      	str	r3, [sp, #32]
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018ae:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b0:	3b01      	subs	r3, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f7ff f823 	bl	8000900 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ba:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018bc:	0021      	movs	r1, r4
 80018be:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018c2:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c6:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018c8:	f7ff fa2e 	bl	8000d28 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80018cc:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ce:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80018d0:	9304      	str	r3, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80018d2:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80018d4:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d6:	f7ff fad3 	bl	8000e80 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80018da:	b014      	add	sp, #80	; 0x50
 80018dc:	bd10      	pop	{r4, pc}
	...

080018e0 <main>:
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80018e4:	f7fe fcb8 	bl	8000258 <HAL_Init>
  test_struct_holder.screen_renderer[0] = render_time_value;
 80018e8:	4aba      	ldr	r2, [pc, #744]	; (8001bd4 <main+0x2f4>)
 80018ea:	4bbb      	ldr	r3, [pc, #748]	; (8001bd8 <main+0x2f8>)
  HAL_GPIO_WritePin(GPIOA, TRIAC_CONTROL_Pin|TEST_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TRIAC_CONTROL_Pin TEST_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC_CONTROL_Pin|TEST_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2400      	movs	r4, #0
  test_struct_holder.screen_renderer[0] = render_time_value;
 80018ee:	6053      	str	r3, [r2, #4]
  test_struct_holder.screen_renderer[1] = test_screen_function;
 80018f0:	4bba      	ldr	r3, [pc, #744]	; (8001bdc <main+0x2fc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f2:	2701      	movs	r7, #1
  test_struct_holder.screen_renderer[1] = test_screen_function;
 80018f4:	6093      	str	r3, [r2, #8]
  SystemClock_Config();
 80018f6:	f7ff ffc5 	bl	8001884 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	2214      	movs	r2, #20
 80018fc:	2100      	movs	r1, #0
 80018fe:	a805      	add	r0, sp, #20
 8001900:	f001 fa35 	bl	8002d6e <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	2080      	movs	r0, #128	; 0x80
 8001906:	4ab6      	ldr	r2, [pc, #728]	; (8001be0 <main+0x300>)
 8001908:	0280      	lsls	r0, r0, #10
 800190a:	6951      	ldr	r1, [r2, #20]
 800190c:	4301      	orrs	r1, r0
 800190e:	6151      	str	r1, [r2, #20]
 8001910:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, TRIAC_CONTROL_Pin|TEST_LED_Pin, GPIO_PIN_RESET);
 8001912:	2111      	movs	r1, #17
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4003      	ands	r3, r0
  HAL_GPIO_WritePin(GPIOA, TRIAC_CONTROL_Pin|TEST_LED_Pin, GPIO_PIN_RESET);
 8001916:	2090      	movs	r0, #144	; 0x90
 8001918:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, TRIAC_CONTROL_Pin|TEST_LED_Pin, GPIO_PIN_RESET);
 800191c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, TRIAC_CONTROL_Pin|TEST_LED_Pin, GPIO_PIN_RESET);
 8001920:	f7fe fdd2 	bl	80004c8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = TRIAC_CONTROL_Pin|TEST_LED_Pin;
 8001926:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	a905      	add	r1, sp, #20
 800192a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = TRIAC_CONTROL_Pin|TEST_LED_Pin;
 800192c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800192e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f7fe fd12 	bl	800035c <HAL_GPIO_Init>
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001938:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800193a:	2320      	movs	r3, #32
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800193c:	a905      	add	r1, sp, #20
 800193e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001940:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001942:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001946:	f7fe fd09 	bl	800035c <HAL_GPIO_Init>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800194a:	2214      	movs	r2, #20
 800194c:	0021      	movs	r1, r4
 800194e:	a805      	add	r0, sp, #20
 8001950:	f001 fa0d 	bl	8002d6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	2208      	movs	r2, #8
 8001956:	0021      	movs	r1, r4
 8001958:	a803      	add	r0, sp, #12
 800195a:	f001 fa08 	bl	8002d6e <memset>
  htim1.Instance = TIM1;
 800195e:	4ea1      	ldr	r6, [pc, #644]	; (8001be4 <main+0x304>)
 8001960:	4ba1      	ldr	r3, [pc, #644]	; (8001be8 <main+0x308>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001962:	0030      	movs	r0, r6
  htim1.Instance = TIM1;
 8001964:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = 8;
 8001966:	2308      	movs	r3, #8
 8001968:	6073      	str	r3, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800196a:	18db      	adds	r3, r3, r3
 800196c:	60b3      	str	r3, [r6, #8]
  htim1.Init.Period = 1000;
 800196e:	23fa      	movs	r3, #250	; 0xfa
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8001976:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800197a:	f7ff fc2d 	bl	80011d8 <HAL_TIM_Base_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800197e:	2304      	movs	r3, #4
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8001980:	a905      	add	r1, sp, #20
 8001982:	0030      	movs	r0, r6
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001984:	9305      	str	r3, [sp, #20]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001986:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8001988:	f7ff fcea 	bl	8001360 <HAL_TIM_SlaveConfigSynchronization>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800198c:	a903      	add	r1, sp, #12
 800198e:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001994:	f7ff fd04 	bl	80013a0 <HAL_TIMEx_MasterConfigSynchronization>
  hi2c1.Instance = I2C1;
 8001998:	4d94      	ldr	r5, [pc, #592]	; (8001bec <main+0x30c>)
 800199a:	4b95      	ldr	r3, [pc, #596]	; (8001bf0 <main+0x310>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800199c:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 800199e:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80019a0:	4b94      	ldr	r3, [pc, #592]	; (8001bf4 <main+0x314>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a2:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.Timing = 0x0000020B;
 80019a4:	606b      	str	r3, [r5, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019a6:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a8:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019aa:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019ac:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ae:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b0:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b2:	f7fe fe6d 	bl	8000690 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019b6:	0021      	movs	r1, r4
 80019b8:	0028      	movs	r0, r5
 80019ba:	f7fe ff57 	bl	800086c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019be:	0021      	movs	r1, r4
 80019c0:	0028      	movs	r0, r5
 80019c2:	f7fe ff79 	bl	80008b8 <HAL_I2CEx_ConfigDigitalFilter>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019c6:	2224      	movs	r2, #36	; 0x24
 80019c8:	0021      	movs	r1, r4
 80019ca:	a805      	add	r0, sp, #20
 80019cc:	f001 f9cf 	bl	8002d6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	2208      	movs	r2, #8
 80019d2:	0021      	movs	r1, r4
 80019d4:	a803      	add	r0, sp, #12
 80019d6:	f001 f9ca 	bl	8002d6e <memset>
  htim3.Instance = TIM3;
 80019da:	4d87      	ldr	r5, [pc, #540]	; (8001bf8 <main+0x318>)
 80019dc:	4b87      	ldr	r3, [pc, #540]	; (8001bfc <main+0x31c>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019de:	a905      	add	r1, sp, #20
  htim3.Instance = TIM3;
 80019e0:	602b      	str	r3, [r5, #0]
  htim3.Init.Period = 65535;
 80019e2:	4b87      	ldr	r3, [pc, #540]	; (8001c00 <main+0x320>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019e4:	0028      	movs	r0, r5
  htim3.Init.Period = 65535;
 80019e6:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019e8:	9705      	str	r7, [sp, #20]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019ea:	9707      	str	r7, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ec:	970b      	str	r7, [sp, #44]	; 0x2c
  htim3.Init.Prescaler = 0;
 80019ee:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019f6:	f7ff fc0b 	bl	8001210 <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fa:	a903      	add	r1, sp, #12
 80019fc:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fe:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a00:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a02:	f7ff fccd 	bl	80013a0 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Instance = USART1;
 8001a06:	4f7f      	ldr	r7, [pc, #508]	; (8001c04 <main+0x324>)
 8001a08:	4b7f      	ldr	r3, [pc, #508]	; (8001c08 <main+0x328>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0a:	0038      	movs	r0, r7
  huart1.Instance = USART1;
 8001a0c:	603b      	str	r3, [r7, #0]
  huart1.Init.BaudRate = 115200;
 8001a0e:	23e1      	movs	r3, #225	; 0xe1
 8001a10:	025b      	lsls	r3, r3, #9
 8001a12:	607b      	str	r3, [r7, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a14:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	60bc      	str	r4, [r7, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	617b      	str	r3, [r7, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a1a:	60fc      	str	r4, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1c:	613c      	str	r4, [r7, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	61bc      	str	r4, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	61fc      	str	r4, [r7, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	623c      	str	r4, [r7, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a24:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a26:	f7ff fdcb 	bl	80015c0 <HAL_UART_Init>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_1);
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	0028      	movs	r0, r5
 8001a2e:	f7ff fab5 	bl	8000f9c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001a32:	0030      	movs	r0, r6
 8001a34:	f7ff faa8 	bl	8000f88 <HAL_TIM_Base_Start_IT>
  u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2,
 8001a38:	4b74      	ldr	r3, [pc, #464]	; (8001c0c <main+0x32c>)
 8001a3a:	4a75      	ldr	r2, [pc, #468]	; (8001c10 <main+0x330>)
 8001a3c:	4975      	ldr	r1, [pc, #468]	; (8001c14 <main+0x334>)
 8001a3e:	4876      	ldr	r0, [pc, #472]	; (8001c18 <main+0x338>)
 8001a40:	f000 fae8 	bl	8002014 <u8g2_Setup_ssd1306_i2c_128x32_univision_1>
  u8g2_InitDisplay(&u8g2);
 8001a44:	4874      	ldr	r0, [pc, #464]	; (8001c18 <main+0x338>)
 8001a46:	f001 f8f3 	bl	8002c30 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8001a4a:	4873      	ldr	r0, [pc, #460]	; (8001c18 <main+0x338>)
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	f001 f8f6 	bl	8002c3e <u8x8_SetPowerSave>
  u8g2_FirstPage(&u8g2);
 8001a52:	4871      	ldr	r0, [pc, #452]	; (8001c18 <main+0x338>)
 8001a54:	f000 faa7 	bl	8001fa6 <u8g2_FirstPage>
		test_struct_holder.screen_renderer[0](welding_timeout);
 8001a58:	4c70      	ldr	r4, [pc, #448]	; (8001c1c <main+0x33c>)
 8001a5a:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <main+0x2f4>)
 8001a5c:	8820      	ldrh	r0, [r4, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	b280      	uxth	r0, r0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4798      	blx	r3
  		test_struct_holder.screen_renderer[1](0x00);
 8001a66:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <main+0x2f4>)
 8001a68:	2000      	movs	r0, #0
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4798      	blx	r3
	} while (u8g2_NextPage(&u8g2));
 8001a70:	4869      	ldr	r0, [pc, #420]	; (8001c18 <main+0x338>)
 8001a72:	f000 faa6 	bl	8001fc2 <u8g2_NextPage>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d1ee      	bne.n	8001a58 <main+0x178>
					HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_RESET);
 8001a7a:	9001      	str	r0, [sp, #4]
			if ( ! HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin)) {
 8001a7c:	2090      	movs	r0, #144	; 0x90
	if (button_pressed_flag == 0) {
 8001a7e:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <main+0x340>)
 8001a80:	4e68      	ldr	r6, [pc, #416]	; (8001c24 <main+0x344>)
 8001a82:	781d      	ldrb	r5, [r3, #0]
			if ( ! HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin)) {
 8001a84:	2120      	movs	r1, #32
	if (button_pressed_flag == 0) {
 8001a86:	b2ed      	uxtb	r5, r5
		if (button_debouncing_flag == 0) {
 8001a88:	7833      	ldrb	r3, [r6, #0]
			if ( ! HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin)) {
 8001a8a:	05c0      	lsls	r0, r0, #23
	if (button_pressed_flag == 0) {
 8001a8c:	2d00      	cmp	r5, #0
 8001a8e:	d000      	beq.n	8001a92 <main+0x1b2>
 8001a90:	e07a      	b.n	8001b88 <main+0x2a8>
		if (button_debouncing_flag == 0) {
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <main+0x1ca>
			if ( ! HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin)) {
 8001a96:	f7fe fd11 	bl	80004bc <HAL_GPIO_ReadPin>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d12e      	bne.n	8001afc <main+0x21c>
				button_debouncing_flag = 1;
 8001a9e:	2301      	movs	r3, #1
				button_debounce_timeout_counter = BUTTON_DEBOUNCE_TIMEOUT_PRESS;
 8001aa0:	221e      	movs	r2, #30
				button_debouncing_flag = 1;
 8001aa2:	7033      	strb	r3, [r6, #0]
				button_debounce_timeout_counter = BUTTON_DEBOUNCE_TIMEOUT_RELEASE;
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <main+0x348>)
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	e028      	b.n	8001afc <main+0x21c>
			if (! HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin)) {
 8001aaa:	f7fe fd07 	bl	80004bc <HAL_GPIO_ReadPin>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d166      	bne.n	8001b80 <main+0x2a0>
				if (button_debounce_timeout_counter == 0) {
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <main+0x348>)
 8001ab4:	881d      	ldrh	r5, [r3, #0]
 8001ab6:	b2ad      	uxth	r5, r5
 8001ab8:	2d00      	cmp	r5, #0
 8001aba:	d11f      	bne.n	8001afc <main+0x21c>
					button_pressed_flag = 1;
 8001abc:	2201      	movs	r2, #1
					HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_SET);
 8001abe:	2090      	movs	r0, #144	; 0x90
					button_pressed_flag = 1;
 8001ac0:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <main+0x340>)
					HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_SET);
 8001ac2:	2111      	movs	r1, #17
					button_debouncing_flag = 0;
 8001ac4:	7035      	strb	r5, [r6, #0]
					HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_SET);
 8001ac6:	05c0      	lsls	r0, r0, #23
					button_pressed_flag = 1;
 8001ac8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	f7fe fcfc 	bl	80004c8 <HAL_GPIO_WritePin>
					HAL_Delay(75);
 8001ad0:	204b      	movs	r0, #75	; 0x4b
 8001ad2:	f7fe fbdf 	bl	8000294 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_RESET);
 8001ad6:	2090      	movs	r0, #144	; 0x90
 8001ad8:	002a      	movs	r2, r5
 8001ada:	2111      	movs	r1, #17
 8001adc:	05c0      	lsls	r0, r0, #23
 8001ade:	f7fe fcf3 	bl	80004c8 <HAL_GPIO_WritePin>
					HAL_Delay(50);
 8001ae2:	2032      	movs	r0, #50	; 0x32
 8001ae4:	f7fe fbd6 	bl	8000294 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_SET);
 8001ae8:	2090      	movs	r0, #144	; 0x90
					welding_timeout_counter = welding_timeout;
 8001aea:	8823      	ldrh	r3, [r4, #0]
 8001aec:	4a4f      	ldr	r2, [pc, #316]	; (8001c2c <main+0x34c>)
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	8013      	strh	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_SET);
 8001af2:	2111      	movs	r1, #17
 8001af4:	2201      	movs	r2, #1
 8001af6:	05c0      	lsls	r0, r0, #23
 8001af8:	f7fe fce6 	bl	80004c8 <HAL_GPIO_WritePin>
	  if (timer_updated_flag == 1) {
 8001afc:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <main+0x350>)
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	2a01      	cmp	r2, #1
 8001b02:	d1bb      	bne.n	8001a7c <main+0x19c>
		  timer_updated_flag = 0;
 8001b04:	466a      	mov	r2, sp
 8001b06:	7912      	ldrb	r2, [r2, #4]
 8001b08:	701a      	strb	r2, [r3, #0]
		  if (encoderDebounceCounter == 0) {
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <main+0x354>)
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d115      	bne.n	8001b3e <main+0x25e>
			  encoderDebounceCounter = ENCODER_DEBUONCE_TIMEOUT;
 8001b12:	2164      	movs	r1, #100	; 0x64
			  if (timer_value_shadow < timer_value) {
 8001b14:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <main+0x358>)
			  encoderDebounceCounter = ENCODER_DEBUONCE_TIMEOUT;
 8001b16:	7019      	strb	r1, [r3, #0]
			  if (timer_value_shadow < timer_value) {
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <main+0x35c>)
 8001b1a:	8810      	ldrh	r0, [r2, #0]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	4298      	cmp	r0, r3
 8001b20:	d24e      	bcs.n	8001bc0 <main+0x2e0>
				  welding_timeout += 50;
 8001b22:	8823      	ldrh	r3, [r4, #0]
 8001b24:	3332      	adds	r3, #50	; 0x32
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	8023      	strh	r3, [r4, #0]
				  if (welding_timeout > WELDING_TIMEOUT_MAX) {
 8001b2a:	23fa      	movs	r3, #250	; 0xfa
 8001b2c:	8821      	ldrh	r1, [r4, #0]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d900      	bls.n	8001b36 <main+0x256>
					  welding_timeout = WELDING_TIMEOUT_MAX;
 8001b34:	8023      	strh	r3, [r4, #0]
			  timer_value_shadow = timer_value;
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <main+0x35c>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	8013      	strh	r3, [r2, #0]
			u8g2_FirstPage(&u8g2);
 8001b3e:	4836      	ldr	r0, [pc, #216]	; (8001c18 <main+0x338>)
 8001b40:	f000 fa31 	bl	8001fa6 <u8g2_FirstPage>
				test_struct_holder.screen_renderer[0](welding_timeout);
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <main+0x2f4>)
 8001b46:	8820      	ldrh	r0, [r4, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	b280      	uxth	r0, r0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4798      	blx	r3
				test_struct_holder.screen_renderer[1](0);
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <main+0x2f4>)
 8001b52:	2000      	movs	r0, #0
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	4798      	blx	r3
			} while (u8g2_NextPage(&u8g2));
 8001b5a:	482f      	ldr	r0, [pc, #188]	; (8001c18 <main+0x338>)
 8001b5c:	f000 fa31 	bl	8001fc2 <u8g2_NextPage>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d1ef      	bne.n	8001b44 <main+0x264>
			sprintf (str, "%d \r\n", timer_value);
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <main+0x35c>)
 8001b66:	4936      	ldr	r1, [pc, #216]	; (8001c40 <main+0x360>)
 8001b68:	881a      	ldrh	r2, [r3, #0]
 8001b6a:	a805      	add	r0, sp, #20
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	f001 f907 	bl	8002d80 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, 10, 50);
 8001b72:	2332      	movs	r3, #50	; 0x32
 8001b74:	220a      	movs	r2, #10
 8001b76:	a905      	add	r1, sp, #20
 8001b78:	0038      	movs	r0, r7
 8001b7a:	f7ff fd8f 	bl	800169c <HAL_UART_Transmit>
 8001b7e:	e77d      	b.n	8001a7c <main+0x19c>
				button_pressed_flag = 0;
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <main+0x340>)
				button_debouncing_flag = 0;
 8001b82:	7035      	strb	r5, [r6, #0]
				button_pressed_flag = 0;
 8001b84:	701d      	strb	r5, [r3, #0]
 8001b86:	e7b9      	b.n	8001afc <main+0x21c>
		if (button_debouncing_flag == 0) {
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <main+0x2bc>
			if (HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin)) { /* change */
 8001b8c:	f7fe fc96 	bl	80004bc <HAL_GPIO_ReadPin>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d0b3      	beq.n	8001afc <main+0x21c>
				button_debouncing_flag = 1;
 8001b94:	2301      	movs	r3, #1
				button_debounce_timeout_counter = BUTTON_DEBOUNCE_TIMEOUT_RELEASE;
 8001b96:	2264      	movs	r2, #100	; 0x64
				button_debouncing_flag = 1;
 8001b98:	7033      	strb	r3, [r6, #0]
 8001b9a:	e783      	b.n	8001aa4 <main+0x1c4>
			if (HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin)) { /* change */
 8001b9c:	f7fe fc8e 	bl	80004bc <HAL_GPIO_ReadPin>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d008      	beq.n	8001bb6 <main+0x2d6>
				if (button_debounce_timeout_counter == 0) {
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <main+0x348>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1a6      	bne.n	8001afc <main+0x21c>
					button_pressed_flag = 0; /* change */
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <main+0x340>)
					button_debouncing_flag = 0;
 8001bb0:	7033      	strb	r3, [r6, #0]
					button_pressed_flag = 0; /* change */
 8001bb2:	7013      	strb	r3, [r2, #0]
 8001bb4:	e7a2      	b.n	8001afc <main+0x21c>
				button_pressed_flag = 1; /* change */
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <main+0x340>)
				button_debouncing_flag = 0;
 8001bba:	7030      	strb	r0, [r6, #0]
				button_pressed_flag = 1; /* change */
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e79d      	b.n	8001afc <main+0x21c>
				  welding_timeout -= 50;
 8001bc0:	8823      	ldrh	r3, [r4, #0]
 8001bc2:	3b32      	subs	r3, #50	; 0x32
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	8023      	strh	r3, [r4, #0]
				  if (welding_timeout < WELDING_TIMEOUT_MIN) {
 8001bc8:	8823      	ldrh	r3, [r4, #0]
 8001bca:	2b63      	cmp	r3, #99	; 0x63
 8001bcc:	d8b3      	bhi.n	8001b36 <main+0x256>
					  welding_timeout = WELDING_TIMEOUT_MIN;
 8001bce:	8021      	strh	r1, [r4, #0]
 8001bd0:	e7b1      	b.n	8001b36 <main+0x256>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	200001d4 	.word	0x200001d4
 8001bd8:	080017a1 	.word	0x080017a1
 8001bdc:	08001769 	.word	0x08001769
 8001be0:	40021000 	.word	0x40021000
 8001be4:	200002e0 	.word	0x200002e0
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	200001e4 	.word	0x200001e4
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	0000020b 	.word	0x0000020b
 8001bf8:	200002a0 	.word	0x200002a0
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	0000ffff 	.word	0x0000ffff
 8001c04:	20000230 	.word	0x20000230
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	080017f1 	.word	0x080017f1
 8001c10:	0800180d 	.word	0x0800180d
 8001c14:	08003e6c 	.word	0x08003e6c
 8001c18:	200000b4 	.word	0x200000b4
 8001c1c:	20000002 	.word	0x20000002
 8001c20:	200000aa 	.word	0x200000aa
 8001c24:	200000a9 	.word	0x200000a9
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	2000013c 	.word	0x2000013c
 8001c30:	200000ac 	.word	0x200000ac
 8001c34:	200000ab 	.word	0x200000ab
 8001c38:	200000b0 	.word	0x200000b0
 8001c3c:	200000ae 	.word	0x200000ae
 8001c40:	080035ec 	.word	0x080035ec

08001c44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c44:	2001      	movs	r0, #1
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_MspInit+0x2c>)
{
 8001c48:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	6999      	ldr	r1, [r3, #24]
 8001c4c:	4301      	orrs	r1, r0
 8001c4e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c50:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c54:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4002      	ands	r2, r0
 8001c58:	9200      	str	r2, [sp, #0]
 8001c5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	61da      	str	r2, [r3, #28]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	400b      	ands	r3, r1
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6a:	b002      	add	sp, #8
 8001c6c:	4770      	bx	lr
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c74:	b510      	push	{r4, lr}
 8001c76:	0004      	movs	r4, r0
 8001c78:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	2214      	movs	r2, #20
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	a803      	add	r0, sp, #12
 8001c80:	f001 f875 	bl	8002d6e <memset>
  if(hi2c->Instance==I2C1)
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_I2C_MspInit+0x64>)
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d122      	bne.n	8001cd2 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	4c13      	ldr	r4, [pc, #76]	; (8001cdc <HAL_I2C_MspInit+0x68>)
 8001c90:	0289      	lsls	r1, r1, #10
 8001c92:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	430a      	orrs	r2, r1
 8001c98:	6162      	str	r2, [r4, #20]
 8001c9a:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ca4:	23c0      	movs	r3, #192	; 0xc0
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001caa:	2312      	movs	r3, #18
 8001cac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cae:	3b11      	subs	r3, #17
 8001cb0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb8:	3301      	adds	r3, #1
 8001cba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f7fe fb4e 	bl	800035c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	69e2      	ldr	r2, [r4, #28]
 8001cc4:	0389      	lsls	r1, r1, #14
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	61e2      	str	r2, [r4, #28]
 8001cca:	69e3      	ldr	r3, [r4, #28]
 8001ccc:	400b      	ands	r3, r1
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cd2:	b008      	add	sp, #32
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce0:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_TIM_Base_MspInit+0x30>)
 8001ce4:	6802      	ldr	r2, [r0, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d111      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cea:	2080      	movs	r0, #128	; 0x80
 8001cec:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_TIM_Base_MspInit+0x34>)
 8001cee:	0100      	lsls	r0, r0, #4
 8001cf0:	6991      	ldr	r1, [r2, #24]
 8001cf2:	4301      	orrs	r1, r0
 8001cf4:	6191      	str	r1, [r2, #24]
 8001cf6:	6993      	ldr	r3, [r2, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	4003      	ands	r3, r0
 8001cfc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001cfe:	200d      	movs	r0, #13
 8001d00:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001d04:	f7fe fad6 	bl	80002b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001d08:	200d      	movs	r0, #13
 8001d0a:	f7fe fb03 	bl	8000314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d0e:	bd07      	pop	{r0, r1, r2, pc}
 8001d10:	40012c00 	.word	0x40012c00
 8001d14:	40021000 	.word	0x40021000

08001d18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	0004      	movs	r4, r0
 8001d1c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1e:	2214      	movs	r2, #20
 8001d20:	2100      	movs	r1, #0
 8001d22:	a803      	add	r0, sp, #12
 8001d24:	f001 f823 	bl	8002d6e <memset>
  if(htim_encoder->Instance==TIM3)
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x68>)
 8001d2a:	6822      	ldr	r2, [r4, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d124      	bne.n	8001d7a <HAL_TIM_Encoder_MspInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d30:	2202      	movs	r2, #2
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	0280      	lsls	r0, r0, #10
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d38:	69d9      	ldr	r1, [r3, #28]
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	61d9      	str	r1, [r3, #28]
 8001d3e:	69d9      	ldr	r1, [r3, #28]
 8001d40:	4011      	ands	r1, r2
 8001d42:	9101      	str	r1, [sp, #4]
 8001d44:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	6959      	ldr	r1, [r3, #20]
 8001d48:	4301      	orrs	r1, r0
 8001d4a:	6159      	str	r1, [r3, #20]
 8001d4c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = ENCODER_3_Pin|ENCODER_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	4003      	ands	r3, r0
 8001d52:	9302      	str	r3, [sp, #8]
 8001d54:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = ENCODER_3_Pin|ENCODER_2_Pin;
 8001d58:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = ENCODER_3_Pin|ENCODER_2_Pin;
 8001d5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5e:	3bbf      	subs	r3, #191	; 0xbf
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001d64:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f7fe faf9 	bl	800035c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2010      	movs	r0, #16
 8001d6e:	0011      	movs	r1, r2
 8001d70:	f7fe faa0 	bl	80002b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d74:	2010      	movs	r0, #16
 8001d76:	f7fe facd 	bl	8000314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d7a:	b008      	add	sp, #32
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	0004      	movs	r4, r0
 8001d8c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	2214      	movs	r2, #20
 8001d90:	2100      	movs	r1, #0
 8001d92:	a803      	add	r0, sp, #12
 8001d94:	f000 ffeb 	bl	8002d6e <memset>
  if(huart->Instance==USART1)
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_UART_MspInit+0x5c>)
 8001d9a:	6822      	ldr	r2, [r4, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d11f      	bne.n	8001de0 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da0:	2080      	movs	r0, #128	; 0x80
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_UART_MspInit+0x60>)
 8001da4:	01c0      	lsls	r0, r0, #7
 8001da6:	6999      	ldr	r1, [r3, #24]
 8001da8:	4301      	orrs	r1, r0
 8001daa:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dae:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db2:	4002      	ands	r2, r0
 8001db4:	9201      	str	r2, [sp, #4]
 8001db6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dca:	230c      	movs	r3, #12
 8001dcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	3b0a      	subs	r3, #10
 8001dd0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001dd8:	3b02      	subs	r3, #2
 8001dda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f7fe fabe 	bl	800035c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001de0:	b008      	add	sp, #32
 8001de2:	bd10      	pop	{r4, pc}
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40021000 	.word	0x40021000

08001dec <NMI_Handler>:
 8001dec:	4770      	bx	lr

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler>

08001df0 <SVC_Handler>:
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */


	if (encoderDebounceCounter > 1) {
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <SysTick_Handler+0x30>)
 8001df8:	7813      	ldrb	r3, [r2, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d90e      	bls.n	8001e1c <SysTick_Handler+0x28>
		encoderDebounceCounter--;
 8001dfe:	7813      	ldrb	r3, [r2, #0]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b2db      	uxtb	r3, r3
	} else {
		encoderDebounceCounter = 0;
 8001e04:	7013      	strb	r3, [r2, #0]
	}


	if (button_debounce_timeout_counter > 1) {
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <SysTick_Handler+0x34>)
 8001e08:	8813      	ldrh	r3, [r2, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d908      	bls.n	8001e20 <SysTick_Handler+0x2c>
		button_debounce_timeout_counter--;
 8001e0e:	8813      	ldrh	r3, [r2, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29b      	uxth	r3, r3
	} else {
		button_debounce_timeout_counter = 0;
 8001e14:	8013      	strh	r3, [r2, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e16:	f7fe fa2f 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1a:	bd10      	pop	{r4, pc}
		encoderDebounceCounter = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e7f1      	b.n	8001e04 <SysTick_Handler+0x10>
		button_debounce_timeout_counter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e7f7      	b.n	8001e14 <SysTick_Handler+0x20>
 8001e24:	200000ab 	.word	0x200000ab
 8001e28:	20000000 	.word	0x20000000

08001e2c <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

	if (welding_timeout_counter >= 1) {
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
{
 8001e2e:	b510      	push	{r4, lr}
	if (welding_timeout_counter >= 1) {
 8001e30:	8813      	ldrh	r3, [r2, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>
		welding_timeout_counter--;
 8001e36:	8813      	ldrh	r3, [r2, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	8013      	strh	r3, [r2, #0]

		if (welding_timeout_counter == 0) {
 8001e3e:	8812      	ldrh	r2, [r2, #0]
 8001e40:	b292      	uxth	r2, r2
 8001e42:	2a00      	cmp	r2, #0
 8001e44:	d104      	bne.n	8001e50 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>
			HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | TRIAC_CONTROL_Pin, GPIO_PIN_RESET);
 8001e46:	2090      	movs	r0, #144	; 0x90
 8001e48:	2111      	movs	r1, #17
 8001e4a:	05c0      	lsls	r0, r0, #23
 8001e4c:	f7fe fb3c 	bl	80004c8 <HAL_GPIO_WritePin>
		}
	}

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>)
 8001e52:	f7ff f8dd 	bl	8001010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001e56:	bd10      	pop	{r4, pc}
 8001e58:	2000013c 	.word	0x2000013c
 8001e5c:	200002e0 	.word	0x200002e0

08001e60 <TIM3_IRQHandler>:
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

	timer_updated_flag = 1;
 8001e60:	2201      	movs	r2, #1
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <TIM3_IRQHandler+0x1c>)
	timer_value = __HAL_TIM_GET_COUNTER(&htim3);
 8001e64:	4806      	ldr	r0, [pc, #24]	; (8001e80 <TIM3_IRQHandler+0x20>)
{
 8001e66:	b510      	push	{r4, lr}
	timer_updated_flag = 1;
 8001e68:	701a      	strb	r2, [r3, #0]
	timer_value = __HAL_TIM_GET_COUNTER(&htim3);
 8001e6a:	6803      	ldr	r3, [r0, #0]
 8001e6c:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <TIM3_IRQHandler+0x24>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e74:	f7ff f8cc 	bl	8001010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	200000ac 	.word	0x200000ac
 8001e80:	200002a0 	.word	0x200002a0
 8001e84:	200000ae 	.word	0x200000ae

08001e88 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <_sbrk+0x2c>)
{
 8001e8a:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8001e8c:	6819      	ldr	r1, [r3, #0]
{
 8001e8e:	0002      	movs	r2, r0
	if (heap_end == 0)
 8001e90:	2900      	cmp	r1, #0
 8001e92:	d101      	bne.n	8001e98 <_sbrk+0x10>
		heap_end = &end;
 8001e94:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <_sbrk+0x30>)
 8001e96:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001e98:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001e9a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001e9c:	1882      	adds	r2, r0, r2
 8001e9e:	428a      	cmp	r2, r1
 8001ea0:	d906      	bls.n	8001eb0 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001ea2:	f000 ff31 	bl	8002d08 <__errno>
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001eaa:	2001      	movs	r0, #1
 8001eac:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001eae:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001eb0:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001eb2:	e7fc      	b.n	8001eae <_sbrk+0x26>
 8001eb4:	20000140 	.word	0x20000140
 8001eb8:	20000324 	.word	0x20000324

08001ebc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001ec0:	4811      	ldr	r0, [pc, #68]	; (8001f08 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4002      	ands	r2, r0
 8001ecc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	480e      	ldr	r0, [pc, #56]	; (8001f0c <SystemInit+0x50>)
 8001ed2:	4002      	ands	r2, r0
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <SystemInit+0x54>)
 8001eda:	4002      	ands	r2, r0
 8001edc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <SystemInit+0x58>)
 8001ee2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ee4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001ee6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	4382      	bics	r2, r0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef0:	4809      	ldr	r0, [pc, #36]	; (8001f18 <SystemInit+0x5c>)
 8001ef2:	4002      	ands	r2, r0
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef8:	438a      	bics	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]

}
 8001f00:	4770      	bx	lr
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08ffb80c 	.word	0x08ffb80c
 8001f0c:	fef6ffff 	.word	0xfef6ffff
 8001f10:	fffbffff 	.word	0xfffbffff
 8001f14:	ffc0ffff 	.word	0xffc0ffff
 8001f18:	fffffeec 	.word	0xfffffeec

08001f1c <u8g2_send_buffer>:
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
 8001f1c:	0003      	movs	r3, r0
{
 8001f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  src_max = u8g2->tile_buf_height;
 8001f20:	333c      	adds	r3, #60	; 0x3c
 8001f22:	781b      	ldrb	r3, [r3, #0]
{
 8001f24:	b085      	sub	sp, #20
  src_max = u8g2->tile_buf_height;
 8001f26:	9302      	str	r3, [sp, #8]
  dest_row = u8g2->tile_curr_row;
 8001f28:	0003      	movs	r3, r0
{
 8001f2a:	0005      	movs	r5, r0
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001f2c:	2600      	movs	r6, #0
  dest_row = u8g2->tile_curr_row;
 8001f2e:	333d      	adds	r3, #61	; 0x3d
 8001f30:	781f      	ldrb	r7, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001f32:	6803      	ldr	r3, [r0, #0]
 8001f34:	7c5b      	ldrb	r3, [r3, #17]
 8001f36:	9303      	str	r3, [sp, #12]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f38:	682b      	ldr	r3, [r5, #0]
  offset = src_tile_row;
 8001f3a:	b2b0      	uxth	r0, r6
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f3c:	7c1b      	ldrb	r3, [r3, #16]
 8001f3e:	b2f4      	uxtb	r4, r6
  offset *= 8;
 8001f40:	00d9      	lsls	r1, r3, #3
 8001f42:	4341      	muls	r1, r0
  ptr += offset;
 8001f44:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001f46:	b289      	uxth	r1, r1
 8001f48:	1841      	adds	r1, r0, r1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f4a:	193a      	adds	r2, r7, r4
 8001f4c:	9100      	str	r1, [sp, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	2100      	movs	r1, #0
 8001f52:	0028      	movs	r0, r5
 8001f54:	f000 fe58 	bl	8002c08 <u8x8_DrawTile>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8001f58:	3401      	adds	r4, #1
 8001f5a:	9b02      	ldr	r3, [sp, #8]
 8001f5c:	b2e4      	uxtb	r4, r4
 8001f5e:	42a3      	cmp	r3, r4
 8001f60:	d905      	bls.n	8001f6e <u8g2_send_buffer+0x52>
 8001f62:	3601      	adds	r6, #1
 8001f64:	19bb      	adds	r3, r7, r6
 8001f66:	9a03      	ldr	r2, [sp, #12]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d8e4      	bhi.n	8001f38 <u8g2_send_buffer+0x1c>
}
 8001f6e:	b005      	add	sp, #20
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f72 <u8g2_ClearBuffer>:
{
 8001f72:	b510      	push	{r4, lr}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f74:	6803      	ldr	r3, [r0, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f76:	2100      	movs	r1, #0
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f78:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	333c      	adds	r3, #60	; 0x3c
 8001f7e:	781b      	ldrb	r3, [r3, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f80:	6b80      	ldr	r0, [r0, #56]	; 0x38
  cnt *= 8;
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	435a      	muls	r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f86:	f000 fef2 	bl	8002d6e <memset>
}
 8001f8a:	bd10      	pop	{r4, pc}

08001f8c <u8g2_SetBufferCurrTileRow>:
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
 8001f8c:	0003      	movs	r3, r0
{
 8001f8e:	b510      	push	{r4, lr}
 8001f90:	0004      	movs	r4, r0
  u8g2->tile_curr_row = row;
 8001f92:	333d      	adds	r3, #61	; 0x3d
 8001f94:	7019      	strb	r1, [r3, #0]
  u8g2->cb->update_dimension(u8g2);
 8001f96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4798      	blx	r3
}
 8001fa4:	bd10      	pop	{r4, pc}

08001fa6 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
  if ( u8g2->is_auto_page_clear )
 8001fa6:	0003      	movs	r3, r0
{
 8001fa8:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 8001faa:	3387      	adds	r3, #135	; 0x87
 8001fac:	781b      	ldrb	r3, [r3, #0]
{
 8001fae:	0004      	movs	r4, r0
  if ( u8g2->is_auto_page_clear )
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <u8g2_FirstPage+0x12>
  {
    u8g2_ClearBuffer(u8g2);
 8001fb4:	f7ff ffdd 	bl	8001f72 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	0020      	movs	r0, r4
 8001fbc:	f7ff ffe6 	bl	8001f8c <u8g2_SetBufferCurrTileRow>
}
 8001fc0:	bd10      	pop	{r4, pc}

08001fc2 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001fc2:	b570      	push	{r4, r5, r6, lr}
 8001fc4:	0004      	movs	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001fc6:	f7ff ffa9 	bl	8001f1c <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001fca:	0023      	movs	r3, r4
 8001fcc:	333d      	adds	r3, #61	; 0x3d
 8001fce:	781d      	ldrb	r5, [r3, #0]
  row += u8g2->tile_buf_height;
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	18ed      	adds	r5, r5, r3
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fd6:	6823      	ldr	r3, [r4, #0]
  row += u8g2->tile_buf_height;
 8001fd8:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fda:	7c5b      	ldrb	r3, [r3, #17]
 8001fdc:	42ab      	cmp	r3, r5
 8001fde:	d804      	bhi.n	8001fea <u8g2_NextPage+0x28>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	f000 fe33 	bl	8002c4c <u8x8_RefreshDisplay>
    return 0;
 8001fe6:	2000      	movs	r0, #0
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
  if ( u8g2->is_auto_page_clear )
 8001fea:	0023      	movs	r3, r4
 8001fec:	3387      	adds	r3, #135	; 0x87
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <u8g2_NextPage+0x38>
    u8g2_ClearBuffer(u8g2);
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	f7ff ffbc 	bl	8001f72 <u8g2_ClearBuffer>
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001ffa:	0020      	movs	r0, r4
 8001ffc:	0029      	movs	r1, r5
 8001ffe:	f7ff ffc5 	bl	8001f8c <u8g2_SetBufferCurrTileRow>
  return 1;
 8002002:	2001      	movs	r0, #1
 8002004:	e7f0      	b.n	8001fe8 <u8g2_NextPage+0x26>
	...

08002008 <u8g2_m_16_4_1>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
 8002008:	2301      	movs	r3, #1
 800200a:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
 800200c:	4800      	ldr	r0, [pc, #0]	; (8002010 <u8g2_m_16_4_1+0x8>)
 800200e:	4770      	bx	lr
 8002010:	20000144 	.word	0x20000144

08002014 <u8g2_Setup_ssd1306_i2c_128x32_univision_1>:
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 */
/* ssd1306 1 */
void u8g2_Setup_ssd1306_i2c_128x32_univision_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_4_1(&tile_buf_height);
 8002016:	250f      	movs	r5, #15
{
 8002018:	000e      	movs	r6, r1
  buf = u8g2_m_16_4_1(&tile_buf_height);
 800201a:	446d      	add	r5, sp
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x2c>)
 8002020:	0013      	movs	r3, r2
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x30>)
{
 8002024:	0004      	movs	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002026:	f000 fe35 	bl	8002c94 <u8x8_Setup>
  buf = u8g2_m_16_4_1(&tile_buf_height);
 800202a:	0028      	movs	r0, r5
 800202c:	f7ff ffec 	bl	8002008 <u8g2_m_16_4_1>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002030:	782a      	ldrb	r2, [r5, #0]
  buf = u8g2_m_16_4_1(&tile_buf_height);
 8002032:	0001      	movs	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002034:	9600      	str	r6, [sp, #0]
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x34>)
 8002038:	0020      	movs	r0, r4
 800203a:	f000 fc21 	bl	8002880 <u8g2_SetupBuffer>
}
 800203e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002040:	08002b85 	.word	0x08002b85
 8002044:	080029e9 	.word	0x080029e9
 8002048:	080026b3 	.word	0x080026b3

0800204c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 800204c:	1841      	adds	r1, r0, r1
    pos = u8x8_pgm_read( font );
 800204e:	7808      	ldrb	r0, [r1, #0]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8002050:	784b      	ldrb	r3, [r1, #1]
    pos <<= 8;
 8002052:	0200      	lsls	r0, r0, #8
    pos += u8x8_pgm_read( font);
 8002054:	18c0      	adds	r0, r0, r3
    return pos;
 8002056:	b280      	uxth	r0, r0
}
 8002058:	4770      	bx	lr

0800205a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800205a:	b520      	push	{r5, lr}
 800205c:	0005      	movs	r5, r0
  {
    case 0:
      dy += y;
      break;
    case 1:
      dy += x;
 800205e:	1840      	adds	r0, r0, r1
 8002060:	b2c0      	uxtb	r0, r0
  switch(dir)
 8002062:	2b01      	cmp	r3, #1
 8002064:	d009      	beq.n	800207a <u8g2_add_vector_y+0x20>
      dy += y;
 8002066:	18a8      	adds	r0, r5, r2
 8002068:	b2c0      	uxtb	r0, r0
  switch(dir)
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <u8g2_add_vector_y+0x20>
      break;
    case 2:
      dy -= y;
 800206e:	1aaa      	subs	r2, r5, r2
 8002070:	b2d0      	uxtb	r0, r2
  switch(dir)
 8002072:	2b02      	cmp	r3, #2
 8002074:	d001      	beq.n	800207a <u8g2_add_vector_y+0x20>
      break;
    default:
      dy -= x;
 8002076:	1a68      	subs	r0, r5, r1
 8002078:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dy;
}
 800207a:	bd20      	pop	{r5, pc}

0800207c <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800207c:	b520      	push	{r5, lr}
  {
    case 0:
      dx += x;
      break;
    case 1:
      dx -= y;
 800207e:	1a85      	subs	r5, r0, r2
 8002080:	b2ed      	uxtb	r5, r5
  switch(dir)
 8002082:	2b01      	cmp	r3, #1
 8002084:	d009      	beq.n	800209a <u8g2_add_vector_x+0x1e>
      dx += x;
 8002086:	1845      	adds	r5, r0, r1
 8002088:	b2ed      	uxtb	r5, r5
  switch(dir)
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <u8g2_add_vector_x+0x1e>
      break;
    case 2:
      dx -= x;
 800208e:	1a41      	subs	r1, r0, r1
 8002090:	b2cd      	uxtb	r5, r1
  switch(dir)
 8002092:	2b02      	cmp	r3, #2
 8002094:	d001      	beq.n	800209a <u8g2_add_vector_x+0x1e>
      break;
    default:
      dx += y;
 8002096:	1880      	adds	r0, r0, r2
 8002098:	b2c5      	uxtb	r5, r0
      break;      
  }
  return dx;
}
 800209a:	0028      	movs	r0, r5
 800209c:	bd20      	pop	{r5, pc}

0800209e <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 800209e:	2000      	movs	r0, #0
 80020a0:	4770      	bx	lr

080020a2 <u8g2_read_font_info>:
{
 80020a2:	b570      	push	{r4, r5, r6, lr}
  return u8x8_pgm_read( font );  
 80020a4:	780b      	ldrb	r3, [r1, #0]
{
 80020a6:	000d      	movs	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80020a8:	7003      	strb	r3, [r0, #0]
  return u8x8_pgm_read( font );  
 80020aa:	784b      	ldrb	r3, [r1, #1]
{
 80020ac:	0004      	movs	r4, r0
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80020ae:	7043      	strb	r3, [r0, #1]
  return u8x8_pgm_read( font );  
 80020b0:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80020b2:	7083      	strb	r3, [r0, #2]
  return u8x8_pgm_read( font );  
 80020b4:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80020b6:	70c3      	strb	r3, [r0, #3]
  return u8x8_pgm_read( font );  
 80020b8:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80020ba:	7103      	strb	r3, [r0, #4]
  return u8x8_pgm_read( font );  
 80020bc:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80020be:	7143      	strb	r3, [r0, #5]
  return u8x8_pgm_read( font );  
 80020c0:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80020c2:	7183      	strb	r3, [r0, #6]
  return u8x8_pgm_read( font );  
 80020c4:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80020c6:	71c3      	strb	r3, [r0, #7]
  return u8x8_pgm_read( font );  
 80020c8:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80020ca:	7203      	strb	r3, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80020cc:	7a4b      	ldrb	r3, [r1, #9]
 80020ce:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80020d0:	7a8b      	ldrb	r3, [r1, #10]
 80020d2:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80020d4:	7acb      	ldrb	r3, [r1, #11]
 80020d6:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80020d8:	7b0b      	ldrb	r3, [r1, #12]
 80020da:	7303      	strb	r3, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80020dc:	7b4b      	ldrb	r3, [r1, #13]
 80020de:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80020e0:	7b8b      	ldrb	r3, [r1, #14]
 80020e2:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80020e4:	7bcb      	ldrb	r3, [r1, #15]
 80020e6:	73c3      	strb	r3, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80020e8:	7c0b      	ldrb	r3, [r1, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80020ea:	2111      	movs	r1, #17
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80020ec:	7403      	strb	r3, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80020ee:	0028      	movs	r0, r5
 80020f0:	f7ff ffac 	bl	800204c <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80020f4:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80020f6:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80020f8:	0028      	movs	r0, r5
 80020fa:	f7ff ffa7 	bl	800204c <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80020fe:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002100:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002102:	0028      	movs	r0, r5
 8002104:	f7ff ffa2 	bl	800204c <u8g2_font_get_word>
 8002108:	82e0      	strh	r0, [r4, #22]
}
 800210a:	bd70      	pop	{r4, r5, r6, pc}

0800210c <u8g2_font_decode_get_unsigned_bits>:
{
 800210c:	b570      	push	{r4, r5, r6, lr}
  val = u8x8_pgm_read( f->decode_ptr );  
 800210e:	6804      	ldr	r4, [r0, #0]
  uint8_t bit_pos = f->decode_bit_pos;
 8002110:	7a86      	ldrb	r6, [r0, #10]
  val >>= bit_pos;
 8002112:	7825      	ldrb	r5, [r4, #0]
  bit_pos_plus_cnt += cnt;
 8002114:	1872      	adds	r2, r6, r1
  val >>= bit_pos;
 8002116:	4135      	asrs	r5, r6
  bit_pos_plus_cnt += cnt;
 8002118:	b2d2      	uxtb	r2, r2
  val >>= bit_pos;
 800211a:	b2eb      	uxtb	r3, r5
  if ( bit_pos_plus_cnt >= 8 )
 800211c:	2a07      	cmp	r2, #7
 800211e:	d90a      	bls.n	8002136 <u8g2_font_decode_get_unsigned_bits+0x2a>
    f->decode_ptr++;
 8002120:	1c63      	adds	r3, r4, #1
 8002122:	6003      	str	r3, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002124:	7863      	ldrb	r3, [r4, #1]
    s -= bit_pos;
 8002126:	2408      	movs	r4, #8
 8002128:	1ba4      	subs	r4, r4, r6
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800212a:	b2e4      	uxtb	r4, r4
 800212c:	40a3      	lsls	r3, r4
    bit_pos_plus_cnt -= 8;
 800212e:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002130:	432b      	orrs	r3, r5
 8002132:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8002134:	b2d2      	uxtb	r2, r2
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002136:	7282      	strb	r2, [r0, #10]
  val &= (1U<<cnt)-1;
 8002138:	2001      	movs	r0, #1
 800213a:	4088      	lsls	r0, r1
 800213c:	3801      	subs	r0, #1
  return val;
 800213e:	4018      	ands	r0, r3
}
 8002140:	bd70      	pop	{r4, r5, r6, pc}

08002142 <u8g2_font_setup_decode>:
{
 8002142:	b570      	push	{r4, r5, r6, lr}
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002144:	0004      	movs	r4, r0
  decode->decode_bit_pos = 0;
 8002146:	2300      	movs	r3, #0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002148:	3458      	adds	r4, #88	; 0x58
  decode->decode_ptr = glyph_data;
 800214a:	6581      	str	r1, [r0, #88]	; 0x58
  decode->decode_bit_pos = 0;
 800214c:	72a3      	strb	r3, [r4, #10]
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800214e:	0003      	movs	r3, r0
{
 8002150:	0005      	movs	r5, r0
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002152:	336c      	adds	r3, #108	; 0x6c
 8002154:	7819      	ldrb	r1, [r3, #0]
 8002156:	0020      	movs	r0, r4
 8002158:	f7ff ffd8 	bl	800210c <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800215c:	002b      	movs	r3, r5
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800215e:	7220      	strb	r0, [r4, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002160:	336d      	adds	r3, #109	; 0x6d
 8002162:	7819      	ldrb	r1, [r3, #0]
 8002164:	0020      	movs	r0, r4
 8002166:	f7ff ffd1 	bl	800210c <u8g2_font_decode_get_unsigned_bits>
  decode->fg_color = u8g2->draw_color;
 800216a:	3586      	adds	r5, #134	; 0x86
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800216c:	7260      	strb	r0, [r4, #9]
  decode->fg_color = u8g2->draw_color;
 800216e:	782b      	ldrb	r3, [r5, #0]
 8002170:	7323      	strb	r3, [r4, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002172:	425a      	negs	r2, r3
 8002174:	4153      	adcs	r3, r2
 8002176:	7363      	strb	r3, [r4, #13]
}
 8002178:	bd70      	pop	{r4, r5, r6, pc}

0800217a <u8g2_font_decode_get_signed_bits>:
{
 800217a:	b510      	push	{r4, lr}
 800217c:	000c      	movs	r4, r1
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800217e:	f7ff ffc5 	bl	800210c <u8g2_font_decode_get_unsigned_bits>
  d <<= cnt;
 8002182:	2301      	movs	r3, #1
  cnt--;
 8002184:	3c01      	subs	r4, #1
  d <<= cnt;
 8002186:	b2e4      	uxtb	r4, r4
 8002188:	40a3      	lsls	r3, r4
  v -= d;
 800218a:	1ac0      	subs	r0, r0, r3
  return v;
 800218c:	b240      	sxtb	r0, r0
}
 800218e:	bd10      	pop	{r4, pc}

08002190 <u8g2_font_decode_len>:
  lx = decode->x;
 8002190:	0003      	movs	r3, r0
{
 8002192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002194:	0004      	movs	r4, r0
 8002196:	000f      	movs	r7, r1
 8002198:	b08d      	sub	sp, #52	; 0x34
 800219a:	920b      	str	r2, [sp, #44]	; 0x2c
  lx = decode->x;
 800219c:	3358      	adds	r3, #88	; 0x58
 800219e:	799a      	ldrb	r2, [r3, #6]
 80021a0:	9203      	str	r2, [sp, #12]
  ly = decode->y;
 80021a2:	79db      	ldrb	r3, [r3, #7]
 80021a4:	9306      	str	r3, [sp, #24]
    rem = decode->glyph_width;
 80021a6:	0025      	movs	r5, r4
 80021a8:	3558      	adds	r5, #88	; 0x58
 80021aa:	7a2b      	ldrb	r3, [r5, #8]
    rem -= lx;
 80021ac:	9a03      	ldr	r2, [sp, #12]
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	9304      	str	r3, [sp, #16]
 80021b4:	9a04      	ldr	r2, [sp, #16]
 80021b6:	1c3b      	adds	r3, r7, #0
 80021b8:	4297      	cmp	r7, r2
 80021ba:	d901      	bls.n	80021c0 <u8g2_font_decode_len+0x30>
 80021bc:	466b      	mov	r3, sp
 80021be:	7c1b      	ldrb	r3, [r3, #16]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	9308      	str	r3, [sp, #32]
    y = decode->target_y;
 80021c4:	796b      	ldrb	r3, [r5, #5]
    x = decode->target_x;
 80021c6:	7928      	ldrb	r0, [r5, #4]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80021c8:	260c      	movs	r6, #12
    y = decode->target_y;
 80021ca:	930a      	str	r3, [sp, #40]	; 0x28
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80021cc:	466b      	mov	r3, sp
 80021ce:	579e      	ldrsb	r6, [r3, r6]
 80021d0:	7e1b      	ldrb	r3, [r3, #24]
 80021d2:	0031      	movs	r1, r6
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	9307      	str	r3, [sp, #28]
 80021d8:	7bab      	ldrb	r3, [r5, #14]
 80021da:	9a07      	ldr	r2, [sp, #28]
 80021dc:	9305      	str	r3, [sp, #20]
 80021de:	f7ff ff4d 	bl	800207c <u8g2_add_vector_x>
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80021e2:	9b05      	ldr	r3, [sp, #20]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80021e4:	9009      	str	r0, [sp, #36]	; 0x24
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80021e6:	9a07      	ldr	r2, [sp, #28]
 80021e8:	0031      	movs	r1, r6
 80021ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80021ec:	f7ff ff35 	bl	800205a <u8g2_add_vector_y>
    if ( is_foreground )
 80021f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80021f2:	0002      	movs	r2, r0
    if ( is_foreground )
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d016      	beq.n	8002226 <u8g2_font_decode_len+0x96>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80021f8:	7b29      	ldrb	r1, [r5, #12]
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80021fa:	0023      	movs	r3, r4
 80021fc:	3386      	adds	r3, #134	; 0x86
 80021fe:	7019      	strb	r1, [r3, #0]
      u8g2_DrawHVLine(u8g2, 
 8002200:	9b05      	ldr	r3, [sp, #20]
 8002202:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	0020      	movs	r0, r4
 8002208:	9b08      	ldr	r3, [sp, #32]
 800220a:	f000 f9ba 	bl	8002582 <u8g2_DrawHVLine>
    if ( cnt < rem )
 800220e:	9b04      	ldr	r3, [sp, #16]
 8002210:	429f      	cmp	r7, r3
 8002212:	d30d      	bcc.n	8002230 <u8g2_font_decode_len+0xa0>
    cnt -= rem;
 8002214:	1aff      	subs	r7, r7, r3
    ly++;
 8002216:	9b06      	ldr	r3, [sp, #24]
    cnt -= rem;
 8002218:	b2ff      	uxtb	r7, r7
    ly++;
 800221a:	3301      	adds	r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	9306      	str	r3, [sp, #24]
    lx = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	9303      	str	r3, [sp, #12]
    rem = decode->glyph_width;
 8002224:	e7bf      	b.n	80021a6 <u8g2_font_decode_len+0x16>
    else if ( decode->is_transparent == 0 )    
 8002226:	7aeb      	ldrb	r3, [r5, #11]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <u8g2_font_decode_len+0x7e>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800222c:	7b69      	ldrb	r1, [r5, #13]
 800222e:	e7e4      	b.n	80021fa <u8g2_font_decode_len+0x6a>
  lx += cnt;
 8002230:	9b03      	ldr	r3, [sp, #12]
  decode->x = lx;
 8002232:	3458      	adds	r4, #88	; 0x58
  lx += cnt;
 8002234:	18fb      	adds	r3, r7, r3
  decode->x = lx;
 8002236:	71a3      	strb	r3, [r4, #6]
  decode->y = ly;
 8002238:	466b      	mov	r3, sp
 800223a:	7f1b      	ldrb	r3, [r3, #28]
 800223c:	71e3      	strb	r3, [r4, #7]
}
 800223e:	b00d      	add	sp, #52	; 0x34
 8002240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002242 <u8g2_font_decode_glyph>:
{
 8002242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002244:	0004      	movs	r4, r0
 8002246:	b08b      	sub	sp, #44	; 0x2c
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002248:	0007      	movs	r7, r0
  u8g2_font_setup_decode(u8g2, glyph_data);
 800224a:	f7ff ff7a 	bl	8002142 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800224e:	0023      	movs	r3, r4
 8002250:	3361      	adds	r3, #97	; 0x61
 8002252:	781b      	ldrb	r3, [r3, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002254:	3758      	adds	r7, #88	; 0x58
  h = u8g2->font_decode.glyph_height;
 8002256:	b25b      	sxtb	r3, r3
 8002258:	9306      	str	r3, [sp, #24]
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800225a:	0023      	movs	r3, r4
 800225c:	336e      	adds	r3, #110	; 0x6e
 800225e:	7819      	ldrb	r1, [r3, #0]
 8002260:	0038      	movs	r0, r7
 8002262:	f7ff ff8a 	bl	800217a <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002266:	0023      	movs	r3, r4
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002268:	9008      	str	r0, [sp, #32]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800226a:	336f      	adds	r3, #111	; 0x6f
 800226c:	7819      	ldrb	r1, [r3, #0]
 800226e:	0038      	movs	r0, r7
 8002270:	f7ff ff83 	bl	800217a <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002274:	0023      	movs	r3, r4
 8002276:	3370      	adds	r3, #112	; 0x70
 8002278:	7819      	ldrb	r1, [r3, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800227a:	0005      	movs	r5, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800227c:	0038      	movs	r0, r7
 800227e:	f7ff ff7c 	bl	800217a <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 8002282:	2308      	movs	r3, #8
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002284:	9009      	str	r0, [sp, #36]	; 0x24
  if ( decode->glyph_width > 0 )
 8002286:	56fb      	ldrsb	r3, [r7, r3]
 8002288:	9303      	str	r3, [sp, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	dd5c      	ble.n	8002348 <u8g2_font_decode_glyph+0x106>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800228e:	466b      	mov	r3, sp
 8002290:	7e1b      	ldrb	r3, [r3, #24]
 8002292:	9908      	ldr	r1, [sp, #32]
 8002294:	9304      	str	r3, [sp, #16]
 8002296:	195b      	adds	r3, r3, r5
 8002298:	425b      	negs	r3, r3
 800229a:	b25b      	sxtb	r3, r3
 800229c:	9307      	str	r3, [sp, #28]
 800229e:	7bbb      	ldrb	r3, [r7, #14]
 80022a0:	9a07      	ldr	r2, [sp, #28]
 80022a2:	9305      	str	r3, [sp, #20]
 80022a4:	7938      	ldrb	r0, [r7, #4]
 80022a6:	f7ff fee9 	bl	800207c <u8g2_add_vector_x>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80022aa:	9b05      	ldr	r3, [sp, #20]
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80022ac:	7138      	strb	r0, [r7, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80022ae:	9a07      	ldr	r2, [sp, #28]
 80022b0:	9908      	ldr	r1, [sp, #32]
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80022b2:	0006      	movs	r6, r0
 80022b4:	0005      	movs	r5, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80022b6:	7978      	ldrb	r0, [r7, #5]
 80022b8:	f7ff fecf 	bl	800205a <u8g2_add_vector_y>
      switch(decode->dir)
 80022bc:	9b05      	ldr	r3, [sp, #20]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80022be:	0002      	movs	r2, r0
 80022c0:	0001      	movs	r1, r0
 80022c2:	7178      	strb	r0, [r7, #5]
      switch(decode->dir)
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d863      	bhi.n	8002390 <u8g2_font_decode_glyph+0x14e>
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7fd ff1d 	bl	8000108 <__gnu_thumb1_case_uqi>
 80022ce:	4002      	.short	0x4002
 80022d0:	574a      	.short	0x574a
	    x1 += decode->glyph_width;
 80022d2:	9b03      	ldr	r3, [sp, #12]
	    y1 += h;
 80022d4:	9804      	ldr	r0, [sp, #16]
	    x1 += decode->glyph_width;
 80022d6:	18f5      	adds	r5, r6, r3
	    y1 += h;
 80022d8:	1881      	adds	r1, r0, r2
	    x1 += decode->glyph_width;
 80022da:	b2eb      	uxtb	r3, r5
	    y1 += h;
 80022dc:	b2c9      	uxtb	r1, r1
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80022de:	9100      	str	r1, [sp, #0]
 80022e0:	0020      	movs	r0, r4
 80022e2:	0031      	movs	r1, r6
 80022e4:	f000 f9cc 	bl	8002680 <u8g2_IsIntersection>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d02d      	beq.n	8002348 <u8g2_font_decode_glyph+0x106>
    decode->x = 0;
 80022ec:	0023      	movs	r3, r4
 80022ee:	2200      	movs	r2, #0
	u8g2_font_decode_len(u8g2, b, 1);
 80022f0:	2501      	movs	r5, #1
    decode->x = 0;
 80022f2:	3358      	adds	r3, #88	; 0x58
 80022f4:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 80022f6:	71da      	strb	r2, [r3, #7]
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80022f8:	0023      	movs	r3, r4
 80022fa:	336a      	adds	r3, #106	; 0x6a
 80022fc:	7819      	ldrb	r1, [r3, #0]
 80022fe:	0038      	movs	r0, r7
 8002300:	f7ff ff04 	bl	800210c <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002304:	0023      	movs	r3, r4
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002306:	9003      	str	r0, [sp, #12]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002308:	336b      	adds	r3, #107	; 0x6b
 800230a:	7819      	ldrb	r1, [r3, #0]
 800230c:	0038      	movs	r0, r7
 800230e:	f7ff fefd 	bl	800210c <u8g2_font_decode_get_unsigned_bits>
 8002312:	0006      	movs	r6, r0
	u8g2_font_decode_len(u8g2, a, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	9903      	ldr	r1, [sp, #12]
 8002318:	0020      	movs	r0, r4
 800231a:	f7ff ff39 	bl	8002190 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800231e:	0031      	movs	r1, r6
 8002320:	0020      	movs	r0, r4
 8002322:	002a      	movs	r2, r5
 8002324:	f7ff ff34 	bl	8002190 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002328:	0029      	movs	r1, r5
 800232a:	0038      	movs	r0, r7
 800232c:	f7ff feee 	bl	800210c <u8g2_font_decode_get_unsigned_bits>
 8002330:	2800      	cmp	r0, #0
 8002332:	d1ef      	bne.n	8002314 <u8g2_font_decode_glyph+0xd2>
      if ( decode->y >= h )
 8002334:	0023      	movs	r3, r4
 8002336:	2207      	movs	r2, #7
 8002338:	3358      	adds	r3, #88	; 0x58
 800233a:	569a      	ldrsb	r2, [r3, r2]
 800233c:	9906      	ldr	r1, [sp, #24]
 800233e:	428a      	cmp	r2, r1
 8002340:	dbda      	blt.n	80022f8 <u8g2_font_decode_glyph+0xb6>
    u8g2->draw_color = decode->fg_color;
 8002342:	7b1b      	ldrb	r3, [r3, #12]
 8002344:	3486      	adds	r4, #134	; 0x86
 8002346:	7023      	strb	r3, [r4, #0]
}
 8002348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800234a:	b00b      	add	sp, #44	; 0x2c
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800234e:	9b04      	ldr	r3, [sp, #16]
	    y1 += decode->glyph_width;
 8002350:	9803      	ldr	r0, [sp, #12]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002352:	1af6      	subs	r6, r6, r3
	    x1++;
 8002354:	3501      	adds	r5, #1
	    y1 += decode->glyph_width;
 8002356:	1811      	adds	r1, r2, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002358:	3601      	adds	r6, #1
	    x1++;
 800235a:	b2eb      	uxtb	r3, r5
	    y1 += decode->glyph_width;
 800235c:	b2c9      	uxtb	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800235e:	b2f6      	uxtb	r6, r6
	    break;	  
 8002360:	e7bd      	b.n	80022de <u8g2_font_decode_glyph+0x9c>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002362:	2201      	movs	r2, #1
 8002364:	9b03      	ldr	r3, [sp, #12]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002366:	9804      	ldr	r0, [sp, #16]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002368:	1ad6      	subs	r6, r2, r3
 800236a:	19ae      	adds	r6, r5, r6
	    x1++;
 800236c:	18ad      	adds	r5, r5, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800236e:	1a12      	subs	r2, r2, r0
 8002370:	188a      	adds	r2, r1, r2
	    y1++;
 8002372:	3101      	adds	r1, #1
	    x1++;
 8002374:	b2eb      	uxtb	r3, r5
	    y1++;
 8002376:	b2c9      	uxtb	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	e7f0      	b.n	800235e <u8g2_font_decode_glyph+0x11c>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800237c:	9a03      	ldr	r2, [sp, #12]
	    x1 += h;
 800237e:	9b04      	ldr	r3, [sp, #16]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002380:	1a8a      	subs	r2, r1, r2
	    x1 += h;
 8002382:	199d      	adds	r5, r3, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002384:	3201      	adds	r2, #1
	    y1++;
 8002386:	3101      	adds	r1, #1
	    x1 += h;
 8002388:	b2eb      	uxtb	r3, r5
	    y1++;
 800238a:	b2c9      	uxtb	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800238c:	b2d2      	uxtb	r2, r2
	    break;	  
 800238e:	e7a6      	b.n	80022de <u8g2_font_decode_glyph+0x9c>
      y1 = y0;
 8002390:	0001      	movs	r1, r0
      x1 = x0;
 8002392:	0033      	movs	r3, r6
 8002394:	e7a3      	b.n	80022de <u8g2_font_decode_glyph+0x9c>

08002396 <u8g2_font_get_glyph_data>:
{
 8002396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002398:	6d04      	ldr	r4, [r0, #80]	; 0x50
{
 800239a:	000d      	movs	r5, r1
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800239c:	3417      	adds	r4, #23
  if ( encoding <= 255 )
 800239e:	29ff      	cmp	r1, #255	; 0xff
 80023a0:	d812      	bhi.n	80023c8 <u8g2_font_get_glyph_data+0x32>
    if ( encoding >= 'a' )
 80023a2:	2960      	cmp	r1, #96	; 0x60
 80023a4:	d90a      	bls.n	80023bc <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
 80023a6:	307c      	adds	r0, #124	; 0x7c
      font += u8g2->font_info.start_pos_upper_A;
 80023a8:	8803      	ldrh	r3, [r0, #0]
 80023aa:	18e4      	adds	r4, r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80023ac:	7860      	ldrb	r0, [r4, #1]
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d003      	beq.n	80023ba <u8g2_font_get_glyph_data+0x24>
      if ( u8x8_pgm_read( font ) == encoding )
 80023b2:	7823      	ldrb	r3, [r4, #0]
 80023b4:	42ab      	cmp	r3, r5
 80023b6:	d105      	bne.n	80023c4 <u8g2_font_get_glyph_data+0x2e>
	return font+2;	/* skip encoding and glyph size */
 80023b8:	1ca0      	adds	r0, r4, #2
}
 80023ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( encoding >= 'A' )
 80023bc:	2940      	cmp	r1, #64	; 0x40
 80023be:	d9f5      	bls.n	80023ac <u8g2_font_get_glyph_data+0x16>
      font += u8g2->font_info.start_pos_upper_A;
 80023c0:	307a      	adds	r0, #122	; 0x7a
 80023c2:	e7f1      	b.n	80023a8 <u8g2_font_get_glyph_data+0x12>
      font += u8x8_pgm_read( font + 1 );
 80023c4:	1824      	adds	r4, r4, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80023c6:	e7f1      	b.n	80023ac <u8g2_font_get_glyph_data+0x16>
    font += u8g2->font_info.start_pos_unicode;
 80023c8:	307e      	adds	r0, #126	; 0x7e
 80023ca:	8800      	ldrh	r0, [r0, #0]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80023cc:	2702      	movs	r7, #2
    font += u8g2->font_info.start_pos_unicode;
 80023ce:	1824      	adds	r4, r4, r0
    unicode_lookup_table = font; 
 80023d0:	0026      	movs	r6, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80023d2:	2100      	movs	r1, #0
 80023d4:	0030      	movs	r0, r6
 80023d6:	f7ff fe39 	bl	800204c <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80023da:	0039      	movs	r1, r7
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80023dc:	1824      	adds	r4, r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80023de:	0030      	movs	r0, r6
 80023e0:	f7ff fe34 	bl	800204c <u8g2_font_get_word>
      unicode_lookup_table+=4;
 80023e4:	3604      	adds	r6, #4
    } while( e < encoding );
 80023e6:	4285      	cmp	r5, r0
 80023e8:	d8f3      	bhi.n	80023d2 <u8g2_font_get_glyph_data+0x3c>
      e = u8x8_pgm_read( font );
 80023ea:	7820      	ldrb	r0, [r4, #0]
      e |= u8x8_pgm_read( font + 1 );
 80023ec:	7863      	ldrb	r3, [r4, #1]
      e <<= 8;
 80023ee:	0200      	lsls	r0, r0, #8
      e |= u8x8_pgm_read( font + 1 );
 80023f0:	4318      	orrs	r0, r3
      if ( e == 0 )
 80023f2:	d0e2      	beq.n	80023ba <u8g2_font_get_glyph_data+0x24>
      if ( e == encoding )
 80023f4:	4285      	cmp	r5, r0
 80023f6:	d101      	bne.n	80023fc <u8g2_font_get_glyph_data+0x66>
	return font+3;	/* skip encoding and glyph size */
 80023f8:	1ce0      	adds	r0, r4, #3
 80023fa:	e7de      	b.n	80023ba <u8g2_font_get_glyph_data+0x24>
      font += u8x8_pgm_read( font + 2 );
 80023fc:	78a3      	ldrb	r3, [r4, #2]
 80023fe:	18e4      	adds	r4, r4, r3
      e = u8x8_pgm_read( font );
 8002400:	e7f3      	b.n	80023ea <u8g2_font_get_glyph_data+0x54>

08002402 <u8g2_DrawGlyph>:
{
 8002402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002404:	001f      	movs	r7, r3
  switch(u8g2->font_decode.dir)
 8002406:	0003      	movs	r3, r0
 8002408:	3366      	adds	r3, #102	; 0x66
{
 800240a:	0004      	movs	r4, r0
  switch(u8g2->font_decode.dir)
 800240c:	7818      	ldrb	r0, [r3, #0]
{
 800240e:	000e      	movs	r6, r1
 8002410:	0015      	movs	r5, r2
  switch(u8g2->font_decode.dir)
 8002412:	2803      	cmp	r0, #3
 8002414:	d808      	bhi.n	8002428 <u8g2_DrawGlyph+0x26>
 8002416:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002418:	f7fd fe76 	bl	8000108 <__gnu_thumb1_case_uqi>
 800241c:	1e1a1502 	.word	0x1e1a1502
      y += u8g2->font_calc_vref(u8g2);
 8002420:	0020      	movs	r0, r4
 8002422:	4798      	blx	r3
 8002424:	182d      	adds	r5, r5, r0
      y -= u8g2->font_calc_vref(u8g2);
 8002426:	b2ed      	uxtb	r5, r5
  u8g2->font_decode.target_x = x;
 8002428:	0023      	movs	r3, r4
 800242a:	335c      	adds	r3, #92	; 0x5c
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800242c:	0039      	movs	r1, r7
  u8g2->font_decode.target_x = x;
 800242e:	701e      	strb	r6, [r3, #0]
  u8g2->font_decode.target_y = y;
 8002430:	705d      	strb	r5, [r3, #1]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002432:	0020      	movs	r0, r4
 8002434:	f7ff ffaf 	bl	8002396 <u8g2_font_get_glyph_data>
 8002438:	1e01      	subs	r1, r0, #0
  if ( glyph_data != NULL )
 800243a:	d003      	beq.n	8002444 <u8g2_DrawGlyph+0x42>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800243c:	0020      	movs	r0, r4
 800243e:	f7ff ff00 	bl	8002242 <u8g2_font_decode_glyph>
 8002442:	b2c0      	uxtb	r0, r0
}
 8002444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
 8002446:	0020      	movs	r0, r4
 8002448:	4798      	blx	r3
 800244a:	1a36      	subs	r6, r6, r0
      x += u8g2->font_calc_vref(u8g2);
 800244c:	b2f6      	uxtb	r6, r6
      break;
 800244e:	e7eb      	b.n	8002428 <u8g2_DrawGlyph+0x26>
      y -= u8g2->font_calc_vref(u8g2);
 8002450:	0020      	movs	r0, r4
 8002452:	4798      	blx	r3
 8002454:	1a2d      	subs	r5, r5, r0
 8002456:	e7e6      	b.n	8002426 <u8g2_DrawGlyph+0x24>
      x += u8g2->font_calc_vref(u8g2);
 8002458:	0020      	movs	r0, r4
 800245a:	4798      	blx	r3
 800245c:	1836      	adds	r6, r6, r0
 800245e:	e7f5      	b.n	800244c <u8g2_DrawGlyph+0x4a>

08002460 <u8g2_draw_string>:
{
 8002460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002462:	001f      	movs	r7, r3
 8002464:	0006      	movs	r6, r0
 8002466:	000c      	movs	r4, r1
 8002468:	0015      	movs	r5, r2
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800246a:	f000 fa35 	bl	80028d8 <u8x8_utf8_init>
  sum = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	9301      	str	r3, [sp, #4]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002472:	6873      	ldr	r3, [r6, #4]
 8002474:	7839      	ldrb	r1, [r7, #0]
 8002476:	0030      	movs	r0, r6
 8002478:	4798      	blx	r3
    if ( e == 0x0ffff )
 800247a:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <u8g2_draw_string+0x68>)
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800247c:	0003      	movs	r3, r0
    if ( e == 0x0ffff )
 800247e:	4290      	cmp	r0, r2
 8002480:	d01f      	beq.n	80024c2 <u8g2_draw_string+0x62>
    if ( e != 0x0fffe )
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <u8g2_draw_string+0x6c>)
    str++;
 8002484:	3701      	adds	r7, #1
    if ( e != 0x0fffe )
 8002486:	4290      	cmp	r0, r2
 8002488:	d0f3      	beq.n	8002472 <u8g2_draw_string+0x12>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800248a:	002a      	movs	r2, r5
 800248c:	0021      	movs	r1, r4
 800248e:	0030      	movs	r0, r6
 8002490:	f7ff ffb7 	bl	8002402 <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 8002494:	0032      	movs	r2, r6
 8002496:	3266      	adds	r2, #102	; 0x66
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002498:	0003      	movs	r3, r0
      switch(u8g2->font_decode.dir)
 800249a:	7810      	ldrb	r0, [r2, #0]
 800249c:	2803      	cmp	r0, #3
 800249e:	d805      	bhi.n	80024ac <u8g2_draw_string+0x4c>
 80024a0:	f7fd fe32 	bl	8000108 <__gnu_thumb1_case_uqi>
 80024a4:	0d0b0802 	.word	0x0d0b0802
	  x += delta;
 80024a8:	18e4      	adds	r4, r4, r3
	  x -= delta;
 80024aa:	b2e4      	uxtb	r4, r4
      sum += delta;    
 80024ac:	9a01      	ldr	r2, [sp, #4]
 80024ae:	18d3      	adds	r3, r2, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e7dd      	b.n	8002470 <u8g2_draw_string+0x10>
	  y += delta;
 80024b4:	18ed      	adds	r5, r5, r3
	  y -= delta;
 80024b6:	b2ed      	uxtb	r5, r5
	  break;
 80024b8:	e7f8      	b.n	80024ac <u8g2_draw_string+0x4c>
	  x -= delta;
 80024ba:	1ae4      	subs	r4, r4, r3
 80024bc:	e7f5      	b.n	80024aa <u8g2_draw_string+0x4a>
	  y -= delta;
 80024be:	1aed      	subs	r5, r5, r3
 80024c0:	e7f9      	b.n	80024b6 <u8g2_draw_string+0x56>
}
 80024c2:	9801      	ldr	r0, [sp, #4]
 80024c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	0000ffff 	.word	0x0000ffff
 80024cc:	0000fffe 	.word	0x0000fffe

080024d0 <u8g2_DrawStr>:
{
 80024d0:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80024d2:	4c02      	ldr	r4, [pc, #8]	; (80024dc <u8g2_DrawStr+0xc>)
 80024d4:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80024d6:	f7ff ffc3 	bl	8002460 <u8g2_draw_string>
}
 80024da:	bd10      	pop	{r4, pc}
 80024dc:	080028c5 	.word	0x080028c5

080024e0 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 80024e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 80024e2:	b570      	push	{r4, r5, r6, lr}
  if ( u8g2->font == NULL )
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01d      	beq.n	8002524 <u8g2_UpdateRefHeight+0x44>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80024e8:	0003      	movs	r3, r0
 80024ea:	2600      	movs	r6, #0
 80024ec:	0005      	movs	r5, r0
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80024ee:	2401      	movs	r4, #1
 80024f0:	0002      	movs	r2, r0
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80024f2:	3375      	adds	r3, #117	; 0x75
 80024f4:	579e      	ldrsb	r6, [r3, r6]
 80024f6:	3582      	adds	r5, #130	; 0x82
 80024f8:	702e      	strb	r6, [r5, #0]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80024fa:	571c      	ldrsb	r4, [r3, r4]
 80024fc:	3283      	adds	r2, #131	; 0x83
 80024fe:	7014      	strb	r4, [r2, #0]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002500:	330c      	adds	r3, #12
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <u8g2_UpdateRefHeight+0x44>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10c      	bne.n	8002526 <u8g2_UpdateRefHeight+0x46>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800250c:	0003      	movs	r3, r0
 800250e:	3377      	adds	r3, #119	; 0x77
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b25b      	sxtb	r3, r3
 8002514:	429e      	cmp	r6, r3
 8002516:	da00      	bge.n	800251a <u8g2_UpdateRefHeight+0x3a>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002518:	702b      	strb	r3, [r5, #0]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800251a:	2378      	movs	r3, #120	; 0x78
 800251c:	56c3      	ldrsb	r3, [r0, r3]
 800251e:	429c      	cmp	r4, r3
 8002520:	dd00      	ble.n	8002524 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002522:	7013      	strb	r3, [r2, #0]
}
 8002524:	bd70      	pop	{r4, r5, r6, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002526:	0003      	movs	r3, r0
 8002528:	2174      	movs	r1, #116	; 0x74
 800252a:	3372      	adds	r3, #114	; 0x72
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	5641      	ldrsb	r1, [r0, r1]
 8002530:	b25b      	sxtb	r3, r3
 8002532:	185b      	adds	r3, r3, r1
 8002534:	429e      	cmp	r6, r3
 8002536:	da00      	bge.n	800253a <u8g2_UpdateRefHeight+0x5a>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002538:	702b      	strb	r3, [r5, #0]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800253a:	428c      	cmp	r4, r1
 800253c:	ddf2      	ble.n	8002524 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800253e:	7011      	strb	r1, [r2, #0]
 8002540:	e7f0      	b.n	8002524 <u8g2_UpdateRefHeight+0x44>
	...

08002544 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002544:	4b01      	ldr	r3, [pc, #4]	; (800254c <u8g2_SetFontPosBaseline+0x8>)
 8002546:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002548:	4770      	bx	lr
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	0800209f 	.word	0x0800209f

08002550 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8002550:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8002552:	b510      	push	{r4, lr}
 8002554:	0004      	movs	r4, r0
  if ( u8g2->font != font )
 8002556:	428b      	cmp	r3, r1
 8002558:	d006      	beq.n	8002568 <u8g2_SetFont+0x18>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800255a:	6501      	str	r1, [r0, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800255c:	3068      	adds	r0, #104	; 0x68
 800255e:	f7ff fda0 	bl	80020a2 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002562:	0020      	movs	r0, r4
 8002564:	f7ff ffbc 	bl	80024e0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002568:	bd10      	pop	{r4, pc}

0800256a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800256a:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800256c:	0005      	movs	r5, r0
 800256e:	3540      	adds	r5, #64	; 0x40
 8002570:	782d      	ldrb	r5, [r5, #0]
{
 8002572:	ac06      	add	r4, sp, #24
 8002574:	7824      	ldrb	r4, [r4, #0]
  y -= u8g2->pixel_curr_row;
 8002576:	1b52      	subs	r2, r2, r5
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002578:	9400      	str	r4, [sp, #0]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800257e:	47a0      	blx	r4
}
 8002580:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08002582 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002584:	0005      	movs	r5, r0
 8002586:	3580      	adds	r5, #128	; 0x80
 8002588:	782d      	ldrb	r5, [r5, #0]
{
 800258a:	ac08      	add	r4, sp, #32
 800258c:	7824      	ldrb	r4, [r4, #0]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800258e:	2d00      	cmp	r5, #0
 8002590:	d03f      	beq.n	8002612 <u8g2_DrawHVLine+0x90>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002592:	2b00      	cmp	r3, #0
 8002594:	d03d      	beq.n	8002612 <u8g2_DrawHVLine+0x90>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002596:	2b01      	cmp	r3, #1
 8002598:	d904      	bls.n	80025a4 <u8g2_DrawHVLine+0x22>
      {
	if ( dir == 2 )
 800259a:	2c02      	cmp	r4, #2
 800259c:	d130      	bne.n	8002600 <u8g2_DrawHVLine+0x7e>
	{
	  x -= len;
	  x++;
 800259e:	3101      	adds	r1, #1
 80025a0:	1ac9      	subs	r1, r1, r3
 80025a2:	b2c9      	uxtb	r1, r1
	{
	  y -= len;
	  y++;
	}
      }
      dir &= 1;  
 80025a4:	2501      	movs	r5, #1
 80025a6:	402c      	ands	r4, r5
      
      /* clip against the user window */
      if ( dir == 0 )
      {
	if ( y < u8g2->user_y0 )
 80025a8:	0005      	movs	r5, r0
      if ( dir == 0 )
 80025aa:	2c00      	cmp	r4, #0
 80025ac:	d132      	bne.n	8002614 <u8g2_DrawHVLine+0x92>
	if ( y < u8g2->user_y0 )
 80025ae:	3547      	adds	r5, #71	; 0x47
 80025b0:	782d      	ldrb	r5, [r5, #0]
 80025b2:	4295      	cmp	r5, r2
 80025b4:	d82d      	bhi.n	8002612 <u8g2_DrawHVLine+0x90>
	  return;
	if ( y >= u8g2->user_y1 )
 80025b6:	0005      	movs	r5, r0
 80025b8:	3548      	adds	r5, #72	; 0x48
 80025ba:	782d      	ldrb	r5, [r5, #0]
 80025bc:	4295      	cmp	r5, r2
 80025be:	d928      	bls.n	8002612 <u8g2_DrawHVLine+0x90>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80025c0:	0005      	movs	r5, r0
 80025c2:	0006      	movs	r6, r0
  b += *len;
 80025c4:	18cb      	adds	r3, r1, r3
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80025c6:	3545      	adds	r5, #69	; 0x45
 80025c8:	3646      	adds	r6, #70	; 0x46
  b += *len;
 80025ca:	b2db      	uxtb	r3, r3
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80025cc:	782d      	ldrb	r5, [r5, #0]
 80025ce:	7836      	ldrb	r6, [r6, #0]
  if ( a > b )
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d21c      	bcs.n	800260e <u8g2_DrawHVLine+0x8c>
    if ( a < d )
 80025d4:	428e      	cmp	r6, r1
 80025d6:	d919      	bls.n	800260c <u8g2_DrawHVLine+0x8a>
      b--;
 80025d8:	1e73      	subs	r3, r6, #1
 80025da:	b2db      	uxtb	r3, r3
  if ( b <= c )
 80025dc:	429d      	cmp	r5, r3
 80025de:	d218      	bcs.n	8002612 <u8g2_DrawHVLine+0x90>
 80025e0:	1c2f      	adds	r7, r5, #0
 80025e2:	428d      	cmp	r5, r1
 80025e4:	d200      	bcs.n	80025e8 <u8g2_DrawHVLine+0x66>
 80025e6:	1c0f      	adds	r7, r1, #0
 80025e8:	b2f9      	uxtb	r1, r7
 80025ea:	1c35      	adds	r5, r6, #0
 80025ec:	429e      	cmp	r6, r3
 80025ee:	d900      	bls.n	80025f2 <u8g2_DrawHVLine+0x70>
 80025f0:	1c1d      	adds	r5, r3, #0
  b -= a;
 80025f2:	1a6b      	subs	r3, r5, r1
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80025f4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80025f6:	9400      	str	r4, [sp, #0]
  b -= a;
 80025f8:	b2db      	uxtb	r3, r3
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80025fa:	68ac      	ldr	r4, [r5, #8]
 80025fc:	47a0      	blx	r4
 80025fe:	e008      	b.n	8002612 <u8g2_DrawHVLine+0x90>
	else if ( dir == 3 )
 8002600:	2c03      	cmp	r4, #3
 8002602:	d1cf      	bne.n	80025a4 <u8g2_DrawHVLine+0x22>
	  y++;
 8002604:	3201      	adds	r2, #1
 8002606:	1ad2      	subs	r2, r2, r3
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	e7cb      	b.n	80025a4 <u8g2_DrawHVLine+0x22>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800260c:	0029      	movs	r1, r5
  if ( a >= d )
 800260e:	428e      	cmp	r6, r1
 8002610:	d8e4      	bhi.n	80025dc <u8g2_DrawHVLine+0x5a>
    }
}
 8002612:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if ( x < u8g2->user_x0 )
 8002614:	3545      	adds	r5, #69	; 0x45
 8002616:	782d      	ldrb	r5, [r5, #0]
 8002618:	428d      	cmp	r5, r1
 800261a:	d8fa      	bhi.n	8002612 <u8g2_DrawHVLine+0x90>
	if ( x >= u8g2->user_x1 )
 800261c:	0005      	movs	r5, r0
 800261e:	3546      	adds	r5, #70	; 0x46
 8002620:	782d      	ldrb	r5, [r5, #0]
 8002622:	428d      	cmp	r5, r1
 8002624:	d9f5      	bls.n	8002612 <u8g2_DrawHVLine+0x90>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002626:	0005      	movs	r5, r0
  b += *len;
 8002628:	18d3      	adds	r3, r2, r3
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800262a:	3547      	adds	r5, #71	; 0x47
 800262c:	782e      	ldrb	r6, [r5, #0]
  b += *len;
 800262e:	b2db      	uxtb	r3, r3
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002630:	3501      	adds	r5, #1
 8002632:	782d      	ldrb	r5, [r5, #0]
  if ( a > b )
 8002634:	4293      	cmp	r3, r2
 8002636:	d211      	bcs.n	800265c <u8g2_DrawHVLine+0xda>
    if ( a < d )
 8002638:	4295      	cmp	r5, r2
 800263a:	d90e      	bls.n	800265a <u8g2_DrawHVLine+0xd8>
      b--;
 800263c:	1e6b      	subs	r3, r5, #1
 800263e:	b2db      	uxtb	r3, r3
  if ( b <= c )
 8002640:	429e      	cmp	r6, r3
 8002642:	d2e6      	bcs.n	8002612 <u8g2_DrawHVLine+0x90>
 8002644:	1c37      	adds	r7, r6, #0
 8002646:	4296      	cmp	r6, r2
 8002648:	d200      	bcs.n	800264c <u8g2_DrawHVLine+0xca>
 800264a:	1c17      	adds	r7, r2, #0
 800264c:	b2fa      	uxtb	r2, r7
 800264e:	1c2e      	adds	r6, r5, #0
 8002650:	429d      	cmp	r5, r3
 8002652:	d900      	bls.n	8002656 <u8g2_DrawHVLine+0xd4>
 8002654:	1c1e      	adds	r6, r3, #0
  b -= a;
 8002656:	1ab3      	subs	r3, r6, r2
 8002658:	e7cc      	b.n	80025f4 <u8g2_DrawHVLine+0x72>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800265a:	0032      	movs	r2, r6
  if ( a >= d )
 800265c:	4295      	cmp	r5, r2
 800265e:	d9d8      	bls.n	8002612 <u8g2_DrawHVLine+0x90>
 8002660:	e7ee      	b.n	8002640 <u8g2_DrawHVLine+0xbe>

08002662 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002662:	b510      	push	{r4, lr}
 8002664:	0004      	movs	r4, r0
  if ( v0 < a1 )		// v0 <= a1
 8002666:	428a      	cmp	r2, r1
 8002668:	d206      	bcs.n	8002678 <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
 800266a:	2001      	movs	r0, #1
    if ( v1 > a0 )	// v1 >= a0
 800266c:	42a3      	cmp	r3, r4
 800266e:	d802      	bhi.n	8002676 <u8g2_is_intersection_decision_tree+0x14>
      return 1;
 8002670:	4293      	cmp	r3, r2
 8002672:	419b      	sbcs	r3, r3
 8002674:	4258      	negs	r0, r3
    else
    {
      return 0;
    }
  }
}
 8002676:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 8002678:	4283      	cmp	r3, r0
 800267a:	d8f9      	bhi.n	8002670 <u8g2_is_intersection_decision_tree+0xe>
      return 0;
 800267c:	2000      	movs	r0, #0
 800267e:	e7fa      	b.n	8002676 <u8g2_is_intersection_decision_tree+0x14>

08002680 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	000d      	movs	r5, r1
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002684:	0001      	movs	r1, r0
{
 8002686:	0004      	movs	r4, r0
 8002688:	001e      	movs	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800268a:	3148      	adds	r1, #72	; 0x48
{
 800268c:	ab04      	add	r3, sp, #16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800268e:	3047      	adds	r0, #71	; 0x47
{
 8002690:	781b      	ldrb	r3, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002692:	7809      	ldrb	r1, [r1, #0]
 8002694:	7800      	ldrb	r0, [r0, #0]
 8002696:	f7ff ffe4 	bl	8002662 <u8g2_is_intersection_decision_tree>
 800269a:	2800      	cmp	r0, #0
 800269c:	d008      	beq.n	80026b0 <u8g2_IsIntersection+0x30>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800269e:	0023      	movs	r3, r4
 80026a0:	3445      	adds	r4, #69	; 0x45
 80026a2:	3346      	adds	r3, #70	; 0x46
 80026a4:	7819      	ldrb	r1, [r3, #0]
 80026a6:	7820      	ldrb	r0, [r4, #0]
 80026a8:	0033      	movs	r3, r6
 80026aa:	002a      	movs	r2, r5
 80026ac:	f7ff ffd9 	bl	8002662 <u8g2_is_intersection_decision_tree>
}
 80026b0:	bd70      	pop	{r4, r5, r6, pc}

080026b2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026b4:	ac08      	add	r4, sp, #32
 80026b6:	7824      	ldrb	r4, [r4, #0]
 80026b8:	9401      	str	r4, [sp, #4]
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80026ba:	2407      	movs	r4, #7
 80026bc:	4014      	ands	r4, r2
 80026be:	46a4      	mov	ip, r4
  mask = 1;
  mask <<= bit_pos;
 80026c0:	2401      	movs	r4, #1
 80026c2:	4665      	mov	r5, ip
 80026c4:	40ac      	lsls	r4, r5

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 80026c6:	0005      	movs	r5, r0
 80026c8:	3586      	adds	r5, #134	; 0x86
 80026ca:	782e      	ldrb	r6, [r5, #0]
  mask <<= bit_pos;
 80026cc:	b2e4      	uxtb	r4, r4
  or_mask = 0;
 80026ce:	2500      	movs	r5, #0
  if ( u8g2->draw_color <= 1 )
 80026d0:	2e01      	cmp	r6, #1
 80026d2:	d802      	bhi.n	80026da <u8g2_ll_hvline_vertical_top_lsb+0x28>
    or_mask  = mask;
 80026d4:	0025      	movs	r5, r4
  if ( u8g2->draw_color != 1 )
 80026d6:	2e01      	cmp	r6, #1
 80026d8:	d014      	beq.n	8002704 <u8g2_ll_hvline_vertical_top_lsb+0x52>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 80026da:	2707      	movs	r7, #7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80026dc:	6806      	ldr	r6, [r0, #0]
  offset &= ~7;
 80026de:	43ba      	bics	r2, r7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80026e0:	7c36      	ldrb	r6, [r6, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 80026e2:	4372      	muls	r2, r6
  ptr += x;
 80026e4:	1851      	adds	r1, r2, r1
 80026e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80026e8:	1851      	adds	r1, r2, r1
  
  if ( dir == 0 )
 80026ea:	9a01      	ldr	r2, [sp, #4]
 80026ec:	2a00      	cmp	r2, #0
 80026ee:	d10b      	bne.n	8002708 <u8g2_ll_hvline_vertical_top_lsb+0x56>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80026f0:	780a      	ldrb	r2, [r1, #0]
	*ptr ^= xor_mask;
	ptr++;
	len--;
 80026f2:	3b01      	subs	r3, #1
	*ptr |= or_mask;
 80026f4:	432a      	orrs	r2, r5
	*ptr ^= xor_mask;
 80026f6:	4062      	eors	r2, r4
	len--;
 80026f8:	b2db      	uxtb	r3, r3
	*ptr ^= xor_mask;
 80026fa:	700a      	strb	r2, [r1, #0]
	ptr++;
 80026fc:	3101      	adds	r1, #1
      } while( len != 0 );
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f6      	bne.n	80026f0 <u8g2_ll_hvline_vertical_top_lsb+0x3e>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002702:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  xor_mask = 0;
 8002704:	2400      	movs	r4, #0
 8002706:	e7e8      	b.n	80026da <u8g2_ll_hvline_vertical_top_lsb+0x28>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002708:	0002      	movs	r2, r0
	  xor_mask = 1;
 800270a:	2601      	movs	r6, #1
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800270c:	323e      	adds	r2, #62	; 0x3e
 800270e:	9201      	str	r2, [sp, #4]
      *ptr |= or_mask;
 8002710:	780a      	ldrb	r2, [r1, #0]
      len--;
 8002712:	3b01      	subs	r3, #1
      *ptr |= or_mask;
 8002714:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 8002716:	4062      	eors	r2, r4
 8002718:	700a      	strb	r2, [r1, #0]
      bit_pos++;
 800271a:	4662      	mov	r2, ip
 800271c:	3201      	adds	r2, #1
      bit_pos &= 7;
 800271e:	403a      	ands	r2, r7
 8002720:	4694      	mov	ip, r2
      len--;
 8002722:	b2db      	uxtb	r3, r3
      if ( bit_pos == 0 )
 8002724:	2a00      	cmp	r2, #0
 8002726:	d10c      	bne.n	8002742 <u8g2_ll_hvline_vertical_top_lsb+0x90>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002728:	9a01      	ldr	r2, [sp, #4]
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	1889      	adds	r1, r1, r2
	if ( u8g2->draw_color <= 1 )
 800272e:	0002      	movs	r2, r0
 8002730:	3286      	adds	r2, #134	; 0x86
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	2a01      	cmp	r2, #1
 8002736:	d802      	bhi.n	800273e <u8g2_ll_hvline_vertical_top_lsb+0x8c>
	  or_mask  = 1;
 8002738:	0035      	movs	r5, r6
	if ( u8g2->draw_color != 1 )
 800273a:	2a01      	cmp	r2, #1
 800273c:	d005      	beq.n	800274a <u8g2_ll_hvline_vertical_top_lsb+0x98>
	  xor_mask = 1;
 800273e:	0034      	movs	r4, r6
 8002740:	e003      	b.n	800274a <u8g2_ll_hvline_vertical_top_lsb+0x98>
	or_mask <<= 1;
 8002742:	006d      	lsls	r5, r5, #1
	xor_mask <<= 1;
 8002744:	0064      	lsls	r4, r4, #1
	or_mask <<= 1;
 8002746:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 8002748:	b2e4      	uxtb	r4, r4
    } while( len != 0 );
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1e0      	bne.n	8002710 <u8g2_ll_hvline_vertical_top_lsb+0x5e>
 800274e:	e7d8      	b.n	8002702 <u8g2_ll_hvline_vertical_top_lsb+0x50>

08002750 <u8g2_update_dimension_common>:
static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002750:	0003      	movs	r3, r0
{
 8002752:	b570      	push	{r4, r5, r6, lr}
  t = u8g2->tile_buf_height;
 8002754:	333c      	adds	r3, #60	; 0x3c
 8002756:	781a      	ldrb	r2, [r3, #0]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002758:	6804      	ldr	r4, [r0, #0]
  t *= 8;
 800275a:	00d1      	lsls	r1, r2, #3
  u8g2->pixel_buf_height = t;
 800275c:	70d9      	strb	r1, [r3, #3]
  
  t = display_info->tile_width;
 800275e:	7c23      	ldrb	r3, [r4, #16]
 8002760:	1c19      	adds	r1, r3, #0
 8002762:	2b1f      	cmp	r3, #31
 8002764:	d900      	bls.n	8002768 <u8g2_update_dimension_common+0x18>
 8002766:	211f      	movs	r1, #31
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
 8002768:	0003      	movs	r3, r0
 800276a:	b2c9      	uxtb	r1, r1
  t *= 8;
 800276c:	00c9      	lsls	r1, r1, #3
  u8g2->pixel_buf_width = t;
 800276e:	333e      	adds	r3, #62	; 0x3e
 8002770:	7019      	strb	r1, [r3, #0]
  
  t = u8g2->tile_curr_row;
  t *= 8;
  u8g2->pixel_curr_row = t;
 8002772:	0001      	movs	r1, r0
  t = u8g2->tile_curr_row;
 8002774:	3b01      	subs	r3, #1
 8002776:	781d      	ldrb	r5, [r3, #0]
  u8g2->pixel_curr_row = t;
 8002778:	3140      	adds	r1, #64	; 0x40
  t *= 8;
 800277a:	00eb      	lsls	r3, r5, #3
 800277c:	b2db      	uxtb	r3, r3
  u8g2->pixel_curr_row = t;
 800277e:	700b      	strb	r3, [r1, #0]
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002780:	7c61      	ldrb	r1, [r4, #17]
 8002782:	1956      	adds	r6, r2, r5
 8002784:	428e      	cmp	r6, r1
 8002786:	dd01      	ble.n	800278c <u8g2_update_dimension_common+0x3c>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002788:	1b4a      	subs	r2, r1, r5
 800278a:	b2d2      	uxtb	r2, r2
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800278c:	0001      	movs	r1, r0
  t *= 8;
 800278e:	00d2      	lsls	r2, r2, #3
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002790:	3141      	adds	r1, #65	; 0x41
 8002792:	700b      	strb	r3, [r1, #0]
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 8002794:	189b      	adds	r3, r3, r2
 8002796:	0002      	movs	r2, r0
 8002798:	3242      	adds	r2, #66	; 0x42
 800279a:	7013      	strb	r3, [r2, #0]
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800279c:	0003      	movs	r3, r0
 800279e:	22f0      	movs	r2, #240	; 0xf0
 80027a0:	3343      	adds	r3, #67	; 0x43
 80027a2:	701a      	strb	r2, [r3, #0]
  if ( display_info->pixel_width <= 240 )
 80027a4:	8aa2      	ldrh	r2, [r4, #20]
 80027a6:	2af0      	cmp	r2, #240	; 0xf0
 80027a8:	d800      	bhi.n	80027ac <u8g2_update_dimension_common+0x5c>
    u8g2->width = display_info->pixel_width;
 80027aa:	701a      	strb	r2, [r3, #0]
  u8g2->height = display_info->pixel_height;
 80027ac:	8ae3      	ldrh	r3, [r4, #22]
 80027ae:	3044      	adds	r0, #68	; 0x44
 80027b0:	7003      	strb	r3, [r0, #0]
#endif

}
 80027b2:	bd70      	pop	{r4, r5, r6, pc}

080027b4 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80027b4:	b513      	push	{r0, r1, r4, lr}
 80027b6:	ac04      	add	r4, sp, #16
 80027b8:	7824      	ldrb	r4, [r4, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80027ba:	9400      	str	r4, [sp, #0]
 80027bc:	f7ff fed5 	bl	800256a <u8g2_draw_hv_line_2dir>
}
 80027c0:	bd13      	pop	{r0, r1, r4, pc}

080027c2 <u8g2_apply_clip_window>:
{
 80027c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80027c4:	0006      	movs	r6, r0
 80027c6:	0005      	movs	r5, r0
 80027c8:	0007      	movs	r7, r0
{
 80027ca:	0004      	movs	r4, r0
 80027cc:	b085      	sub	sp, #20
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80027ce:	304c      	adds	r0, #76	; 0x4c
 80027d0:	364a      	adds	r6, #74	; 0x4a
 80027d2:	354b      	adds	r5, #75	; 0x4b
 80027d4:	3749      	adds	r7, #73	; 0x49
 80027d6:	7833      	ldrb	r3, [r6, #0]
 80027d8:	782a      	ldrb	r2, [r5, #0]
 80027da:	7839      	ldrb	r1, [r7, #0]
 80027dc:	9003      	str	r0, [sp, #12]
 80027de:	7800      	ldrb	r0, [r0, #0]
 80027e0:	9000      	str	r0, [sp, #0]
 80027e2:	0020      	movs	r0, r4
 80027e4:	f7ff ff4c 	bl	8002680 <u8g2_IsIntersection>
 80027e8:	0023      	movs	r3, r4
 80027ea:	3380      	adds	r3, #128	; 0x80
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d102      	bne.n	80027f6 <u8g2_apply_clip_window+0x34>
    u8g2->is_page_clip_window_intersection = 0;
 80027f0:	7018      	strb	r0, [r3, #0]
}
 80027f2:	b005      	add	sp, #20
 80027f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u8g2->is_page_clip_window_intersection = 1;
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80027fa:	0023      	movs	r3, r4
 80027fc:	3345      	adds	r3, #69	; 0x45
 80027fe:	783a      	ldrb	r2, [r7, #0]
 8002800:	7819      	ldrb	r1, [r3, #0]
 8002802:	4291      	cmp	r1, r2
 8002804:	d200      	bcs.n	8002808 <u8g2_apply_clip_window+0x46>
      u8g2->user_x0 = u8g2->clip_x0;
 8002806:	701a      	strb	r2, [r3, #0]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002808:	0023      	movs	r3, r4
 800280a:	3346      	adds	r3, #70	; 0x46
 800280c:	7832      	ldrb	r2, [r6, #0]
 800280e:	7819      	ldrb	r1, [r3, #0]
 8002810:	4291      	cmp	r1, r2
 8002812:	d900      	bls.n	8002816 <u8g2_apply_clip_window+0x54>
      u8g2->user_x1 = u8g2->clip_x1;
 8002814:	701a      	strb	r2, [r3, #0]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002816:	0023      	movs	r3, r4
 8002818:	3347      	adds	r3, #71	; 0x47
 800281a:	782a      	ldrb	r2, [r5, #0]
 800281c:	7819      	ldrb	r1, [r3, #0]
 800281e:	4291      	cmp	r1, r2
 8002820:	d200      	bcs.n	8002824 <u8g2_apply_clip_window+0x62>
      u8g2->user_y0 = u8g2->clip_y0;
 8002822:	701a      	strb	r2, [r3, #0]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002824:	9b03      	ldr	r3, [sp, #12]
 8002826:	3448      	adds	r4, #72	; 0x48
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	7822      	ldrb	r2, [r4, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d9e0      	bls.n	80027f2 <u8g2_apply_clip_window+0x30>
      u8g2->user_y1 = u8g2->clip_y1;
 8002830:	7023      	strb	r3, [r4, #0]
}
 8002832:	e7de      	b.n	80027f2 <u8g2_apply_clip_window+0x30>

08002834 <u8g2_update_page_win_r0>:
  u8g2->user_x0 = 0;
 8002834:	0003      	movs	r3, r0
 8002836:	2200      	movs	r2, #0
 8002838:	3345      	adds	r3, #69	; 0x45
{
 800283a:	b510      	push	{r4, lr}
  u8g2->user_x0 = 0;
 800283c:	701a      	strb	r2, [r3, #0]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800283e:	0002      	movs	r2, r0
 8002840:	3243      	adds	r2, #67	; 0x43
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	705a      	strb	r2, [r3, #1]
  u8g2->user_y0 = u8g2->buf_y0;
 8002846:	0002      	movs	r2, r0
 8002848:	3241      	adds	r2, #65	; 0x41
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	709a      	strb	r2, [r3, #2]
  u8g2->user_y1 = u8g2->buf_y1;
 800284e:	0002      	movs	r2, r0
 8002850:	3242      	adds	r2, #66	; 0x42
 8002852:	7812      	ldrb	r2, [r2, #0]
 8002854:	70da      	strb	r2, [r3, #3]
  u8g2_apply_clip_window(u8g2);
 8002856:	f7ff ffb4 	bl	80027c2 <u8g2_apply_clip_window>
}
 800285a:	bd10      	pop	{r4, pc}

0800285c <u8g2_update_dimension_r0>:
 800285c:	b510      	push	{r4, lr}
 800285e:	f7ff ff77 	bl	8002750 <u8g2_update_dimension_common>
 8002862:	bd10      	pop	{r4, pc}

08002864 <u8g2_SetMaxClipWindow>:
  u8g2->clip_x0 = 0;
 8002864:	0002      	movs	r2, r0
 8002866:	2300      	movs	r3, #0
 8002868:	3249      	adds	r2, #73	; 0x49
{
 800286a:	b510      	push	{r4, lr}
  u8g2->clip_x0 = 0;
 800286c:	7013      	strb	r3, [r2, #0]
  u8g2->clip_y0 = 0;
 800286e:	7093      	strb	r3, [r2, #2]
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002870:	3201      	adds	r2, #1
 8002872:	33ff      	adds	r3, #255	; 0xff
 8002874:	7013      	strb	r3, [r2, #0]
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002876:	7093      	strb	r3, [r2, #2]
  u8g2->cb->update_page_win(u8g2);
 8002878:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4798      	blx	r3
}
 800287e:	bd10      	pop	{r4, pc}

08002880 <u8g2_SetupBuffer>:
{
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	0004      	movs	r4, r0
  u8g2->ll_hvline = ll_hvline_cb;
 8002884:	6323      	str	r3, [r4, #48]	; 0x30
  u8g2->tile_buf_height = tile_buf_height;
 8002886:	0023      	movs	r3, r4
  u8g2->font = NULL;
 8002888:	2500      	movs	r5, #0
  u8g2->tile_buf_height = tile_buf_height;
 800288a:	333c      	adds	r3, #60	; 0x3c
  u8g2->tile_buf_ptr = buf;
 800288c:	63a1      	str	r1, [r4, #56]	; 0x38
  u8g2->font = NULL;
 800288e:	6525      	str	r5, [r4, #80]	; 0x50
  u8g2->tile_buf_height = tile_buf_height;
 8002890:	701a      	strb	r2, [r3, #0]
  u8g2->tile_curr_row = 0;
 8002892:	705d      	strb	r5, [r3, #1]
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002894:	3327      	adds	r3, #39	; 0x27
 8002896:	701d      	strb	r5, [r3, #0]
  u8g2->draw_color = 1;
 8002898:	0022      	movs	r2, r4
  u8g2->bitmap_transparency = 0;
 800289a:	3322      	adds	r3, #34	; 0x22
 800289c:	701d      	strb	r5, [r3, #0]
  u8g2->draw_color = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	3286      	adds	r2, #134	; 0x86
{
 80028a2:	9804      	ldr	r0, [sp, #16]
  u8g2->draw_color = 1;
 80028a4:	7013      	strb	r3, [r2, #0]
  u8g2->is_auto_page_clear = 1;
 80028a6:	7053      	strb	r3, [r2, #1]
  u8g2->cb->update_dimension(u8g2);
 80028a8:	6803      	ldr	r3, [r0, #0]
  u8g2->cb = u8g2_cb;
 80028aa:	6360      	str	r0, [r4, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80028ac:	0020      	movs	r0, r4
 80028ae:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80028b0:	0020      	movs	r0, r4
 80028b2:	f7ff ffd7 	bl	8002864 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80028b6:	0020      	movs	r0, r4
  u8g2->font_decode.dir = 0;
 80028b8:	3466      	adds	r4, #102	; 0x66
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80028ba:	f7ff fe43 	bl	8002544 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 80028be:	7025      	strb	r5, [r4, #0]
}
 80028c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080028c4 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80028c4:	2900      	cmp	r1, #0
 80028c6:	d002      	beq.n	80028ce <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 80028c8:	b288      	uxth	r0, r1
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80028ca:	290a      	cmp	r1, #10
 80028cc:	d100      	bne.n	80028d0 <u8x8_ascii_next+0xc>
    return 0x0ffff;	/* end of string detected*/
 80028ce:	4801      	ldr	r0, [pc, #4]	; (80028d4 <u8x8_ascii_next+0x10>)
}
 80028d0:	4770      	bx	lr
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	0000ffff 	.word	0x0000ffff

080028d8 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80028d8:	2300      	movs	r3, #0
 80028da:	3008      	adds	r0, #8
 80028dc:	77c3      	strb	r3, [r0, #31]
}
 80028de:	4770      	bx	lr

080028e0 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80028e0:	b510      	push	{r4, lr}
 80028e2:	0013      	movs	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80028e4:	6904      	ldr	r4, [r0, #16]
 80028e6:	000a      	movs	r2, r1
 80028e8:	2117      	movs	r1, #23
 80028ea:	47a0      	blx	r4
}
 80028ec:	bd10      	pop	{r4, pc}

080028ee <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80028ee:	b507      	push	{r0, r1, r2, lr}
 80028f0:	466b      	mov	r3, sp
 80028f2:	1dda      	adds	r2, r3, #7
 80028f4:	7011      	strb	r1, [r2, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80028f6:	2101      	movs	r1, #1
 80028f8:	f7ff fff2 	bl	80028e0 <u8x8_byte_SendBytes>
}
 80028fc:	bd0e      	pop	{r1, r2, r3, pc}

080028fe <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80028fe:	2300      	movs	r3, #0
{
 8002900:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002902:	001a      	movs	r2, r3
 8002904:	6904      	ldr	r4, [r0, #16]
 8002906:	2118      	movs	r1, #24
 8002908:	47a0      	blx	r4
}
 800290a:	bd10      	pop	{r4, pc}

0800290c <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800290c:	2300      	movs	r3, #0
{
 800290e:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002910:	001a      	movs	r2, r3
 8002912:	6904      	ldr	r4, [r0, #16]
 8002914:	2119      	movs	r1, #25
 8002916:	47a0      	blx	r4
}
 8002918:	bd10      	pop	{r4, pc}

0800291a <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800291a:	b570      	push	{r4, r5, r6, lr}
 800291c:	0004      	movs	r4, r0
 800291e:	0016      	movs	r6, r2
 8002920:	000d      	movs	r5, r1
    u8x8_byte_StartTransfer(u8x8);    
 8002922:	f7ff ffec 	bl	80028fe <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002926:	2140      	movs	r1, #64	; 0x40
 8002928:	0020      	movs	r0, r4
 800292a:	f7ff ffe0 	bl	80028ee <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800292e:	0033      	movs	r3, r6
 8002930:	002a      	movs	r2, r5
 8002932:	2117      	movs	r1, #23
 8002934:	6925      	ldr	r5, [r4, #16]
 8002936:	0020      	movs	r0, r4
 8002938:	47a8      	blx	r5
    u8x8_byte_EndTransfer(u8x8);
 800293a:	0020      	movs	r0, r4
 800293c:	f7ff ffe6 	bl	800290c <u8x8_byte_EndTransfer>
}
 8002940:	bd70      	pop	{r4, r5, r6, pc}

08002942 <u8x8_cad_SendCmd>:
{
 8002942:	b510      	push	{r4, lr}
 8002944:	000a      	movs	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002946:	68c4      	ldr	r4, [r0, #12]
 8002948:	2300      	movs	r3, #0
 800294a:	2115      	movs	r1, #21
 800294c:	47a0      	blx	r4
}
 800294e:	bd10      	pop	{r4, pc}

08002950 <u8x8_cad_SendArg>:
{
 8002950:	b510      	push	{r4, lr}
 8002952:	000a      	movs	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002954:	68c4      	ldr	r4, [r0, #12]
 8002956:	2300      	movs	r3, #0
 8002958:	2116      	movs	r1, #22
 800295a:	47a0      	blx	r4
}
 800295c:	bd10      	pop	{r4, pc}

0800295e <u8x8_cad_SendData>:
{
 800295e:	b510      	push	{r4, lr}
 8002960:	0013      	movs	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002962:	68c4      	ldr	r4, [r0, #12]
 8002964:	000a      	movs	r2, r1
 8002966:	2117      	movs	r1, #23
 8002968:	47a0      	blx	r4
}
 800296a:	bd10      	pop	{r4, pc}

0800296c <u8x8_cad_StartTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800296c:	2300      	movs	r3, #0
{
 800296e:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002970:	001a      	movs	r2, r3
 8002972:	68c4      	ldr	r4, [r0, #12]
 8002974:	2118      	movs	r1, #24
 8002976:	47a0      	blx	r4
}
 8002978:	bd10      	pop	{r4, pc}

0800297a <u8x8_cad_EndTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800297a:	2300      	movs	r3, #0
{
 800297c:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800297e:	001a      	movs	r2, r3
 8002980:	68c4      	ldr	r4, [r0, #12]
 8002982:	2119      	movs	r1, #25
 8002984:	47a0      	blx	r4
}
 8002986:	bd10      	pop	{r4, pc}

08002988 <u8x8_cad_SendSequence>:
{
 8002988:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800298a:	0005      	movs	r5, r0
 800298c:	000c      	movs	r4, r1
    cmd = *data;
 800298e:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 8002990:	2917      	cmp	r1, #23
 8002992:	d018      	beq.n	80029c6 <u8x8_cad_SendSequence+0x3e>
 8002994:	d802      	bhi.n	800299c <u8x8_cad_SendSequence+0x14>
 8002996:	2915      	cmp	r1, #21
 8002998:	d20c      	bcs.n	80029b4 <u8x8_cad_SendSequence+0x2c>
}
 800299a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    switch( cmd )
 800299c:	2919      	cmp	r1, #25
 800299e:	d91b      	bls.n	80029d8 <u8x8_cad_SendSequence+0x50>
 80029a0:	29fe      	cmp	r1, #254	; 0xfe
 80029a2:	d1fa      	bne.n	800299a <u8x8_cad_SendSequence+0x12>
	  v = *data;
 80029a4:	466b      	mov	r3, sp
 80029a6:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80029a8:	2129      	movs	r1, #41	; 0x29
 80029aa:	0028      	movs	r0, r5
	  v = *data;
 80029ac:	71da      	strb	r2, [r3, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80029ae:	f000 f954 	bl	8002c5a <u8x8_gpio_call>
 80029b2:	e006      	b.n	80029c2 <u8x8_cad_SendSequence+0x3a>
	  v = *data;
 80029b4:	466b      	mov	r3, sp
 80029b6:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80029b8:	0028      	movs	r0, r5
	  v = *data;
 80029ba:	71da      	strb	r2, [r3, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80029bc:	68ee      	ldr	r6, [r5, #12]
 80029be:	2300      	movs	r3, #0
 80029c0:	47b0      	blx	r6
	  data++;
 80029c2:	3402      	adds	r4, #2
	  break;
 80029c4:	e7e3      	b.n	800298e <u8x8_cad_SendSequence+0x6>
	  v = *data;
 80029c6:	466b      	mov	r3, sp
 80029c8:	1dda      	adds	r2, r3, #7
 80029ca:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80029cc:	2101      	movs	r1, #1
 80029ce:	0028      	movs	r0, r5
	  v = *data;
 80029d0:	7013      	strb	r3, [r2, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80029d2:	f7ff ffc4 	bl	800295e <u8x8_cad_SendData>
 80029d6:	e7f4      	b.n	80029c2 <u8x8_cad_SendSequence+0x3a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80029d8:	2300      	movs	r3, #0
 80029da:	0028      	movs	r0, r5
 80029dc:	001a      	movs	r2, r3
 80029de:	68ee      	ldr	r6, [r5, #12]
    data++;
 80029e0:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80029e2:	47b0      	blx	r6
	  break;
 80029e4:	e7d3      	b.n	800298e <u8x8_cad_SendSequence+0x6>
	...

080029e8 <u8x8_cad_ssd13xx_fast_i2c>:
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80029e8:	3914      	subs	r1, #20
{
 80029ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ec:	0004      	movs	r4, r0
 80029ee:	0015      	movs	r5, r2
 80029f0:	001e      	movs	r6, r3
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    default:
      return 0;
 80029f2:	2000      	movs	r0, #0
  switch(msg)
 80029f4:	2905      	cmp	r1, #5
 80029f6:	d819      	bhi.n	8002a2c <u8x8_cad_ssd13xx_fast_i2c+0x44>
 80029f8:	0008      	movs	r0, r1
 80029fa:	f7fd fb85 	bl	8000108 <__gnu_thumb1_case_uqi>
 80029fe:	0337      	.short	0x0337
 8002a00:	48441e18 	.word	0x48441e18
      if ( in_transfer != 0 )
 8002a04:	4e27      	ldr	r6, [pc, #156]	; (8002aa4 <u8x8_cad_ssd13xx_fast_i2c+0xbc>)
 8002a06:	7833      	ldrb	r3, [r6, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <u8x8_cad_ssd13xx_fast_i2c+0x2a>
	 u8x8_byte_EndTransfer(u8x8); 
 8002a0c:	0020      	movs	r0, r4
 8002a0e:	f7ff ff7d 	bl	800290c <u8x8_byte_EndTransfer>
      u8x8_byte_StartTransfer(u8x8);
 8002a12:	0020      	movs	r0, r4
 8002a14:	f7ff ff73 	bl	80028fe <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002a18:	2100      	movs	r1, #0
 8002a1a:	0020      	movs	r0, r4
 8002a1c:	f7ff ff67 	bl	80028ee <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002a20:	0029      	movs	r1, r5
 8002a22:	0020      	movs	r0, r4
 8002a24:	f7ff ff63 	bl	80028ee <u8x8_byte_SendByte>
      in_transfer = 1;
 8002a28:	2001      	movs	r0, #1
 8002a2a:	7030      	strb	r0, [r6, #0]
  }
  return 1;
}
 8002a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_byte_SendByte(u8x8, arg_int);
 8002a2e:	0011      	movs	r1, r2
 8002a30:	0020      	movs	r0, r4
 8002a32:	f7ff ff5c 	bl	80028ee <u8x8_byte_SendByte>
  return 1;
 8002a36:	2001      	movs	r0, #1
      break;
 8002a38:	e7f8      	b.n	8002a2c <u8x8_cad_ssd13xx_fast_i2c+0x44>
      if ( in_transfer != 0 )
 8002a3a:	4f1a      	ldr	r7, [pc, #104]	; (8002aa4 <u8x8_cad_ssd13xx_fast_i2c+0xbc>)
 8002a3c:	783b      	ldrb	r3, [r7, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <u8x8_cad_ssd13xx_fast_i2c+0x60>
	u8x8_byte_EndTransfer(u8x8); 
 8002a42:	0020      	movs	r0, r4
 8002a44:	f7ff ff62 	bl	800290c <u8x8_byte_EndTransfer>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002a48:	0032      	movs	r2, r6
       while( arg_int > 24 )
 8002a4a:	2d18      	cmp	r5, #24
 8002a4c:	d806      	bhi.n	8002a5c <u8x8_cad_ssd13xx_fast_i2c+0x74>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002a4e:	0029      	movs	r1, r5
 8002a50:	0020      	movs	r0, r4
 8002a52:	f7ff ff62 	bl	800291a <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	703b      	strb	r3, [r7, #0]
 8002a5a:	e7ec      	b.n	8002a36 <u8x8_cad_ssd13xx_fast_i2c+0x4e>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002a5c:	2118      	movs	r1, #24
 8002a5e:	0020      	movs	r0, r4
	arg_int-=24;
 8002a60:	3d18      	subs	r5, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002a62:	f7ff ff5a 	bl	800291a <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002a66:	b2ed      	uxtb	r5, r5
	p+=24;
 8002a68:	3618      	adds	r6, #24
 8002a6a:	e7ed      	b.n	8002a48 <u8x8_cad_ssd13xx_fast_i2c+0x60>
      if ( u8x8->i2c_address == 255 )
 8002a6c:	1d63      	adds	r3, r4, #5
 8002a6e:	7fda      	ldrb	r2, [r3, #31]
 8002a70:	2aff      	cmp	r2, #255	; 0xff
 8002a72:	d101      	bne.n	8002a78 <u8x8_cad_ssd13xx_fast_i2c+0x90>
	u8x8->i2c_address = 0x078;
 8002a74:	3a87      	subs	r2, #135	; 0x87
 8002a76:	77da      	strb	r2, [r3, #31]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002a78:	6927      	ldr	r7, [r4, #16]
 8002a7a:	0033      	movs	r3, r6
 8002a7c:	002a      	movs	r2, r5
 8002a7e:	2114      	movs	r1, #20
 8002a80:	0020      	movs	r0, r4
 8002a82:	47b8      	blx	r7
 8002a84:	e7d2      	b.n	8002a2c <u8x8_cad_ssd13xx_fast_i2c+0x44>
      in_transfer = 0;
 8002a86:	2200      	movs	r2, #0
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <u8x8_cad_ssd13xx_fast_i2c+0xbc>)
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e7d3      	b.n	8002a36 <u8x8_cad_ssd13xx_fast_i2c+0x4e>
      if ( in_transfer != 0 )
 8002a8e:	4d05      	ldr	r5, [pc, #20]	; (8002aa4 <u8x8_cad_ssd13xx_fast_i2c+0xbc>)
 8002a90:	782b      	ldrb	r3, [r5, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <u8x8_cad_ssd13xx_fast_i2c+0xb4>
	u8x8_byte_EndTransfer(u8x8); 
 8002a96:	0020      	movs	r0, r4
 8002a98:	f7ff ff38 	bl	800290c <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	702b      	strb	r3, [r5, #0]
 8002aa0:	e7c9      	b.n	8002a36 <u8x8_cad_ssd13xx_fast_i2c+0x4e>
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	200001c4 	.word	0x200001c4

08002aa8 <u8x8_d_ssd1306_128x32_generic>:

static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002aa8:	390a      	subs	r1, #10
{
 8002aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aac:	0004      	movs	r4, r0
 8002aae:	0016      	movs	r6, r2
 8002ab0:	001f      	movs	r7, r3
  switch(msg)
 8002ab2:	0008      	movs	r0, r1
 8002ab4:	2905      	cmp	r1, #5
 8002ab6:	d859      	bhi.n	8002b6c <u8x8_d_ssd1306_128x32_generic+0xc4>
 8002ab8:	f7fd fb26 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002abc:	11580c03 	.word	0x11580c03
 8002ac0:	3223      	.short	0x3223
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002ac2:	0020      	movs	r0, r4
 8002ac4:	f000 f871 	bl	8002baa <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 8002ac8:	4929      	ldr	r1, [pc, #164]	; (8002b70 <u8x8_d_ssd1306_128x32_generic+0xc8>)
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8002aca:	0020      	movs	r0, r4
 8002acc:	f7ff ff5c 	bl	8002988 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8002ad0:	2001      	movs	r0, #1
}
 8002ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 8002ad4:	4927      	ldr	r1, [pc, #156]	; (8002b74 <u8x8_d_ssd1306_128x32_generic+0xcc>)
      if ( arg_int == 0 )
 8002ad6:	2a00      	cmp	r2, #0
 8002ad8:	d0f7      	beq.n	8002aca <u8x8_d_ssd1306_128x32_generic+0x22>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8002ada:	4927      	ldr	r1, [pc, #156]	; (8002b78 <u8x8_d_ssd1306_128x32_generic+0xd0>)
 8002adc:	e7f5      	b.n	8002aca <u8x8_d_ssd1306_128x32_generic+0x22>
 8002ade:	1ce5      	adds	r5, r4, #3
      if ( arg_int == 0 )
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d107      	bne.n	8002af4 <u8x8_d_ssd1306_128x32_generic+0x4c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8002ae4:	4925      	ldr	r1, [pc, #148]	; (8002b7c <u8x8_d_ssd1306_128x32_generic+0xd4>)
 8002ae6:	0020      	movs	r0, r4
 8002ae8:	f7ff ff4e 	bl	8002988 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	7c9b      	ldrb	r3, [r3, #18]
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002af0:	77eb      	strb	r3, [r5, #31]
 8002af2:	e7ed      	b.n	8002ad0 <u8x8_d_ssd1306_128x32_generic+0x28>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 8002af4:	4922      	ldr	r1, [pc, #136]	; (8002b80 <u8x8_d_ssd1306_128x32_generic+0xd8>)
 8002af6:	0020      	movs	r0, r4
 8002af8:	f7ff ff46 	bl	8002988 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	7cdb      	ldrb	r3, [r3, #19]
 8002b00:	e7f6      	b.n	8002af0 <u8x8_d_ssd1306_128x32_generic+0x48>
      u8x8_cad_StartTransfer(u8x8);
 8002b02:	0020      	movs	r0, r4
 8002b04:	f7ff ff32 	bl	800296c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002b08:	2181      	movs	r1, #129	; 0x81
 8002b0a:	0020      	movs	r0, r4
 8002b0c:	f7ff ff19 	bl	8002942 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002b10:	0031      	movs	r1, r6
 8002b12:	0020      	movs	r0, r4
 8002b14:	f7ff ff1c 	bl	8002950 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002b18:	0020      	movs	r0, r4
 8002b1a:	f7ff ff2e 	bl	800297a <u8x8_cad_EndTransfer>
 8002b1e:	e7d7      	b.n	8002ad0 <u8x8_d_ssd1306_128x32_generic+0x28>
      u8x8_cad_StartTransfer(u8x8);
 8002b20:	0020      	movs	r0, r4
 8002b22:	f7ff ff23 	bl	800296c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002b26:	797d      	ldrb	r5, [r7, #5]
      x += u8x8->x_offset;
 8002b28:	1ce3      	adds	r3, r4, #3
 8002b2a:	7fd9      	ldrb	r1, [r3, #31]
      x *= 8;
 8002b2c:	00ed      	lsls	r5, r5, #3
      x += u8x8->x_offset;
 8002b2e:	186d      	adds	r5, r5, r1
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002b30:	2110      	movs	r1, #16
      x += u8x8->x_offset;
 8002b32:	b2ed      	uxtb	r5, r5
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002b34:	092b      	lsrs	r3, r5, #4
 8002b36:	4319      	orrs	r1, r3
 8002b38:	0020      	movs	r0, r4
 8002b3a:	f7ff ff02 	bl	8002942 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002b3e:	210f      	movs	r1, #15
 8002b40:	0020      	movs	r0, r4
 8002b42:	4029      	ands	r1, r5
 8002b44:	f7ff fefd 	bl	8002942 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002b48:	23b0      	movs	r3, #176	; 0xb0
 8002b4a:	79b9      	ldrb	r1, [r7, #6]
 8002b4c:	0020      	movs	r0, r4
 8002b4e:	4319      	orrs	r1, r3
 8002b50:	f7ff fef7 	bl	8002942 <u8x8_cad_SendCmd>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002b54:	7939      	ldrb	r1, [r7, #4]
	arg_int--;
 8002b56:	3e01      	subs	r6, #1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002b58:	00c9      	lsls	r1, r1, #3
 8002b5a:	b2c9      	uxtb	r1, r1
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	0020      	movs	r0, r4
	arg_int--;
 8002b60:	b2f6      	uxtb	r6, r6
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002b62:	f7ff fefc 	bl	800295e <u8x8_cad_SendData>
      } while( arg_int > 0 );
 8002b66:	2e00      	cmp	r6, #0
 8002b68:	d1f4      	bne.n	8002b54 <u8x8_d_ssd1306_128x32_generic+0xac>
 8002b6a:	e7d5      	b.n	8002b18 <u8x8_d_ssd1306_128x32_generic+0x70>
      return 0;
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	e7b0      	b.n	8002ad2 <u8x8_d_ssd1306_128x32_generic+0x2a>
 8002b70:	08003e86 	.word	0x08003e86
 8002b74:	08003ebb 	.word	0x08003ebb
 8002b78:	08003ec0 	.word	0x08003ec0
 8002b7c:	08003e78 	.word	0x08003e78
 8002b80:	08003e7f 	.word	0x08003e7f

08002b84 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002b84:	b510      	push	{r4, lr}
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8002b86:	2909      	cmp	r1, #9
 8002b88:	d104      	bne.n	8002b94 <u8x8_d_ssd1306_128x32_univision+0x10>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 8002b8a:	4904      	ldr	r1, [pc, #16]	; (8002b9c <u8x8_d_ssd1306_128x32_univision+0x18>)
 8002b8c:	f000 f808 	bl	8002ba0 <u8x8_d_helper_display_setup_memory>
      return 1;
 8002b90:	2001      	movs	r0, #1
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
}
 8002b92:	bd10      	pop	{r4, pc}
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 8002b94:	f7ff ff88 	bl	8002aa8 <u8x8_d_ssd1306_128x32_generic>
 8002b98:	e7fb      	b.n	8002b92 <u8x8_d_ssd1306_128x32_univision+0xe>
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	08003ec8 	.word	0x08003ec8

08002ba0 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002ba0:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002ba2:	7c8b      	ldrb	r3, [r1, #18]
 8002ba4:	3003      	adds	r0, #3
 8002ba6:	77c3      	strb	r3, [r0, #31]
}
 8002ba8:	4770      	bx	lr

08002baa <u8x8_d_helper_display_init>:
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002baa:	2300      	movs	r3, #0
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
      u8x8_gpio_Init(u8x8);
 8002bae:	001a      	movs	r2, r3
 8002bb0:	2128      	movs	r1, #40	; 0x28
 8002bb2:	6945      	ldr	r5, [r0, #20]
{
 8002bb4:	0004      	movs	r4, r0
      u8x8_gpio_Init(u8x8);
 8002bb6:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	68e5      	ldr	r5, [r4, #12]
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	2114      	movs	r1, #20
 8002bc0:	0020      	movs	r0, r4
 8002bc2:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002bc4:	0020      	movs	r0, r4
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	214b      	movs	r1, #75	; 0x4b
 8002bca:	f000 f846 	bl	8002c5a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	0020      	movs	r0, r4
 8002bd2:	791a      	ldrb	r2, [r3, #4]
 8002bd4:	2129      	movs	r1, #41	; 0x29
 8002bd6:	f000 f840 	bl	8002c5a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002bda:	0020      	movs	r0, r4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	214b      	movs	r1, #75	; 0x4b
 8002be0:	f000 f83b 	bl	8002c5a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	0020      	movs	r0, r4
 8002be8:	791a      	ldrb	r2, [r3, #4]
 8002bea:	2129      	movs	r1, #41	; 0x29
 8002bec:	f000 f835 	bl	8002c5a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002bf0:	0020      	movs	r0, r4
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	214b      	movs	r1, #75	; 0x4b
 8002bf6:	f000 f830 	bl	8002c5a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	2129      	movs	r1, #41	; 0x29
 8002bfe:	795a      	ldrb	r2, [r3, #5]
 8002c00:	0020      	movs	r0, r4
 8002c02:	f000 f82a 	bl	8002c5a <u8x8_gpio_call>
}    
 8002c06:	bd70      	pop	{r4, r5, r6, pc}

08002c08 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002c08:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002c0a:	466c      	mov	r4, sp
  tile.y_pos = y;
  tile.cnt = cnt;
 8002c0c:	7123      	strb	r3, [r4, #4]
  tile.tile_ptr = tile_ptr;
 8002c0e:	9b04      	ldr	r3, [sp, #16]
  tile.x_pos = x;
 8002c10:	7161      	strb	r1, [r4, #5]
  tile.y_pos = y;
 8002c12:	71a2      	strb	r2, [r4, #6]
  tile.tile_ptr = tile_ptr;
 8002c14:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002c16:	6884      	ldr	r4, [r0, #8]
 8002c18:	466b      	mov	r3, sp
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	210f      	movs	r1, #15
 8002c1e:	47a0      	blx	r4
}
 8002c20:	bd16      	pop	{r1, r2, r4, pc}

08002c22 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002c22:	2300      	movs	r3, #0
{
 8002c24:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002c26:	001a      	movs	r2, r3
 8002c28:	6884      	ldr	r4, [r0, #8]
 8002c2a:	2109      	movs	r1, #9
 8002c2c:	47a0      	blx	r4
}
 8002c2e:	bd10      	pop	{r4, pc}

08002c30 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002c30:	2300      	movs	r3, #0
{
 8002c32:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002c34:	001a      	movs	r2, r3
 8002c36:	6884      	ldr	r4, [r0, #8]
 8002c38:	210a      	movs	r1, #10
 8002c3a:	47a0      	blx	r4
}
 8002c3c:	bd10      	pop	{r4, pc}

08002c3e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002c3e:	b510      	push	{r4, lr}
 8002c40:	000a      	movs	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002c42:	6884      	ldr	r4, [r0, #8]
 8002c44:	2300      	movs	r3, #0
 8002c46:	210b      	movs	r1, #11
 8002c48:	47a0      	blx	r4
}
 8002c4a:	bd10      	pop	{r4, pc}

08002c4c <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002c4c:	2300      	movs	r3, #0
{
 8002c4e:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002c50:	001a      	movs	r2, r3
 8002c52:	6884      	ldr	r4, [r0, #8]
 8002c54:	2110      	movs	r1, #16
 8002c56:	47a0      	blx	r4
}
 8002c58:	bd10      	pop	{r4, pc}

08002c5a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002c5a:	b510      	push	{r4, lr}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	6944      	ldr	r4, [r0, #20]
 8002c60:	47a0      	blx	r4
}
 8002c62:	bd10      	pop	{r4, pc}

08002c64 <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 8002c64:	2000      	movs	r0, #0
 8002c66:	4770      	bx	lr

08002c68 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8002c68:	2300      	movs	r3, #0
    u8x8->display_cb = u8x8_dummy_cb;
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <u8x8_SetupDefaults+0x28>)
    u8x8->display_info = NULL;
 8002c6c:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002c6e:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002c70:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002c72:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002c74:	6142      	str	r2, [r0, #20]
    u8x8->is_font_inverse_mode = 0;
 8002c76:	1d02      	adds	r2, r0, #4
 8002c78:	77d3      	strb	r3, [r2, #31]
    u8x8->device_address = 0;
 8002c7a:	1dc2      	adds	r2, r0, #7
 8002c7c:	77d3      	strb	r3, [r2, #31]
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002c7e:	3201      	adds	r2, #1
 8002c80:	77d3      	strb	r3, [r2, #31]
    u8x8->bus_clock = 0;		/* issue 769 */
 8002c82:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 8002c84:	1d42      	adds	r2, r0, #5
 8002c86:	33ff      	adds	r3, #255	; 0xff
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002c88:	3029      	adds	r0, #41	; 0x29
    u8x8->i2c_address = 255;
 8002c8a:	77d3      	strb	r3, [r2, #31]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002c8c:	7003      	strb	r3, [r0, #0]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002c8e:	4770      	bx	lr
 8002c90:	08002c65 	.word	0x08002c65

08002c94 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	0004      	movs	r4, r0
 8002c98:	000f      	movs	r7, r1
 8002c9a:	0016      	movs	r6, r2
 8002c9c:	001d      	movs	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002c9e:	f7ff ffe3 	bl	8002c68 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002ca2:	9b06      	ldr	r3, [sp, #24]
  u8x8->display_cb = display_cb;
 8002ca4:	60a7      	str	r7, [r4, #8]
  u8x8->cad_cb = cad_cb;
 8002ca6:	60e6      	str	r6, [r4, #12]
  u8x8->byte_cb = byte_cb;
 8002ca8:	6125      	str	r5, [r4, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002caa:	6163      	str	r3, [r4, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002cac:	0020      	movs	r0, r4
 8002cae:	f7ff ffb8 	bl	8002c22 <u8x8_SetupMemory>
}
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cb4:	480d      	ldr	r0, [pc, #52]	; (8002cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cba:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cbc:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <LoopForever+0xe>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc0:	e002      	b.n	8002cc8 <LoopCopyDataInit>

08002cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc6:	3304      	adds	r3, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ccc:	d3f9      	bcc.n	8002cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cce:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cd0:	4c0b      	ldr	r4, [pc, #44]	; (8002d00 <LoopForever+0x16>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd4:	e001      	b.n	8002cda <LoopFillZerobss>

08002cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd8:	3204      	adds	r2, #4

08002cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cdc:	d3fb      	bcc.n	8002cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cde:	f7ff f8ed 	bl	8001ebc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ce2:	f000 f817 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ce6:	f7fe fdfb 	bl	80018e0 <main>

08002cea <LoopForever>:

LoopForever:
    b LoopForever
 8002cea:	e7fe      	b.n	8002cea <LoopForever>
  ldr   r0, =_estack
 8002cec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002cf8:	08003f7c 	.word	0x08003f7c
  ldr r2, =_sbss
 8002cfc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002d00:	20000324 	.word	0x20000324

08002d04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d04:	e7fe      	b.n	8002d04 <ADC1_IRQHandler>
	...

08002d08 <__errno>:
 8002d08:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <__errno+0x8>)
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	4770      	bx	lr
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	20000008 	.word	0x20000008

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	2600      	movs	r6, #0
 8002d18:	4d0c      	ldr	r5, [pc, #48]	; (8002d4c <__libc_init_array+0x38>)
 8002d1a:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1c:	1b64      	subs	r4, r4, r5
 8002d1e:	10a4      	asrs	r4, r4, #2
 8002d20:	42a6      	cmp	r6, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	2600      	movs	r6, #0
 8002d26:	f000 fc43 	bl	80035b0 <_init>
 8002d2a:	4d0a      	ldr	r5, [pc, #40]	; (8002d54 <__libc_init_array+0x40>)
 8002d2c:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <__libc_init_array+0x44>)
 8002d2e:	1b64      	subs	r4, r4, r5
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	42a6      	cmp	r6, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	00b3      	lsls	r3, r6, #2
 8002d3a:	58eb      	ldr	r3, [r5, r3]
 8002d3c:	4798      	blx	r3
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	00b3      	lsls	r3, r6, #2
 8002d44:	58eb      	ldr	r3, [r5, r3]
 8002d46:	4798      	blx	r3
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08003f74 	.word	0x08003f74
 8002d50:	08003f74 	.word	0x08003f74
 8002d54:	08003f74 	.word	0x08003f74
 8002d58:	08003f78 	.word	0x08003f78

08002d5c <memcpy>:
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	b510      	push	{r4, lr}
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d100      	bne.n	8002d66 <memcpy+0xa>
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	5ccc      	ldrb	r4, [r1, r3]
 8002d68:	54c4      	strb	r4, [r0, r3]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	e7f8      	b.n	8002d60 <memcpy+0x4>

08002d6e <memset>:
 8002d6e:	0003      	movs	r3, r0
 8002d70:	1882      	adds	r2, r0, r2
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d100      	bne.n	8002d78 <memset+0xa>
 8002d76:	4770      	bx	lr
 8002d78:	7019      	strb	r1, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	e7f9      	b.n	8002d72 <memset+0x4>
	...

08002d80 <siprintf>:
 8002d80:	b40e      	push	{r1, r2, r3}
 8002d82:	b510      	push	{r4, lr}
 8002d84:	b09d      	sub	sp, #116	; 0x74
 8002d86:	a902      	add	r1, sp, #8
 8002d88:	9002      	str	r0, [sp, #8]
 8002d8a:	6108      	str	r0, [r1, #16]
 8002d8c:	480b      	ldr	r0, [pc, #44]	; (8002dbc <siprintf+0x3c>)
 8002d8e:	2482      	movs	r4, #130	; 0x82
 8002d90:	6088      	str	r0, [r1, #8]
 8002d92:	6148      	str	r0, [r1, #20]
 8002d94:	2001      	movs	r0, #1
 8002d96:	4240      	negs	r0, r0
 8002d98:	ab1f      	add	r3, sp, #124	; 0x7c
 8002d9a:	81c8      	strh	r0, [r1, #14]
 8002d9c:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <siprintf+0x40>)
 8002d9e:	cb04      	ldmia	r3!, {r2}
 8002da0:	00a4      	lsls	r4, r4, #2
 8002da2:	6800      	ldr	r0, [r0, #0]
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	818c      	strh	r4, [r1, #12]
 8002da8:	f000 f8cc 	bl	8002f44 <_svfiprintf_r>
 8002dac:	2300      	movs	r3, #0
 8002dae:	9a02      	ldr	r2, [sp, #8]
 8002db0:	7013      	strb	r3, [r2, #0]
 8002db2:	b01d      	add	sp, #116	; 0x74
 8002db4:	bc10      	pop	{r4}
 8002db6:	bc08      	pop	{r3}
 8002db8:	b003      	add	sp, #12
 8002dba:	4718      	bx	r3
 8002dbc:	7fffffff 	.word	0x7fffffff
 8002dc0:	20000008 	.word	0x20000008

08002dc4 <_malloc_r>:
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	b570      	push	{r4, r5, r6, lr}
 8002dc8:	1ccd      	adds	r5, r1, #3
 8002dca:	439d      	bics	r5, r3
 8002dcc:	3508      	adds	r5, #8
 8002dce:	0006      	movs	r6, r0
 8002dd0:	2d0c      	cmp	r5, #12
 8002dd2:	d21e      	bcs.n	8002e12 <_malloc_r+0x4e>
 8002dd4:	250c      	movs	r5, #12
 8002dd6:	42a9      	cmp	r1, r5
 8002dd8:	d81d      	bhi.n	8002e16 <_malloc_r+0x52>
 8002dda:	0030      	movs	r0, r6
 8002ddc:	f000 fb6d 	bl	80034ba <__malloc_lock>
 8002de0:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <_malloc_r+0xb4>)
 8002de2:	6814      	ldr	r4, [r2, #0]
 8002de4:	0021      	movs	r1, r4
 8002de6:	2900      	cmp	r1, #0
 8002de8:	d119      	bne.n	8002e1e <_malloc_r+0x5a>
 8002dea:	4c24      	ldr	r4, [pc, #144]	; (8002e7c <_malloc_r+0xb8>)
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <_malloc_r+0x36>
 8002df2:	0030      	movs	r0, r6
 8002df4:	f000 fb32 	bl	800345c <_sbrk_r>
 8002df8:	6020      	str	r0, [r4, #0]
 8002dfa:	0029      	movs	r1, r5
 8002dfc:	0030      	movs	r0, r6
 8002dfe:	f000 fb2d 	bl	800345c <_sbrk_r>
 8002e02:	1c43      	adds	r3, r0, #1
 8002e04:	d12c      	bne.n	8002e60 <_malloc_r+0x9c>
 8002e06:	230c      	movs	r3, #12
 8002e08:	0030      	movs	r0, r6
 8002e0a:	6033      	str	r3, [r6, #0]
 8002e0c:	f000 fb56 	bl	80034bc <__malloc_unlock>
 8002e10:	e003      	b.n	8002e1a <_malloc_r+0x56>
 8002e12:	2d00      	cmp	r5, #0
 8002e14:	dadf      	bge.n	8002dd6 <_malloc_r+0x12>
 8002e16:	230c      	movs	r3, #12
 8002e18:	6033      	str	r3, [r6, #0]
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
 8002e1e:	680b      	ldr	r3, [r1, #0]
 8002e20:	1b5b      	subs	r3, r3, r5
 8002e22:	d41a      	bmi.n	8002e5a <_malloc_r+0x96>
 8002e24:	2b0b      	cmp	r3, #11
 8002e26:	d903      	bls.n	8002e30 <_malloc_r+0x6c>
 8002e28:	600b      	str	r3, [r1, #0]
 8002e2a:	18cc      	adds	r4, r1, r3
 8002e2c:	6025      	str	r5, [r4, #0]
 8002e2e:	e003      	b.n	8002e38 <_malloc_r+0x74>
 8002e30:	428c      	cmp	r4, r1
 8002e32:	d10e      	bne.n	8002e52 <_malloc_r+0x8e>
 8002e34:	6863      	ldr	r3, [r4, #4]
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	0030      	movs	r0, r6
 8002e3a:	f000 fb3f 	bl	80034bc <__malloc_unlock>
 8002e3e:	0020      	movs	r0, r4
 8002e40:	2207      	movs	r2, #7
 8002e42:	300b      	adds	r0, #11
 8002e44:	1d23      	adds	r3, r4, #4
 8002e46:	4390      	bics	r0, r2
 8002e48:	1ac3      	subs	r3, r0, r3
 8002e4a:	d0e7      	beq.n	8002e1c <_malloc_r+0x58>
 8002e4c:	425a      	negs	r2, r3
 8002e4e:	50e2      	str	r2, [r4, r3]
 8002e50:	e7e4      	b.n	8002e1c <_malloc_r+0x58>
 8002e52:	684b      	ldr	r3, [r1, #4]
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	000c      	movs	r4, r1
 8002e58:	e7ee      	b.n	8002e38 <_malloc_r+0x74>
 8002e5a:	000c      	movs	r4, r1
 8002e5c:	6849      	ldr	r1, [r1, #4]
 8002e5e:	e7c2      	b.n	8002de6 <_malloc_r+0x22>
 8002e60:	2303      	movs	r3, #3
 8002e62:	1cc4      	adds	r4, r0, #3
 8002e64:	439c      	bics	r4, r3
 8002e66:	42a0      	cmp	r0, r4
 8002e68:	d0e0      	beq.n	8002e2c <_malloc_r+0x68>
 8002e6a:	1a21      	subs	r1, r4, r0
 8002e6c:	0030      	movs	r0, r6
 8002e6e:	f000 faf5 	bl	800345c <_sbrk_r>
 8002e72:	1c43      	adds	r3, r0, #1
 8002e74:	d1da      	bne.n	8002e2c <_malloc_r+0x68>
 8002e76:	e7c6      	b.n	8002e06 <_malloc_r+0x42>
 8002e78:	200001c8 	.word	0x200001c8
 8002e7c:	200001cc 	.word	0x200001cc

08002e80 <__ssputs_r>:
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	688e      	ldr	r6, [r1, #8]
 8002e84:	b085      	sub	sp, #20
 8002e86:	0007      	movs	r7, r0
 8002e88:	000c      	movs	r4, r1
 8002e8a:	9203      	str	r2, [sp, #12]
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	429e      	cmp	r6, r3
 8002e90:	d839      	bhi.n	8002f06 <__ssputs_r+0x86>
 8002e92:	2390      	movs	r3, #144	; 0x90
 8002e94:	898a      	ldrh	r2, [r1, #12]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	421a      	tst	r2, r3
 8002e9a:	d034      	beq.n	8002f06 <__ssputs_r+0x86>
 8002e9c:	2503      	movs	r5, #3
 8002e9e:	6909      	ldr	r1, [r1, #16]
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	1a5b      	subs	r3, r3, r1
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	6963      	ldr	r3, [r4, #20]
 8002ea8:	9802      	ldr	r0, [sp, #8]
 8002eaa:	435d      	muls	r5, r3
 8002eac:	0feb      	lsrs	r3, r5, #31
 8002eae:	195d      	adds	r5, r3, r5
 8002eb0:	9b01      	ldr	r3, [sp, #4]
 8002eb2:	106d      	asrs	r5, r5, #1
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	181b      	adds	r3, r3, r0
 8002eb8:	42ab      	cmp	r3, r5
 8002eba:	d900      	bls.n	8002ebe <__ssputs_r+0x3e>
 8002ebc:	001d      	movs	r5, r3
 8002ebe:	0553      	lsls	r3, r2, #21
 8002ec0:	d532      	bpl.n	8002f28 <__ssputs_r+0xa8>
 8002ec2:	0029      	movs	r1, r5
 8002ec4:	0038      	movs	r0, r7
 8002ec6:	f7ff ff7d 	bl	8002dc4 <_malloc_r>
 8002eca:	1e06      	subs	r6, r0, #0
 8002ecc:	d109      	bne.n	8002ee2 <__ssputs_r+0x62>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	2340      	movs	r3, #64	; 0x40
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	89a2      	ldrh	r2, [r4, #12]
 8002ed8:	4240      	negs	r0, r0
 8002eda:	4313      	orrs	r3, r2
 8002edc:	81a3      	strh	r3, [r4, #12]
 8002ede:	b005      	add	sp, #20
 8002ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee2:	9a02      	ldr	r2, [sp, #8]
 8002ee4:	6921      	ldr	r1, [r4, #16]
 8002ee6:	f7ff ff39 	bl	8002d5c <memcpy>
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <__ssputs_r+0xc0>)
 8002eee:	401a      	ands	r2, r3
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	9b02      	ldr	r3, [sp, #8]
 8002ef8:	6126      	str	r6, [r4, #16]
 8002efa:	18f6      	adds	r6, r6, r3
 8002efc:	6026      	str	r6, [r4, #0]
 8002efe:	6165      	str	r5, [r4, #20]
 8002f00:	9e01      	ldr	r6, [sp, #4]
 8002f02:	1aed      	subs	r5, r5, r3
 8002f04:	60a5      	str	r5, [r4, #8]
 8002f06:	9b01      	ldr	r3, [sp, #4]
 8002f08:	42b3      	cmp	r3, r6
 8002f0a:	d200      	bcs.n	8002f0e <__ssputs_r+0x8e>
 8002f0c:	001e      	movs	r6, r3
 8002f0e:	0032      	movs	r2, r6
 8002f10:	9903      	ldr	r1, [sp, #12]
 8002f12:	6820      	ldr	r0, [r4, #0]
 8002f14:	f000 fabf 	bl	8003496 <memmove>
 8002f18:	68a3      	ldr	r3, [r4, #8]
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	1b9b      	subs	r3, r3, r6
 8002f1e:	60a3      	str	r3, [r4, #8]
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	199e      	adds	r6, r3, r6
 8002f24:	6026      	str	r6, [r4, #0]
 8002f26:	e7da      	b.n	8002ede <__ssputs_r+0x5e>
 8002f28:	002a      	movs	r2, r5
 8002f2a:	0038      	movs	r0, r7
 8002f2c:	f000 fb12 	bl	8003554 <_realloc_r>
 8002f30:	1e06      	subs	r6, r0, #0
 8002f32:	d1e0      	bne.n	8002ef6 <__ssputs_r+0x76>
 8002f34:	6921      	ldr	r1, [r4, #16]
 8002f36:	0038      	movs	r0, r7
 8002f38:	f000 fac2 	bl	80034c0 <_free_r>
 8002f3c:	e7c7      	b.n	8002ece <__ssputs_r+0x4e>
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	fffffb7f 	.word	0xfffffb7f

08002f44 <_svfiprintf_r>:
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	b09f      	sub	sp, #124	; 0x7c
 8002f48:	9002      	str	r0, [sp, #8]
 8002f4a:	9305      	str	r3, [sp, #20]
 8002f4c:	898b      	ldrh	r3, [r1, #12]
 8002f4e:	000f      	movs	r7, r1
 8002f50:	0016      	movs	r6, r2
 8002f52:	061b      	lsls	r3, r3, #24
 8002f54:	d511      	bpl.n	8002f7a <_svfiprintf_r+0x36>
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10e      	bne.n	8002f7a <_svfiprintf_r+0x36>
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	f7ff ff31 	bl	8002dc4 <_malloc_r>
 8002f62:	6038      	str	r0, [r7, #0]
 8002f64:	6138      	str	r0, [r7, #16]
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d105      	bne.n	8002f76 <_svfiprintf_r+0x32>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	9a02      	ldr	r2, [sp, #8]
 8002f6e:	3801      	subs	r0, #1
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	b01f      	add	sp, #124	; 0x7c
 8002f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f76:	2340      	movs	r3, #64	; 0x40
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	ad06      	add	r5, sp, #24
 8002f7e:	616b      	str	r3, [r5, #20]
 8002f80:	3320      	adds	r3, #32
 8002f82:	766b      	strb	r3, [r5, #25]
 8002f84:	3310      	adds	r3, #16
 8002f86:	76ab      	strb	r3, [r5, #26]
 8002f88:	0034      	movs	r4, r6
 8002f8a:	7823      	ldrb	r3, [r4, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d147      	bne.n	8003020 <_svfiprintf_r+0xdc>
 8002f90:	1ba3      	subs	r3, r4, r6
 8002f92:	9304      	str	r3, [sp, #16]
 8002f94:	d00d      	beq.n	8002fb2 <_svfiprintf_r+0x6e>
 8002f96:	1ba3      	subs	r3, r4, r6
 8002f98:	0032      	movs	r2, r6
 8002f9a:	0039      	movs	r1, r7
 8002f9c:	9802      	ldr	r0, [sp, #8]
 8002f9e:	f7ff ff6f 	bl	8002e80 <__ssputs_r>
 8002fa2:	1c43      	adds	r3, r0, #1
 8002fa4:	d100      	bne.n	8002fa8 <_svfiprintf_r+0x64>
 8002fa6:	e0b5      	b.n	8003114 <_svfiprintf_r+0x1d0>
 8002fa8:	696a      	ldr	r2, [r5, #20]
 8002faa:	9b04      	ldr	r3, [sp, #16]
 8002fac:	4694      	mov	ip, r2
 8002fae:	4463      	add	r3, ip
 8002fb0:	616b      	str	r3, [r5, #20]
 8002fb2:	7823      	ldrb	r3, [r4, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d100      	bne.n	8002fba <_svfiprintf_r+0x76>
 8002fb8:	e0ac      	b.n	8003114 <_svfiprintf_r+0x1d0>
 8002fba:	2201      	movs	r2, #1
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	4252      	negs	r2, r2
 8002fc0:	606a      	str	r2, [r5, #4]
 8002fc2:	a902      	add	r1, sp, #8
 8002fc4:	3254      	adds	r2, #84	; 0x54
 8002fc6:	1852      	adds	r2, r2, r1
 8002fc8:	3401      	adds	r4, #1
 8002fca:	602b      	str	r3, [r5, #0]
 8002fcc:	60eb      	str	r3, [r5, #12]
 8002fce:	60ab      	str	r3, [r5, #8]
 8002fd0:	7013      	strb	r3, [r2, #0]
 8002fd2:	65ab      	str	r3, [r5, #88]	; 0x58
 8002fd4:	4e58      	ldr	r6, [pc, #352]	; (8003138 <_svfiprintf_r+0x1f4>)
 8002fd6:	2205      	movs	r2, #5
 8002fd8:	7821      	ldrb	r1, [r4, #0]
 8002fda:	0030      	movs	r0, r6
 8002fdc:	f000 fa50 	bl	8003480 <memchr>
 8002fe0:	1c62      	adds	r2, r4, #1
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d120      	bne.n	8003028 <_svfiprintf_r+0xe4>
 8002fe6:	6829      	ldr	r1, [r5, #0]
 8002fe8:	06cb      	lsls	r3, r1, #27
 8002fea:	d504      	bpl.n	8002ff6 <_svfiprintf_r+0xb2>
 8002fec:	2353      	movs	r3, #83	; 0x53
 8002fee:	ae02      	add	r6, sp, #8
 8002ff0:	3020      	adds	r0, #32
 8002ff2:	199b      	adds	r3, r3, r6
 8002ff4:	7018      	strb	r0, [r3, #0]
 8002ff6:	070b      	lsls	r3, r1, #28
 8002ff8:	d504      	bpl.n	8003004 <_svfiprintf_r+0xc0>
 8002ffa:	2353      	movs	r3, #83	; 0x53
 8002ffc:	202b      	movs	r0, #43	; 0x2b
 8002ffe:	ae02      	add	r6, sp, #8
 8003000:	199b      	adds	r3, r3, r6
 8003002:	7018      	strb	r0, [r3, #0]
 8003004:	7823      	ldrb	r3, [r4, #0]
 8003006:	2b2a      	cmp	r3, #42	; 0x2a
 8003008:	d016      	beq.n	8003038 <_svfiprintf_r+0xf4>
 800300a:	2000      	movs	r0, #0
 800300c:	210a      	movs	r1, #10
 800300e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003010:	7822      	ldrb	r2, [r4, #0]
 8003012:	3a30      	subs	r2, #48	; 0x30
 8003014:	2a09      	cmp	r2, #9
 8003016:	d955      	bls.n	80030c4 <_svfiprintf_r+0x180>
 8003018:	2800      	cmp	r0, #0
 800301a:	d015      	beq.n	8003048 <_svfiprintf_r+0x104>
 800301c:	9309      	str	r3, [sp, #36]	; 0x24
 800301e:	e013      	b.n	8003048 <_svfiprintf_r+0x104>
 8003020:	2b25      	cmp	r3, #37	; 0x25
 8003022:	d0b5      	beq.n	8002f90 <_svfiprintf_r+0x4c>
 8003024:	3401      	adds	r4, #1
 8003026:	e7b0      	b.n	8002f8a <_svfiprintf_r+0x46>
 8003028:	2301      	movs	r3, #1
 800302a:	1b80      	subs	r0, r0, r6
 800302c:	4083      	lsls	r3, r0
 800302e:	6829      	ldr	r1, [r5, #0]
 8003030:	0014      	movs	r4, r2
 8003032:	430b      	orrs	r3, r1
 8003034:	602b      	str	r3, [r5, #0]
 8003036:	e7cd      	b.n	8002fd4 <_svfiprintf_r+0x90>
 8003038:	9b05      	ldr	r3, [sp, #20]
 800303a:	1d18      	adds	r0, r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	9005      	str	r0, [sp, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	db39      	blt.n	80030b8 <_svfiprintf_r+0x174>
 8003044:	9309      	str	r3, [sp, #36]	; 0x24
 8003046:	0014      	movs	r4, r2
 8003048:	7823      	ldrb	r3, [r4, #0]
 800304a:	2b2e      	cmp	r3, #46	; 0x2e
 800304c:	d10b      	bne.n	8003066 <_svfiprintf_r+0x122>
 800304e:	7863      	ldrb	r3, [r4, #1]
 8003050:	1c62      	adds	r2, r4, #1
 8003052:	2b2a      	cmp	r3, #42	; 0x2a
 8003054:	d13e      	bne.n	80030d4 <_svfiprintf_r+0x190>
 8003056:	9b05      	ldr	r3, [sp, #20]
 8003058:	3402      	adds	r4, #2
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	9205      	str	r2, [sp, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db34      	blt.n	80030ce <_svfiprintf_r+0x18a>
 8003064:	9307      	str	r3, [sp, #28]
 8003066:	4e35      	ldr	r6, [pc, #212]	; (800313c <_svfiprintf_r+0x1f8>)
 8003068:	7821      	ldrb	r1, [r4, #0]
 800306a:	2203      	movs	r2, #3
 800306c:	0030      	movs	r0, r6
 800306e:	f000 fa07 	bl	8003480 <memchr>
 8003072:	2800      	cmp	r0, #0
 8003074:	d006      	beq.n	8003084 <_svfiprintf_r+0x140>
 8003076:	2340      	movs	r3, #64	; 0x40
 8003078:	1b80      	subs	r0, r0, r6
 800307a:	4083      	lsls	r3, r0
 800307c:	682a      	ldr	r2, [r5, #0]
 800307e:	3401      	adds	r4, #1
 8003080:	4313      	orrs	r3, r2
 8003082:	602b      	str	r3, [r5, #0]
 8003084:	7821      	ldrb	r1, [r4, #0]
 8003086:	2206      	movs	r2, #6
 8003088:	482d      	ldr	r0, [pc, #180]	; (8003140 <_svfiprintf_r+0x1fc>)
 800308a:	1c66      	adds	r6, r4, #1
 800308c:	7629      	strb	r1, [r5, #24]
 800308e:	f000 f9f7 	bl	8003480 <memchr>
 8003092:	2800      	cmp	r0, #0
 8003094:	d046      	beq.n	8003124 <_svfiprintf_r+0x1e0>
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <_svfiprintf_r+0x200>)
 8003098:	2b00      	cmp	r3, #0
 800309a:	d12f      	bne.n	80030fc <_svfiprintf_r+0x1b8>
 800309c:	6829      	ldr	r1, [r5, #0]
 800309e:	9b05      	ldr	r3, [sp, #20]
 80030a0:	2207      	movs	r2, #7
 80030a2:	05c9      	lsls	r1, r1, #23
 80030a4:	d528      	bpl.n	80030f8 <_svfiprintf_r+0x1b4>
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	4393      	bics	r3, r2
 80030aa:	3308      	adds	r3, #8
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	696b      	ldr	r3, [r5, #20]
 80030b0:	9a03      	ldr	r2, [sp, #12]
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	616b      	str	r3, [r5, #20]
 80030b6:	e767      	b.n	8002f88 <_svfiprintf_r+0x44>
 80030b8:	425b      	negs	r3, r3
 80030ba:	60eb      	str	r3, [r5, #12]
 80030bc:	2302      	movs	r3, #2
 80030be:	430b      	orrs	r3, r1
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	e7c0      	b.n	8003046 <_svfiprintf_r+0x102>
 80030c4:	434b      	muls	r3, r1
 80030c6:	3401      	adds	r4, #1
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	2001      	movs	r0, #1
 80030cc:	e7a0      	b.n	8003010 <_svfiprintf_r+0xcc>
 80030ce:	2301      	movs	r3, #1
 80030d0:	425b      	negs	r3, r3
 80030d2:	e7c7      	b.n	8003064 <_svfiprintf_r+0x120>
 80030d4:	2300      	movs	r3, #0
 80030d6:	0014      	movs	r4, r2
 80030d8:	200a      	movs	r0, #10
 80030da:	001a      	movs	r2, r3
 80030dc:	606b      	str	r3, [r5, #4]
 80030de:	7821      	ldrb	r1, [r4, #0]
 80030e0:	3930      	subs	r1, #48	; 0x30
 80030e2:	2909      	cmp	r1, #9
 80030e4:	d903      	bls.n	80030ee <_svfiprintf_r+0x1aa>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0bd      	beq.n	8003066 <_svfiprintf_r+0x122>
 80030ea:	9207      	str	r2, [sp, #28]
 80030ec:	e7bb      	b.n	8003066 <_svfiprintf_r+0x122>
 80030ee:	4342      	muls	r2, r0
 80030f0:	3401      	adds	r4, #1
 80030f2:	1852      	adds	r2, r2, r1
 80030f4:	2301      	movs	r3, #1
 80030f6:	e7f2      	b.n	80030de <_svfiprintf_r+0x19a>
 80030f8:	3307      	adds	r3, #7
 80030fa:	e7d5      	b.n	80030a8 <_svfiprintf_r+0x164>
 80030fc:	ab05      	add	r3, sp, #20
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	003a      	movs	r2, r7
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <_svfiprintf_r+0x204>)
 8003104:	0029      	movs	r1, r5
 8003106:	9802      	ldr	r0, [sp, #8]
 8003108:	e000      	b.n	800310c <_svfiprintf_r+0x1c8>
 800310a:	bf00      	nop
 800310c:	9003      	str	r0, [sp, #12]
 800310e:	9b03      	ldr	r3, [sp, #12]
 8003110:	3301      	adds	r3, #1
 8003112:	d1cc      	bne.n	80030ae <_svfiprintf_r+0x16a>
 8003114:	89bb      	ldrh	r3, [r7, #12]
 8003116:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003118:	065b      	lsls	r3, r3, #25
 800311a:	d400      	bmi.n	800311e <_svfiprintf_r+0x1da>
 800311c:	e729      	b.n	8002f72 <_svfiprintf_r+0x2e>
 800311e:	2001      	movs	r0, #1
 8003120:	4240      	negs	r0, r0
 8003122:	e726      	b.n	8002f72 <_svfiprintf_r+0x2e>
 8003124:	ab05      	add	r3, sp, #20
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	003a      	movs	r2, r7
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <_svfiprintf_r+0x204>)
 800312c:	0029      	movs	r1, r5
 800312e:	9802      	ldr	r0, [sp, #8]
 8003130:	f000 f87a 	bl	8003228 <_printf_i>
 8003134:	e7ea      	b.n	800310c <_svfiprintf_r+0x1c8>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	08003f40 	.word	0x08003f40
 800313c:	08003f46 	.word	0x08003f46
 8003140:	08003f4a 	.word	0x08003f4a
 8003144:	00000000 	.word	0x00000000
 8003148:	08002e81 	.word	0x08002e81

0800314c <_printf_common>:
 800314c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800314e:	0015      	movs	r5, r2
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	688a      	ldr	r2, [r1, #8]
 8003154:	690b      	ldr	r3, [r1, #16]
 8003156:	9000      	str	r0, [sp, #0]
 8003158:	000c      	movs	r4, r1
 800315a:	4293      	cmp	r3, r2
 800315c:	da00      	bge.n	8003160 <_printf_common+0x14>
 800315e:	0013      	movs	r3, r2
 8003160:	0022      	movs	r2, r4
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	3243      	adds	r2, #67	; 0x43
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	2a00      	cmp	r2, #0
 800316a:	d001      	beq.n	8003170 <_printf_common+0x24>
 800316c:	3301      	adds	r3, #1
 800316e:	602b      	str	r3, [r5, #0]
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	069b      	lsls	r3, r3, #26
 8003174:	d502      	bpl.n	800317c <_printf_common+0x30>
 8003176:	682b      	ldr	r3, [r5, #0]
 8003178:	3302      	adds	r3, #2
 800317a:	602b      	str	r3, [r5, #0]
 800317c:	2706      	movs	r7, #6
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	401f      	ands	r7, r3
 8003182:	d027      	beq.n	80031d4 <_printf_common+0x88>
 8003184:	0023      	movs	r3, r4
 8003186:	3343      	adds	r3, #67	; 0x43
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	4193      	sbcs	r3, r2
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	0692      	lsls	r2, r2, #26
 8003192:	d430      	bmi.n	80031f6 <_printf_common+0xaa>
 8003194:	0022      	movs	r2, r4
 8003196:	9901      	ldr	r1, [sp, #4]
 8003198:	3243      	adds	r2, #67	; 0x43
 800319a:	9800      	ldr	r0, [sp, #0]
 800319c:	9e08      	ldr	r6, [sp, #32]
 800319e:	47b0      	blx	r6
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d025      	beq.n	80031f0 <_printf_common+0xa4>
 80031a4:	2306      	movs	r3, #6
 80031a6:	6820      	ldr	r0, [r4, #0]
 80031a8:	682a      	ldr	r2, [r5, #0]
 80031aa:	68e1      	ldr	r1, [r4, #12]
 80031ac:	4003      	ands	r3, r0
 80031ae:	2500      	movs	r5, #0
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d103      	bne.n	80031bc <_printf_common+0x70>
 80031b4:	1a8d      	subs	r5, r1, r2
 80031b6:	43eb      	mvns	r3, r5
 80031b8:	17db      	asrs	r3, r3, #31
 80031ba:	401d      	ands	r5, r3
 80031bc:	68a3      	ldr	r3, [r4, #8]
 80031be:	6922      	ldr	r2, [r4, #16]
 80031c0:	4293      	cmp	r3, r2
 80031c2:	dd01      	ble.n	80031c8 <_printf_common+0x7c>
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	18ed      	adds	r5, r5, r3
 80031c8:	2700      	movs	r7, #0
 80031ca:	42bd      	cmp	r5, r7
 80031cc:	d120      	bne.n	8003210 <_printf_common+0xc4>
 80031ce:	2000      	movs	r0, #0
 80031d0:	e010      	b.n	80031f4 <_printf_common+0xa8>
 80031d2:	3701      	adds	r7, #1
 80031d4:	68e3      	ldr	r3, [r4, #12]
 80031d6:	682a      	ldr	r2, [r5, #0]
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	429f      	cmp	r7, r3
 80031dc:	dad2      	bge.n	8003184 <_printf_common+0x38>
 80031de:	0022      	movs	r2, r4
 80031e0:	2301      	movs	r3, #1
 80031e2:	3219      	adds	r2, #25
 80031e4:	9901      	ldr	r1, [sp, #4]
 80031e6:	9800      	ldr	r0, [sp, #0]
 80031e8:	9e08      	ldr	r6, [sp, #32]
 80031ea:	47b0      	blx	r6
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d1f0      	bne.n	80031d2 <_printf_common+0x86>
 80031f0:	2001      	movs	r0, #1
 80031f2:	4240      	negs	r0, r0
 80031f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031f6:	2030      	movs	r0, #48	; 0x30
 80031f8:	18e1      	adds	r1, r4, r3
 80031fa:	3143      	adds	r1, #67	; 0x43
 80031fc:	7008      	strb	r0, [r1, #0]
 80031fe:	0021      	movs	r1, r4
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	3145      	adds	r1, #69	; 0x45
 8003204:	7809      	ldrb	r1, [r1, #0]
 8003206:	18a2      	adds	r2, r4, r2
 8003208:	3243      	adds	r2, #67	; 0x43
 800320a:	3302      	adds	r3, #2
 800320c:	7011      	strb	r1, [r2, #0]
 800320e:	e7c1      	b.n	8003194 <_printf_common+0x48>
 8003210:	0022      	movs	r2, r4
 8003212:	2301      	movs	r3, #1
 8003214:	321a      	adds	r2, #26
 8003216:	9901      	ldr	r1, [sp, #4]
 8003218:	9800      	ldr	r0, [sp, #0]
 800321a:	9e08      	ldr	r6, [sp, #32]
 800321c:	47b0      	blx	r6
 800321e:	1c43      	adds	r3, r0, #1
 8003220:	d0e6      	beq.n	80031f0 <_printf_common+0xa4>
 8003222:	3701      	adds	r7, #1
 8003224:	e7d1      	b.n	80031ca <_printf_common+0x7e>
	...

08003228 <_printf_i>:
 8003228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322a:	b08b      	sub	sp, #44	; 0x2c
 800322c:	9206      	str	r2, [sp, #24]
 800322e:	000a      	movs	r2, r1
 8003230:	3243      	adds	r2, #67	; 0x43
 8003232:	9307      	str	r3, [sp, #28]
 8003234:	9005      	str	r0, [sp, #20]
 8003236:	9204      	str	r2, [sp, #16]
 8003238:	7e0a      	ldrb	r2, [r1, #24]
 800323a:	000c      	movs	r4, r1
 800323c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800323e:	2a6e      	cmp	r2, #110	; 0x6e
 8003240:	d100      	bne.n	8003244 <_printf_i+0x1c>
 8003242:	e08f      	b.n	8003364 <_printf_i+0x13c>
 8003244:	d817      	bhi.n	8003276 <_printf_i+0x4e>
 8003246:	2a63      	cmp	r2, #99	; 0x63
 8003248:	d02c      	beq.n	80032a4 <_printf_i+0x7c>
 800324a:	d808      	bhi.n	800325e <_printf_i+0x36>
 800324c:	2a00      	cmp	r2, #0
 800324e:	d100      	bne.n	8003252 <_printf_i+0x2a>
 8003250:	e099      	b.n	8003386 <_printf_i+0x15e>
 8003252:	2a58      	cmp	r2, #88	; 0x58
 8003254:	d054      	beq.n	8003300 <_printf_i+0xd8>
 8003256:	0026      	movs	r6, r4
 8003258:	3642      	adds	r6, #66	; 0x42
 800325a:	7032      	strb	r2, [r6, #0]
 800325c:	e029      	b.n	80032b2 <_printf_i+0x8a>
 800325e:	2a64      	cmp	r2, #100	; 0x64
 8003260:	d001      	beq.n	8003266 <_printf_i+0x3e>
 8003262:	2a69      	cmp	r2, #105	; 0x69
 8003264:	d1f7      	bne.n	8003256 <_printf_i+0x2e>
 8003266:	6821      	ldr	r1, [r4, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	0608      	lsls	r0, r1, #24
 800326c:	d523      	bpl.n	80032b6 <_printf_i+0x8e>
 800326e:	1d11      	adds	r1, r2, #4
 8003270:	6019      	str	r1, [r3, #0]
 8003272:	6815      	ldr	r5, [r2, #0]
 8003274:	e025      	b.n	80032c2 <_printf_i+0x9a>
 8003276:	2a73      	cmp	r2, #115	; 0x73
 8003278:	d100      	bne.n	800327c <_printf_i+0x54>
 800327a:	e088      	b.n	800338e <_printf_i+0x166>
 800327c:	d808      	bhi.n	8003290 <_printf_i+0x68>
 800327e:	2a6f      	cmp	r2, #111	; 0x6f
 8003280:	d029      	beq.n	80032d6 <_printf_i+0xae>
 8003282:	2a70      	cmp	r2, #112	; 0x70
 8003284:	d1e7      	bne.n	8003256 <_printf_i+0x2e>
 8003286:	2220      	movs	r2, #32
 8003288:	6809      	ldr	r1, [r1, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	6022      	str	r2, [r4, #0]
 800328e:	e003      	b.n	8003298 <_printf_i+0x70>
 8003290:	2a75      	cmp	r2, #117	; 0x75
 8003292:	d020      	beq.n	80032d6 <_printf_i+0xae>
 8003294:	2a78      	cmp	r2, #120	; 0x78
 8003296:	d1de      	bne.n	8003256 <_printf_i+0x2e>
 8003298:	0022      	movs	r2, r4
 800329a:	2178      	movs	r1, #120	; 0x78
 800329c:	3245      	adds	r2, #69	; 0x45
 800329e:	7011      	strb	r1, [r2, #0]
 80032a0:	4a6c      	ldr	r2, [pc, #432]	; (8003454 <_printf_i+0x22c>)
 80032a2:	e030      	b.n	8003306 <_printf_i+0xde>
 80032a4:	000e      	movs	r6, r1
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	3642      	adds	r6, #66	; 0x42
 80032aa:	1d11      	adds	r1, r2, #4
 80032ac:	6019      	str	r1, [r3, #0]
 80032ae:	6813      	ldr	r3, [r2, #0]
 80032b0:	7033      	strb	r3, [r6, #0]
 80032b2:	2301      	movs	r3, #1
 80032b4:	e079      	b.n	80033aa <_printf_i+0x182>
 80032b6:	0649      	lsls	r1, r1, #25
 80032b8:	d5d9      	bpl.n	800326e <_printf_i+0x46>
 80032ba:	1d11      	adds	r1, r2, #4
 80032bc:	6019      	str	r1, [r3, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	5ed5      	ldrsh	r5, [r2, r3]
 80032c2:	2d00      	cmp	r5, #0
 80032c4:	da03      	bge.n	80032ce <_printf_i+0xa6>
 80032c6:	232d      	movs	r3, #45	; 0x2d
 80032c8:	9a04      	ldr	r2, [sp, #16]
 80032ca:	426d      	negs	r5, r5
 80032cc:	7013      	strb	r3, [r2, #0]
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <_printf_i+0x230>)
 80032d0:	270a      	movs	r7, #10
 80032d2:	9303      	str	r3, [sp, #12]
 80032d4:	e02f      	b.n	8003336 <_printf_i+0x10e>
 80032d6:	6820      	ldr	r0, [r4, #0]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	0605      	lsls	r5, r0, #24
 80032dc:	d503      	bpl.n	80032e6 <_printf_i+0xbe>
 80032de:	1d08      	adds	r0, r1, #4
 80032e0:	6018      	str	r0, [r3, #0]
 80032e2:	680d      	ldr	r5, [r1, #0]
 80032e4:	e005      	b.n	80032f2 <_printf_i+0xca>
 80032e6:	0640      	lsls	r0, r0, #25
 80032e8:	d5f9      	bpl.n	80032de <_printf_i+0xb6>
 80032ea:	680d      	ldr	r5, [r1, #0]
 80032ec:	1d08      	adds	r0, r1, #4
 80032ee:	6018      	str	r0, [r3, #0]
 80032f0:	b2ad      	uxth	r5, r5
 80032f2:	4b59      	ldr	r3, [pc, #356]	; (8003458 <_printf_i+0x230>)
 80032f4:	2708      	movs	r7, #8
 80032f6:	9303      	str	r3, [sp, #12]
 80032f8:	2a6f      	cmp	r2, #111	; 0x6f
 80032fa:	d018      	beq.n	800332e <_printf_i+0x106>
 80032fc:	270a      	movs	r7, #10
 80032fe:	e016      	b.n	800332e <_printf_i+0x106>
 8003300:	3145      	adds	r1, #69	; 0x45
 8003302:	700a      	strb	r2, [r1, #0]
 8003304:	4a54      	ldr	r2, [pc, #336]	; (8003458 <_printf_i+0x230>)
 8003306:	9203      	str	r2, [sp, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	6821      	ldr	r1, [r4, #0]
 800330c:	1d10      	adds	r0, r2, #4
 800330e:	6018      	str	r0, [r3, #0]
 8003310:	6815      	ldr	r5, [r2, #0]
 8003312:	0608      	lsls	r0, r1, #24
 8003314:	d522      	bpl.n	800335c <_printf_i+0x134>
 8003316:	07cb      	lsls	r3, r1, #31
 8003318:	d502      	bpl.n	8003320 <_printf_i+0xf8>
 800331a:	2320      	movs	r3, #32
 800331c:	4319      	orrs	r1, r3
 800331e:	6021      	str	r1, [r4, #0]
 8003320:	2710      	movs	r7, #16
 8003322:	2d00      	cmp	r5, #0
 8003324:	d103      	bne.n	800332e <_printf_i+0x106>
 8003326:	2320      	movs	r3, #32
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	439a      	bics	r2, r3
 800332c:	6022      	str	r2, [r4, #0]
 800332e:	0023      	movs	r3, r4
 8003330:	2200      	movs	r2, #0
 8003332:	3343      	adds	r3, #67	; 0x43
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	6863      	ldr	r3, [r4, #4]
 8003338:	60a3      	str	r3, [r4, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db5c      	blt.n	80033f8 <_printf_i+0x1d0>
 800333e:	2204      	movs	r2, #4
 8003340:	6821      	ldr	r1, [r4, #0]
 8003342:	4391      	bics	r1, r2
 8003344:	6021      	str	r1, [r4, #0]
 8003346:	2d00      	cmp	r5, #0
 8003348:	d158      	bne.n	80033fc <_printf_i+0x1d4>
 800334a:	9e04      	ldr	r6, [sp, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d064      	beq.n	800341a <_printf_i+0x1f2>
 8003350:	0026      	movs	r6, r4
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	3642      	adds	r6, #66	; 0x42
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	7033      	strb	r3, [r6, #0]
 800335a:	e05e      	b.n	800341a <_printf_i+0x1f2>
 800335c:	0648      	lsls	r0, r1, #25
 800335e:	d5da      	bpl.n	8003316 <_printf_i+0xee>
 8003360:	b2ad      	uxth	r5, r5
 8003362:	e7d8      	b.n	8003316 <_printf_i+0xee>
 8003364:	6809      	ldr	r1, [r1, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	0608      	lsls	r0, r1, #24
 800336a:	d505      	bpl.n	8003378 <_printf_i+0x150>
 800336c:	1d11      	adds	r1, r2, #4
 800336e:	6019      	str	r1, [r3, #0]
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	6962      	ldr	r2, [r4, #20]
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e006      	b.n	8003386 <_printf_i+0x15e>
 8003378:	0649      	lsls	r1, r1, #25
 800337a:	d5f7      	bpl.n	800336c <_printf_i+0x144>
 800337c:	1d11      	adds	r1, r2, #4
 800337e:	6019      	str	r1, [r3, #0]
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	8aa2      	ldrh	r2, [r4, #20]
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	2300      	movs	r3, #0
 8003388:	9e04      	ldr	r6, [sp, #16]
 800338a:	6123      	str	r3, [r4, #16]
 800338c:	e054      	b.n	8003438 <_printf_i+0x210>
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	1d11      	adds	r1, r2, #4
 8003392:	6019      	str	r1, [r3, #0]
 8003394:	6816      	ldr	r6, [r2, #0]
 8003396:	2100      	movs	r1, #0
 8003398:	6862      	ldr	r2, [r4, #4]
 800339a:	0030      	movs	r0, r6
 800339c:	f000 f870 	bl	8003480 <memchr>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d001      	beq.n	80033a8 <_printf_i+0x180>
 80033a4:	1b80      	subs	r0, r0, r6
 80033a6:	6060      	str	r0, [r4, #4]
 80033a8:	6863      	ldr	r3, [r4, #4]
 80033aa:	6123      	str	r3, [r4, #16]
 80033ac:	2300      	movs	r3, #0
 80033ae:	9a04      	ldr	r2, [sp, #16]
 80033b0:	7013      	strb	r3, [r2, #0]
 80033b2:	e041      	b.n	8003438 <_printf_i+0x210>
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	0032      	movs	r2, r6
 80033b8:	9906      	ldr	r1, [sp, #24]
 80033ba:	9805      	ldr	r0, [sp, #20]
 80033bc:	9d07      	ldr	r5, [sp, #28]
 80033be:	47a8      	blx	r5
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d043      	beq.n	800344c <_printf_i+0x224>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	2500      	movs	r5, #0
 80033c8:	079b      	lsls	r3, r3, #30
 80033ca:	d40f      	bmi.n	80033ec <_printf_i+0x1c4>
 80033cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ce:	68e0      	ldr	r0, [r4, #12]
 80033d0:	4298      	cmp	r0, r3
 80033d2:	da3d      	bge.n	8003450 <_printf_i+0x228>
 80033d4:	0018      	movs	r0, r3
 80033d6:	e03b      	b.n	8003450 <_printf_i+0x228>
 80033d8:	0022      	movs	r2, r4
 80033da:	2301      	movs	r3, #1
 80033dc:	3219      	adds	r2, #25
 80033de:	9906      	ldr	r1, [sp, #24]
 80033e0:	9805      	ldr	r0, [sp, #20]
 80033e2:	9e07      	ldr	r6, [sp, #28]
 80033e4:	47b0      	blx	r6
 80033e6:	1c43      	adds	r3, r0, #1
 80033e8:	d030      	beq.n	800344c <_printf_i+0x224>
 80033ea:	3501      	adds	r5, #1
 80033ec:	68e3      	ldr	r3, [r4, #12]
 80033ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	429d      	cmp	r5, r3
 80033f4:	dbf0      	blt.n	80033d8 <_printf_i+0x1b0>
 80033f6:	e7e9      	b.n	80033cc <_printf_i+0x1a4>
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	d0a9      	beq.n	8003350 <_printf_i+0x128>
 80033fc:	9e04      	ldr	r6, [sp, #16]
 80033fe:	0028      	movs	r0, r5
 8003400:	0039      	movs	r1, r7
 8003402:	f7fc ff11 	bl	8000228 <__aeabi_uidivmod>
 8003406:	9b03      	ldr	r3, [sp, #12]
 8003408:	3e01      	subs	r6, #1
 800340a:	5c5b      	ldrb	r3, [r3, r1]
 800340c:	0028      	movs	r0, r5
 800340e:	7033      	strb	r3, [r6, #0]
 8003410:	0039      	movs	r1, r7
 8003412:	f7fc fe83 	bl	800011c <__udivsi3>
 8003416:	1e05      	subs	r5, r0, #0
 8003418:	d1f1      	bne.n	80033fe <_printf_i+0x1d6>
 800341a:	2f08      	cmp	r7, #8
 800341c:	d109      	bne.n	8003432 <_printf_i+0x20a>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	07db      	lsls	r3, r3, #31
 8003422:	d506      	bpl.n	8003432 <_printf_i+0x20a>
 8003424:	6863      	ldr	r3, [r4, #4]
 8003426:	6922      	ldr	r2, [r4, #16]
 8003428:	4293      	cmp	r3, r2
 800342a:	dc02      	bgt.n	8003432 <_printf_i+0x20a>
 800342c:	2330      	movs	r3, #48	; 0x30
 800342e:	3e01      	subs	r6, #1
 8003430:	7033      	strb	r3, [r6, #0]
 8003432:	9b04      	ldr	r3, [sp, #16]
 8003434:	1b9b      	subs	r3, r3, r6
 8003436:	6123      	str	r3, [r4, #16]
 8003438:	9b07      	ldr	r3, [sp, #28]
 800343a:	aa09      	add	r2, sp, #36	; 0x24
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	0021      	movs	r1, r4
 8003440:	9b06      	ldr	r3, [sp, #24]
 8003442:	9805      	ldr	r0, [sp, #20]
 8003444:	f7ff fe82 	bl	800314c <_printf_common>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d1b3      	bne.n	80033b4 <_printf_i+0x18c>
 800344c:	2001      	movs	r0, #1
 800344e:	4240      	negs	r0, r0
 8003450:	b00b      	add	sp, #44	; 0x2c
 8003452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003454:	08003f62 	.word	0x08003f62
 8003458:	08003f51 	.word	0x08003f51

0800345c <_sbrk_r>:
 800345c:	2300      	movs	r3, #0
 800345e:	b570      	push	{r4, r5, r6, lr}
 8003460:	4c06      	ldr	r4, [pc, #24]	; (800347c <_sbrk_r+0x20>)
 8003462:	0005      	movs	r5, r0
 8003464:	0008      	movs	r0, r1
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	f7fe fd0e 	bl	8001e88 <_sbrk>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d103      	bne.n	8003478 <_sbrk_r+0x1c>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d000      	beq.n	8003478 <_sbrk_r+0x1c>
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	bd70      	pop	{r4, r5, r6, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	20000320 	.word	0x20000320

08003480 <memchr>:
 8003480:	b2c9      	uxtb	r1, r1
 8003482:	1882      	adds	r2, r0, r2
 8003484:	4290      	cmp	r0, r2
 8003486:	d101      	bne.n	800348c <memchr+0xc>
 8003488:	2000      	movs	r0, #0
 800348a:	4770      	bx	lr
 800348c:	7803      	ldrb	r3, [r0, #0]
 800348e:	428b      	cmp	r3, r1
 8003490:	d0fb      	beq.n	800348a <memchr+0xa>
 8003492:	3001      	adds	r0, #1
 8003494:	e7f6      	b.n	8003484 <memchr+0x4>

08003496 <memmove>:
 8003496:	b510      	push	{r4, lr}
 8003498:	4288      	cmp	r0, r1
 800349a:	d902      	bls.n	80034a2 <memmove+0xc>
 800349c:	188b      	adds	r3, r1, r2
 800349e:	4298      	cmp	r0, r3
 80034a0:	d308      	bcc.n	80034b4 <memmove+0x1e>
 80034a2:	2300      	movs	r3, #0
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d007      	beq.n	80034b8 <memmove+0x22>
 80034a8:	5ccc      	ldrb	r4, [r1, r3]
 80034aa:	54c4      	strb	r4, [r0, r3]
 80034ac:	3301      	adds	r3, #1
 80034ae:	e7f9      	b.n	80034a4 <memmove+0xe>
 80034b0:	5c8b      	ldrb	r3, [r1, r2]
 80034b2:	5483      	strb	r3, [r0, r2]
 80034b4:	3a01      	subs	r2, #1
 80034b6:	d2fb      	bcs.n	80034b0 <memmove+0x1a>
 80034b8:	bd10      	pop	{r4, pc}

080034ba <__malloc_lock>:
 80034ba:	4770      	bx	lr

080034bc <__malloc_unlock>:
 80034bc:	4770      	bx	lr
	...

080034c0 <_free_r>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	0005      	movs	r5, r0
 80034c4:	2900      	cmp	r1, #0
 80034c6:	d010      	beq.n	80034ea <_free_r+0x2a>
 80034c8:	1f0c      	subs	r4, r1, #4
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da00      	bge.n	80034d2 <_free_r+0x12>
 80034d0:	18e4      	adds	r4, r4, r3
 80034d2:	0028      	movs	r0, r5
 80034d4:	f7ff fff1 	bl	80034ba <__malloc_lock>
 80034d8:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <_free_r+0x90>)
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <_free_r+0x2c>
 80034e0:	6063      	str	r3, [r4, #4]
 80034e2:	6014      	str	r4, [r2, #0]
 80034e4:	0028      	movs	r0, r5
 80034e6:	f7ff ffe9 	bl	80034bc <__malloc_unlock>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	42a3      	cmp	r3, r4
 80034ee:	d909      	bls.n	8003504 <_free_r+0x44>
 80034f0:	6821      	ldr	r1, [r4, #0]
 80034f2:	1860      	adds	r0, r4, r1
 80034f4:	4283      	cmp	r3, r0
 80034f6:	d1f3      	bne.n	80034e0 <_free_r+0x20>
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	1841      	adds	r1, r0, r1
 80034fe:	6021      	str	r1, [r4, #0]
 8003500:	e7ee      	b.n	80034e0 <_free_r+0x20>
 8003502:	0013      	movs	r3, r2
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	2a00      	cmp	r2, #0
 8003508:	d001      	beq.n	800350e <_free_r+0x4e>
 800350a:	42a2      	cmp	r2, r4
 800350c:	d9f9      	bls.n	8003502 <_free_r+0x42>
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	1858      	adds	r0, r3, r1
 8003512:	42a0      	cmp	r0, r4
 8003514:	d10b      	bne.n	800352e <_free_r+0x6e>
 8003516:	6820      	ldr	r0, [r4, #0]
 8003518:	1809      	adds	r1, r1, r0
 800351a:	1858      	adds	r0, r3, r1
 800351c:	6019      	str	r1, [r3, #0]
 800351e:	4282      	cmp	r2, r0
 8003520:	d1e0      	bne.n	80034e4 <_free_r+0x24>
 8003522:	6810      	ldr	r0, [r2, #0]
 8003524:	6852      	ldr	r2, [r2, #4]
 8003526:	1841      	adds	r1, r0, r1
 8003528:	6019      	str	r1, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	e7da      	b.n	80034e4 <_free_r+0x24>
 800352e:	42a0      	cmp	r0, r4
 8003530:	d902      	bls.n	8003538 <_free_r+0x78>
 8003532:	230c      	movs	r3, #12
 8003534:	602b      	str	r3, [r5, #0]
 8003536:	e7d5      	b.n	80034e4 <_free_r+0x24>
 8003538:	6821      	ldr	r1, [r4, #0]
 800353a:	1860      	adds	r0, r4, r1
 800353c:	4282      	cmp	r2, r0
 800353e:	d103      	bne.n	8003548 <_free_r+0x88>
 8003540:	6810      	ldr	r0, [r2, #0]
 8003542:	6852      	ldr	r2, [r2, #4]
 8003544:	1841      	adds	r1, r0, r1
 8003546:	6021      	str	r1, [r4, #0]
 8003548:	6062      	str	r2, [r4, #4]
 800354a:	605c      	str	r4, [r3, #4]
 800354c:	e7ca      	b.n	80034e4 <_free_r+0x24>
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	200001c8 	.word	0x200001c8

08003554 <_realloc_r>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	0007      	movs	r7, r0
 8003558:	000d      	movs	r5, r1
 800355a:	0016      	movs	r6, r2
 800355c:	2900      	cmp	r1, #0
 800355e:	d105      	bne.n	800356c <_realloc_r+0x18>
 8003560:	0011      	movs	r1, r2
 8003562:	f7ff fc2f 	bl	8002dc4 <_malloc_r>
 8003566:	0004      	movs	r4, r0
 8003568:	0020      	movs	r0, r4
 800356a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800356c:	2a00      	cmp	r2, #0
 800356e:	d103      	bne.n	8003578 <_realloc_r+0x24>
 8003570:	f7ff ffa6 	bl	80034c0 <_free_r>
 8003574:	0034      	movs	r4, r6
 8003576:	e7f7      	b.n	8003568 <_realloc_r+0x14>
 8003578:	f000 f812 	bl	80035a0 <_malloc_usable_size_r>
 800357c:	002c      	movs	r4, r5
 800357e:	4286      	cmp	r6, r0
 8003580:	d9f2      	bls.n	8003568 <_realloc_r+0x14>
 8003582:	0031      	movs	r1, r6
 8003584:	0038      	movs	r0, r7
 8003586:	f7ff fc1d 	bl	8002dc4 <_malloc_r>
 800358a:	1e04      	subs	r4, r0, #0
 800358c:	d0ec      	beq.n	8003568 <_realloc_r+0x14>
 800358e:	0029      	movs	r1, r5
 8003590:	0032      	movs	r2, r6
 8003592:	f7ff fbe3 	bl	8002d5c <memcpy>
 8003596:	0029      	movs	r1, r5
 8003598:	0038      	movs	r0, r7
 800359a:	f7ff ff91 	bl	80034c0 <_free_r>
 800359e:	e7e3      	b.n	8003568 <_realloc_r+0x14>

080035a0 <_malloc_usable_size_r>:
 80035a0:	1f0b      	subs	r3, r1, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1f18      	subs	r0, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da01      	bge.n	80035ae <_malloc_usable_size_r+0xe>
 80035aa:	580b      	ldr	r3, [r1, r0]
 80035ac:	18c0      	adds	r0, r0, r3
 80035ae:	4770      	bx	lr

080035b0 <_init>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b6:	bc08      	pop	{r3}
 80035b8:	469e      	mov	lr, r3
 80035ba:	4770      	bx	lr

080035bc <_fini>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c2:	bc08      	pop	{r3}
 80035c4:	469e      	mov	lr, r3
 80035c6:	4770      	bx	lr
